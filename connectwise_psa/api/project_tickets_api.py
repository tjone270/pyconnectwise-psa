# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr

from typing import List, Optional

from connectwise_psa.models.activity_reference import ActivityReference
from connectwise_psa.models.configuration_reference import ConfigurationReference
from connectwise_psa.models.convert_item import ConvertItem
from connectwise_psa.models.count import Count
from connectwise_psa.models.document_reference import DocumentReference
from connectwise_psa.models.filter_values import FilterValues
from connectwise_psa.models.patch_operation import PatchOperation
from connectwise_psa.models.product_reference import ProductReference
from connectwise_psa.models.project_ticket import ProjectTicket
from connectwise_psa.models.schedule_entry_reference import ScheduleEntryReference
from connectwise_psa.models.success_response import SuccessResponse
from connectwise_psa.models.time_entry_reference import TimeEntryReference

from connectwise_psa.api_client import ApiClient
from connectwise_psa.api_response import ApiResponse
from connectwise_psa.rest import RESTResponseType


class ProjectTicketsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_project_tickets_by_id(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_project_tickets_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_project_tickets_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_project_tickets_by_id_serialize(
        self,
        id,
        client_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/project/tickets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_project_tickets_by_parent_id_configurations_by_id(
        self,
        id: Annotated[StrictInt, Field(description="configurationId")],
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete ConfigurationReference


        :param id: configurationId (required)
        :type id: int
        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_project_tickets_by_parent_id_configurations_by_id_serialize(
            id=id,
            parent_id=parent_id,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_project_tickets_by_parent_id_configurations_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="configurationId")],
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete ConfigurationReference


        :param id: configurationId (required)
        :type id: int
        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_project_tickets_by_parent_id_configurations_by_id_serialize(
            id=id,
            parent_id=parent_id,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_project_tickets_by_parent_id_configurations_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="configurationId")],
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete ConfigurationReference


        :param id: configurationId (required)
        :type id: int
        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_project_tickets_by_parent_id_configurations_by_id_serialize(
            id=id,
            parent_id=parent_id,
            client_id=client_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_project_tickets_by_parent_id_configurations_by_id_serialize(
        self,
        id,
        parent_id,
        client_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/project/tickets/{parentId}/configurations/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets(
        self,
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ProjectTicket]:
        """Get List of ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_serialize(
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProjectTicket]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_with_http_info(
        self,
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ProjectTicket]]:
        """Get List of ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_serialize(
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProjectTicket]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_without_preload_content(
        self,
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get List of ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_serialize(
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProjectTicket]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_serialize(
        self,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_id(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProjectTicket:
        """Get ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProjectTicket]:
        """Get ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_id_serialize(
        self,
        id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_activities(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ActivityReference]:
        """Get List of ActivityReference              Gets activities associated to the ticket              Please use the /sales/activities?conditions=ticket/id={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_activities_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ActivityReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_activities_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ActivityReference]]:
        """Get List of ActivityReference              Gets activities associated to the ticket              Please use the /sales/activities?conditions=ticket/id={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_activities_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ActivityReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_activities_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get List of ActivityReference              Gets activities associated to the ticket              Please use the /sales/activities?conditions=ticket/id={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_activities_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ActivityReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_activities_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/activities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_activities_count(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Count:
        """Get Count of ActivityReference              Gets count of activities associated to the ticket              Please use the /sales/activities/count?conditions=ticket/id={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_activities_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_activities_count_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Count]:
        """Get Count of ActivityReference              Gets count of activities associated to the ticket              Please use the /sales/activities/count?conditions=ticket/id={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_activities_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_activities_count_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Count of ActivityReference              Gets count of activities associated to the ticket              Please use the /sales/activities/count?conditions=ticket/id={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_activities_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_activities_count_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/activities/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_configurations(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ConfigurationReference]:
        """Get List of ConfigurationReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_configurations_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ConfigurationReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_configurations_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ConfigurationReference]]:
        """Get List of ConfigurationReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_configurations_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ConfigurationReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_configurations_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get List of ConfigurationReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_configurations_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ConfigurationReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_configurations_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/configurations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_configurations_by_id(
        self,
        id: Annotated[StrictInt, Field(description="configurationId")],
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConfigurationReference:
        """Get ConfigurationReference


        :param id: configurationId (required)
        :type id: int
        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_configurations_by_id_serialize(
            id=id,
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurationReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_configurations_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="configurationId")],
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConfigurationReference]:
        """Get ConfigurationReference


        :param id: configurationId (required)
        :type id: int
        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_configurations_by_id_serialize(
            id=id,
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurationReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_configurations_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="configurationId")],
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get ConfigurationReference


        :param id: configurationId (required)
        :type id: int
        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_configurations_by_id_serialize(
            id=id,
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurationReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_configurations_by_id_serialize(
        self,
        id,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/configurations/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_configurations_count(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Count:
        """Get Count of ConfigurationReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_configurations_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_configurations_count_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Count]:
        """Get Count of ConfigurationReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_configurations_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_configurations_count_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Count of ConfigurationReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_configurations_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_configurations_count_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/configurations/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_documents(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[DocumentReference]:
        """Get List of DocumentReference              Gets the documents associated to the ticket              Please use the /system/documents?recordType=Ticket&amp;recordId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_documents_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DocumentReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_documents_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[DocumentReference]]:
        """Get List of DocumentReference              Gets the documents associated to the ticket              Please use the /system/documents?recordType=Ticket&amp;recordId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_documents_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DocumentReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_documents_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get List of DocumentReference              Gets the documents associated to the ticket              Please use the /system/documents?recordType=Ticket&amp;recordId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_documents_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DocumentReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_documents_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/documents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_documents_count(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Count:
        """Get Count of DocumentReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_documents_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_documents_count_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Count]:
        """Get Count of DocumentReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_documents_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_documents_count_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Count of DocumentReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_documents_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_documents_count_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/documents/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_products(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ProductReference]:
        """Get List of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_products_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_products_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ProductReference]]:
        """Get List of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_products_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_products_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get List of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_products_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_products_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/products',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_products_count(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Count:
        """Get Count of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products/count?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_products_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_products_count_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Count]:
        """Get Count of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products/count?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_products_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_products_count_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Count of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products/count?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_products_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_products_count_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/products/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_scheduleentries(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ScheduleEntryReference]:
        """Get List of ScheduleEntryReference              Gets the schedule entries associated to the ticket              Please use the /schedule/entries?conditions=type/id=4 AND objectId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_scheduleentries_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ScheduleEntryReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_scheduleentries_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ScheduleEntryReference]]:
        """Get List of ScheduleEntryReference              Gets the schedule entries associated to the ticket              Please use the /schedule/entries?conditions=type/id=4 AND objectId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_scheduleentries_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ScheduleEntryReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_scheduleentries_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get List of ScheduleEntryReference              Gets the schedule entries associated to the ticket              Please use the /schedule/entries?conditions=type/id=4 AND objectId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_scheduleentries_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ScheduleEntryReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_scheduleentries_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/scheduleentries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_scheduleentries_count(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Count:
        """Get Count of ScheduleEntryReference              Gets the schedule entries count associated to the ticket              Please use the /schedule/entries/count?conditions=type/id=4 AND objectId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_scheduleentries_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_scheduleentries_count_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Count]:
        """Get Count of ScheduleEntryReference              Gets the schedule entries count associated to the ticket              Please use the /schedule/entries/count?conditions=type/id=4 AND objectId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_scheduleentries_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_scheduleentries_count_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Count of ScheduleEntryReference              Gets the schedule entries count associated to the ticket              Please use the /schedule/entries/count?conditions=type/id=4 AND objectId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_scheduleentries_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_scheduleentries_count_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/scheduleentries/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_timeentries(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[TimeEntryReference]:
        """Get List of TimeEntryReference              Gets time entries associated to the ticket              Please use the /time/entries?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_timeentries_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TimeEntryReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_timeentries_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[TimeEntryReference]]:
        """Get List of TimeEntryReference              Gets time entries associated to the ticket              Please use the /time/entries?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_timeentries_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TimeEntryReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_timeentries_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get List of TimeEntryReference              Gets time entries associated to the ticket              Please use the /time/entries?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_timeentries_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[TimeEntryReference]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_timeentries_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/timeentries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_by_parent_id_timeentries_count(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Count:
        """Get Count of TimeEntryReference              Gets time entries count associated to the ticket              Please use the /time/entries/count?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_timeentries_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_by_parent_id_timeentries_count_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Count]:
        """Get Count of TimeEntryReference              Gets time entries count associated to the ticket              Please use the /time/entries/count?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_timeentries_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_by_parent_id_timeentries_count_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Count of TimeEntryReference              Gets time entries count associated to the ticket              Please use the /time/entries/count?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_by_parent_id_timeentries_count_serialize(
            parent_id=parent_id,
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_by_parent_id_timeentries_count_serialize(
        self,
        parent_id,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/{parentId}/timeentries/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_tickets_count(
        self,
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Count:
        """Get Count of ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_count_serialize(
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_tickets_count_with_http_info(
        self,
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Count]:
        """Get Count of ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_count_serialize(
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_tickets_count_without_preload_content(
        self,
        client_id: StrictStr,
        conditions: Optional[StrictStr] = None,
        child_conditions: Optional[StrictStr] = None,
        custom_field_conditions: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        fields: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        page_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Count of ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param conditions: 
        :type conditions: str
        :param child_conditions: 
        :type child_conditions: str
        :param custom_field_conditions: 
        :type custom_field_conditions: str
        :param order_by: 
        :type order_by: str
        :param fields: 
        :type fields: str
        :param page: 
        :type page: int
        :param page_size: 
        :type page_size: int
        :param page_id: 
        :type page_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_tickets_count_serialize(
            client_id=client_id,
            conditions=conditions,
            child_conditions=child_conditions,
            custom_field_conditions=custom_field_conditions,
            order_by=order_by,
            fields=fields,
            page=page,
            page_size=page_size,
            page_id=page_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Count"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_tickets_count_serialize(
        self,
        client_id,
        conditions,
        child_conditions,
        custom_field_conditions,
        order_by,
        fields,
        page,
        page_size,
        page_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if child_conditions is not None:
            
            _query_params.append(('childConditions', child_conditions))
            
        if custom_field_conditions is not None:
            
            _query_params.append(('customFieldConditions', custom_field_conditions))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_id is not None:
            
            _query_params.append(('pageId', page_id))
            
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/tickets/count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_project_tickets_by_id(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        patch_operation: Annotated[List[PatchOperation], Field(description="List of PatchOperation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProjectTicket:
        """Patch ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param patch_operation: List of PatchOperation (required)
        :type patch_operation: List[PatchOperation]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            patch_operation=patch_operation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_project_tickets_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        patch_operation: Annotated[List[PatchOperation], Field(description="List of PatchOperation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProjectTicket]:
        """Patch ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param patch_operation: List of PatchOperation (required)
        :type patch_operation: List[PatchOperation]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            patch_operation=patch_operation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_project_tickets_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        patch_operation: Annotated[List[PatchOperation], Field(description="List of PatchOperation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Patch ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param patch_operation: List of PatchOperation (required)
        :type patch_operation: List[PatchOperation]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            patch_operation=patch_operation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_project_tickets_by_id_serialize(
        self,
        id,
        client_id,
        patch_operation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
            'PatchOperation': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter
        if patch_operation is not None:
            _body_params = patch_operation


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/project/tickets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_project_tickets(
        self,
        client_id: StrictStr,
        project_ticket: Annotated[ProjectTicket, Field(description="ticket")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProjectTicket:
        """Post ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param project_ticket: ticket (required)
        :type project_ticket: ProjectTicket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_serialize(
            client_id=client_id,
            project_ticket=project_ticket,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_project_tickets_with_http_info(
        self,
        client_id: StrictStr,
        project_ticket: Annotated[ProjectTicket, Field(description="ticket")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProjectTicket]:
        """Post ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param project_ticket: ticket (required)
        :type project_ticket: ProjectTicket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_serialize(
            client_id=client_id,
            project_ticket=project_ticket,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_project_tickets_without_preload_content(
        self,
        client_id: StrictStr,
        project_ticket: Annotated[ProjectTicket, Field(description="ticket")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Post ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param project_ticket: ticket (required)
        :type project_ticket: ProjectTicket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_serialize(
            client_id=client_id,
            project_ticket=project_ticket,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_project_tickets_serialize(
        self,
        client_id,
        project_ticket,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter
        if project_ticket is not None:
            _body_params = project_ticket


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/project/tickets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_project_tickets_by_parent_id_configurations(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        configuration_reference: Annotated[ConfigurationReference, Field(description="configuration")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConfigurationReference:
        """Post ConfigurationReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param configuration_reference: configuration (required)
        :type configuration_reference: ConfigurationReference
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_by_parent_id_configurations_serialize(
            parent_id=parent_id,
            client_id=client_id,
            configuration_reference=configuration_reference,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ConfigurationReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_project_tickets_by_parent_id_configurations_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        configuration_reference: Annotated[ConfigurationReference, Field(description="configuration")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConfigurationReference]:
        """Post ConfigurationReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param configuration_reference: configuration (required)
        :type configuration_reference: ConfigurationReference
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_by_parent_id_configurations_serialize(
            parent_id=parent_id,
            client_id=client_id,
            configuration_reference=configuration_reference,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ConfigurationReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_project_tickets_by_parent_id_configurations_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        configuration_reference: Annotated[ConfigurationReference, Field(description="configuration")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Post ConfigurationReference


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param configuration_reference: configuration (required)
        :type configuration_reference: ConfigurationReference
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_by_parent_id_configurations_serialize(
            parent_id=parent_id,
            client_id=client_id,
            configuration_reference=configuration_reference,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ConfigurationReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_project_tickets_by_parent_id_configurations_serialize(
        self,
        parent_id,
        client_id,
        configuration_reference,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter
        if configuration_reference is not None:
            _body_params = configuration_reference


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/project/tickets/{parentId}/configurations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_project_tickets_by_parent_id_convert(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        convert_item: Annotated[ConvertItem, Field(description="item")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SuccessResponse:
        """Post SuccessResponse


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param convert_item: item (required)
        :type convert_item: ConvertItem
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_by_parent_id_convert_serialize(
            parent_id=parent_id,
            client_id=client_id,
            convert_item=convert_item,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SuccessResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_project_tickets_by_parent_id_convert_with_http_info(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        convert_item: Annotated[ConvertItem, Field(description="item")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SuccessResponse]:
        """Post SuccessResponse


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param convert_item: item (required)
        :type convert_item: ConvertItem
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_by_parent_id_convert_serialize(
            parent_id=parent_id,
            client_id=client_id,
            convert_item=convert_item,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SuccessResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_project_tickets_by_parent_id_convert_without_preload_content(
        self,
        parent_id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        convert_item: Annotated[ConvertItem, Field(description="item")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Post SuccessResponse


        :param parent_id: ticketId (required)
        :type parent_id: int
        :param client_id:  (required)
        :type client_id: str
        :param convert_item: item (required)
        :type convert_item: ConvertItem
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_by_parent_id_convert_serialize(
            parent_id=parent_id,
            client_id=client_id,
            convert_item=convert_item,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SuccessResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_project_tickets_by_parent_id_convert_serialize(
        self,
        parent_id,
        client_id,
        convert_item,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent_id is not None:
            _path_params['parentId'] = parent_id
        # process the query parameters
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter
        if convert_item is not None:
            _body_params = convert_item


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/project/tickets/{parentId}/convert',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_project_tickets_search(
        self,
        client_id: StrictStr,
        filter_values: Annotated[FilterValues, Field(description="filterValues")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ProjectTicket]:
        """Post List of ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param filter_values: filterValues (required)
        :type filter_values: FilterValues
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_search_serialize(
            client_id=client_id,
            filter_values=filter_values,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProjectTicket]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_project_tickets_search_with_http_info(
        self,
        client_id: StrictStr,
        filter_values: Annotated[FilterValues, Field(description="filterValues")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ProjectTicket]]:
        """Post List of ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param filter_values: filterValues (required)
        :type filter_values: FilterValues
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_search_serialize(
            client_id=client_id,
            filter_values=filter_values,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProjectTicket]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_project_tickets_search_without_preload_content(
        self,
        client_id: StrictStr,
        filter_values: Annotated[FilterValues, Field(description="filterValues")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Post List of ProjectTicket


        :param client_id:  (required)
        :type client_id: str
        :param filter_values: filterValues (required)
        :type filter_values: FilterValues
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_project_tickets_search_serialize(
            client_id=client_id,
            filter_values=filter_values,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProjectTicket]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_project_tickets_search_serialize(
        self,
        client_id,
        filter_values,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter
        if filter_values is not None:
            _body_params = filter_values


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/project/tickets/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_project_tickets_by_id(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        project_ticket: Annotated[ProjectTicket, Field(description="ticket")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProjectTicket:
        """Put ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param project_ticket: ticket (required)
        :type project_ticket: ProjectTicket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            project_ticket=project_ticket,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_project_tickets_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        project_ticket: Annotated[ProjectTicket, Field(description="ticket")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProjectTicket]:
        """Put ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param project_ticket: ticket (required)
        :type project_ticket: ProjectTicket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            project_ticket=project_ticket,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_project_tickets_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="ticketId")],
        client_id: StrictStr,
        project_ticket: Annotated[ProjectTicket, Field(description="ticket")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Put ProjectTicket


        :param id: ticketId (required)
        :type id: int
        :param client_id:  (required)
        :type client_id: str
        :param project_ticket: ticket (required)
        :type project_ticket: ProjectTicket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_project_tickets_by_id_serialize(
            id=id,
            client_id=client_id,
            project_ticket=project_ticket,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProjectTicket"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_project_tickets_by_id_serialize(
        self,
        id,
        client_id,
        project_ticket,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if client_id is not None:
            _header_params['clientId'] = client_id
        # process the form parameters
        # process the body parameter
        if project_ticket is not None:
            _body_params = project_ticket


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.connectwise.com+json; version=2022.2'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/project/tickets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


