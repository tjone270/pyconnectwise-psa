# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TimeEntryChargeToSelection(BaseModel):
    """
    TimeEntryChargeToSelection
    """ # noqa: E501
    activity_rec_id: Optional[StrictInt] = Field(default=None, alias="activityRecId")
    add_notes_to_desc: Optional[StrictBool] = Field(default=None, alias="addNotesToDesc")
    add_notes_to_internal: Optional[StrictBool] = Field(default=None, alias="addNotesToInternal")
    add_notes_to_resolution: Optional[StrictBool] = Field(default=None, alias="addNotesToResolution")
    agr_expense_billing_options_no_default_flag: Optional[StrictBool] = Field(default=None, alias="agrExpenseBillingOptionsNoDefaultFlag")
    agr_name: Optional[StrictStr] = Field(default=None, alias="agrName")
    agr_rec_id: Optional[StrictInt] = Field(default=None, alias="agrRecId")
    billing_option_rec_id: Optional[StrictInt] = Field(default=None, alias="billingOptionRecId")
    billing_unit_name: Optional[StrictStr] = Field(default=None, alias="billingUnitName")
    billing_unit_rec_id: Optional[StrictInt] = Field(default=None, alias="billingUnitRecId")
    charge_code_rec_id: Optional[StrictInt] = Field(default=None, alias="chargeCodeRecId")
    charge_company_id: Optional[StrictInt] = Field(default=None, alias="chargeCompanyId")
    charge_company_name: Optional[StrictStr] = Field(default=None, alias="chargeCompanyName")
    charge_company_no_service_flag: Optional[StrictBool] = Field(default=None, alias="chargeCompanyNoServiceFlag")
    charge_description: Optional[StrictStr] = Field(default=None, alias="chargeDescription")
    charge_rec_id: Optional[StrictInt] = Field(default=None, alias="chargeRecId")
    company_address_rec_id: Optional[StrictInt] = Field(default=None, alias="companyAddressRecId")
    contact_email_address: Optional[StrictStr] = Field(default=None, alias="contactEmailAddress")
    contact_name: Optional[StrictStr] = Field(default=None, alias="contactName")
    contact_rec_id: Optional[StrictInt] = Field(default=None, alias="contactRecId")
    description: Optional[StrictStr] = None
    disable_successor_time: Optional[StrictBool] = Field(default=None, alias="disableSuccessorTime")
    expense_billing_option_rec_id: Optional[StrictInt] = Field(default=None, alias="expenseBillingOptionRecId")
    expense_billing_option_text: Optional[StrictStr] = Field(default=None, alias="expenseBillingOptionText")
    expense_billing_options_no_default_flag: Optional[StrictBool] = Field(default=None, alias="expenseBillingOptionsNoDefaultFlag")
    owner_level_name: Optional[StrictStr] = Field(default=None, alias="ownerLevelName")
    owner_level_rec_id: Optional[StrictInt] = Field(default=None, alias="ownerLevelRecId")
    phase_name: Optional[StrictStr] = Field(default=None, alias="phaseName")
    phase_rec_id: Optional[StrictInt] = Field(default=None, alias="phaseRecId")
    project_name: Optional[StrictStr] = Field(default=None, alias="projectName")
    project_rec_id: Optional[StrictInt] = Field(default=None, alias="projectRecId")
    rec_type: Optional[StrictStr] = Field(default=None, alias="recType")
    service_rec_id: Optional[StrictInt] = Field(default=None, alias="serviceRecId")
    sr_member_is_resource_flag: Optional[StrictBool] = Field(default=None, alias="srMemberIsResourceFlag")
    sr_status_closed_flag: Optional[StrictBool] = Field(default=None, alias="srStatusClosedFlag")
    sr_status_desc: Optional[StrictStr] = Field(default=None, alias="srStatusDesc")
    sr_status_no_time_flag: Optional[StrictBool] = Field(default=None, alias="srStatusNoTimeFlag")
    sr_status_rec_id: Optional[StrictInt] = Field(default=None, alias="srStatusRecId")
    work_role_name: Optional[StrictStr] = Field(default=None, alias="workRoleName")
    work_role_rec_id: Optional[StrictInt] = Field(default=None, alias="workRoleRecId")
    work_type_name: Optional[StrictStr] = Field(default=None, alias="workTypeName")
    work_type_rec_id: Optional[StrictInt] = Field(default=None, alias="workTypeRecId")
    __properties: ClassVar[List[str]] = ["activityRecId", "addNotesToDesc", "addNotesToInternal", "addNotesToResolution", "agrExpenseBillingOptionsNoDefaultFlag", "agrName", "agrRecId", "billingOptionRecId", "billingUnitName", "billingUnitRecId", "chargeCodeRecId", "chargeCompanyId", "chargeCompanyName", "chargeCompanyNoServiceFlag", "chargeDescription", "chargeRecId", "companyAddressRecId", "contactEmailAddress", "contactName", "contactRecId", "description", "disableSuccessorTime", "expenseBillingOptionRecId", "expenseBillingOptionText", "expenseBillingOptionsNoDefaultFlag", "ownerLevelName", "ownerLevelRecId", "phaseName", "phaseRecId", "projectName", "projectRecId", "recType", "serviceRecId", "srMemberIsResourceFlag", "srStatusClosedFlag", "srStatusDesc", "srStatusNoTimeFlag", "srStatusRecId", "workRoleName", "workRoleRecId", "workTypeName", "workTypeRecId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimeEntryChargeToSelection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TimeEntryChargeToSelection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TimeEntryChargeToSelection) in the input: " + _key)

        _obj = cls.model_validate({
            "activityRecId": obj.get("activityRecId"),
            "addNotesToDesc": obj.get("addNotesToDesc"),
            "addNotesToInternal": obj.get("addNotesToInternal"),
            "addNotesToResolution": obj.get("addNotesToResolution"),
            "agrExpenseBillingOptionsNoDefaultFlag": obj.get("agrExpenseBillingOptionsNoDefaultFlag"),
            "agrName": obj.get("agrName"),
            "agrRecId": obj.get("agrRecId"),
            "billingOptionRecId": obj.get("billingOptionRecId"),
            "billingUnitName": obj.get("billingUnitName"),
            "billingUnitRecId": obj.get("billingUnitRecId"),
            "chargeCodeRecId": obj.get("chargeCodeRecId"),
            "chargeCompanyId": obj.get("chargeCompanyId"),
            "chargeCompanyName": obj.get("chargeCompanyName"),
            "chargeCompanyNoServiceFlag": obj.get("chargeCompanyNoServiceFlag"),
            "chargeDescription": obj.get("chargeDescription"),
            "chargeRecId": obj.get("chargeRecId"),
            "companyAddressRecId": obj.get("companyAddressRecId"),
            "contactEmailAddress": obj.get("contactEmailAddress"),
            "contactName": obj.get("contactName"),
            "contactRecId": obj.get("contactRecId"),
            "description": obj.get("description"),
            "disableSuccessorTime": obj.get("disableSuccessorTime"),
            "expenseBillingOptionRecId": obj.get("expenseBillingOptionRecId"),
            "expenseBillingOptionText": obj.get("expenseBillingOptionText"),
            "expenseBillingOptionsNoDefaultFlag": obj.get("expenseBillingOptionsNoDefaultFlag"),
            "ownerLevelName": obj.get("ownerLevelName"),
            "ownerLevelRecId": obj.get("ownerLevelRecId"),
            "phaseName": obj.get("phaseName"),
            "phaseRecId": obj.get("phaseRecId"),
            "projectName": obj.get("projectName"),
            "projectRecId": obj.get("projectRecId"),
            "recType": obj.get("recType"),
            "serviceRecId": obj.get("serviceRecId"),
            "srMemberIsResourceFlag": obj.get("srMemberIsResourceFlag"),
            "srStatusClosedFlag": obj.get("srStatusClosedFlag"),
            "srStatusDesc": obj.get("srStatusDesc"),
            "srStatusNoTimeFlag": obj.get("srStatusNoTimeFlag"),
            "srStatusRecId": obj.get("srStatusRecId"),
            "workRoleName": obj.get("workRoleName"),
            "workRoleRecId": obj.get("workRoleRecId"),
            "workTypeName": obj.get("workTypeName"),
            "workTypeRecId": obj.get("workTypeRecId")
        })
        return _obj


