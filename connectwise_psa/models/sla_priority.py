# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.priority_reference import PriorityReference
from connectwise_psa.models.sla_reference import SLAReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SLAPriority(BaseModel):
    """
    SLAPriority
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    id: Optional[StrictInt] = None
    plan_within: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="planWithin")
    plan_within_percent: Optional[StrictInt] = Field(default=None, alias="planWithinPercent")
    priority: Optional[PriorityReference] = None
    resolution_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="resolutionHours")
    resolution_percent: Optional[StrictInt] = Field(default=None, alias="resolutionPercent")
    respond_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="respondHours")
    respond_percent: Optional[StrictInt] = Field(default=None, alias="respondPercent")
    sla: Optional[SLAReference] = None
    __properties: ClassVar[List[str]] = ["_info", "id", "planWithin", "planWithinPercent", "priority", "resolutionHours", "resolutionPercent", "respondHours", "respondPercent", "sla"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SLAPriority from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sla
        if self.sla:
            _dict['sla'] = self.sla.to_dict()
        # set to None if plan_within (nullable) is None
        # and model_fields_set contains the field
        if self.plan_within is None and "plan_within" in self.model_fields_set:
            _dict['planWithin'] = None

        # set to None if plan_within_percent (nullable) is None
        # and model_fields_set contains the field
        if self.plan_within_percent is None and "plan_within_percent" in self.model_fields_set:
            _dict['planWithinPercent'] = None

        # set to None if resolution_hours (nullable) is None
        # and model_fields_set contains the field
        if self.resolution_hours is None and "resolution_hours" in self.model_fields_set:
            _dict['resolutionHours'] = None

        # set to None if resolution_percent (nullable) is None
        # and model_fields_set contains the field
        if self.resolution_percent is None and "resolution_percent" in self.model_fields_set:
            _dict['resolutionPercent'] = None

        # set to None if respond_hours (nullable) is None
        # and model_fields_set contains the field
        if self.respond_hours is None and "respond_hours" in self.model_fields_set:
            _dict['respondHours'] = None

        # set to None if respond_percent (nullable) is None
        # and model_fields_set contains the field
        if self.respond_percent is None and "respond_percent" in self.model_fields_set:
            _dict['respondPercent'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SLAPriority from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SLAPriority) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "id": obj.get("id"),
            "planWithin": obj.get("planWithin"),
            "planWithinPercent": obj.get("planWithinPercent"),
            "priority": PriorityReference.from_dict(obj.get("priority")) if obj.get("priority") is not None else None,
            "resolutionHours": obj.get("resolutionHours"),
            "resolutionPercent": obj.get("resolutionPercent"),
            "respondHours": obj.get("respondHours"),
            "respondPercent": obj.get("respondPercent"),
            "sla": SLAReference.from_dict(obj.get("sla")) if obj.get("sla") is not None else None
        })
        return _obj


