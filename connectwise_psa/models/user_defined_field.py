# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.user_defined_field_option import UserDefinedFieldOption
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UserDefinedField(BaseModel):
    """
    UserDefinedField
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    add_all_business_units: Optional[StrictBool] = Field(default=None, alias="addAllBusinessUnits")
    add_all_locations: Optional[StrictBool] = Field(default=None, alias="addAllLocations")
    business_unit_ids: Optional[List[StrictInt]] = Field(default=None, alias="businessUnitIds")
    button_url: Optional[StrictStr] = Field(default=None, description="Only available with Button Field Type. Required when entryTypeIdentifier is button Max length: 1000;", alias="buttonUrl")
    caption: StrictStr = Field(description="Field caption Max length: 25;")
    date_created: Optional[datetime] = Field(default=None, description="Date in UTC the custom field was created", alias="dateCreated")
    display_on_screen_flag: Optional[StrictBool] = Field(default=None, alias="displayOnScreenFlag")
    entry_type_identifier: Optional[StrictStr] = Field(default=None, alias="entryTypeIdentifier")
    field_type_identifier: Optional[StrictStr] = Field(alias="fieldTypeIdentifier")
    help_text: Optional[StrictStr] = Field(default=None, description="Help text to accompany the custom field Max length: 1000;", alias="helpText")
    id: Optional[StrictInt] = Field(default=None, description="ID of the custom user defined field")
    list_view_flag: Optional[StrictBool] = Field(default=None, description="Denotes that this custom field is included on a list view", alias="listViewFlag")
    location_ids: Optional[List[StrictInt]] = Field(default=None, alias="locationIds")
    number_decimals: Optional[StrictInt] = Field(default=None, description="Only valid for Number or percent", alias="numberDecimals")
    options: Optional[List[UserDefinedFieldOption]] = None
    pod_id: Optional[StrictInt] = Field(description="Id of the Pod where the custom field will be placed", alias="podId")
    read_only_flag: Optional[StrictBool] = Field(default=None, alias="readOnlyFlag")
    remove_all_business_units: Optional[StrictBool] = Field(default=None, alias="removeAllBusinessUnits")
    remove_all_locations: Optional[StrictBool] = Field(default=None, alias="removeAllLocations")
    required_flag: Optional[StrictBool] = Field(default=None, alias="requiredFlag")
    screen_id: Optional[StrictStr] = Field(default=None, description="Field ScreenID Max length: 25;", alias="screenId")
    sequence_number: Optional[StrictInt] = Field(description="Must be between 1 and 500.  This defines the order in which the custom fields will appear", alias="sequenceNumber")
    __properties: ClassVar[List[str]] = ["_info", "addAllBusinessUnits", "addAllLocations", "businessUnitIds", "buttonUrl", "caption", "dateCreated", "displayOnScreenFlag", "entryTypeIdentifier", "fieldTypeIdentifier", "helpText", "id", "listViewFlag", "locationIds", "numberDecimals", "options", "podId", "readOnlyFlag", "removeAllBusinessUnits", "removeAllLocations", "requiredFlag", "screenId", "sequenceNumber"]

    @field_validator('entry_type_identifier')
    def entry_type_identifier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Date', 'EntryField', 'List', 'Option'):
            raise ValueError("must be one of enum values ('Date', 'EntryField', 'List', 'Option')")
        return value

    @field_validator('field_type_identifier')
    def field_type_identifier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TextArea', 'Button', 'Currency', 'Date', 'Hyperlink', 'IPAddress', 'Checkbox', 'Number', 'Percent', 'Text', 'Password'):
            raise ValueError("must be one of enum values ('TextArea', 'Button', 'Currency', 'Date', 'Hyperlink', 'IPAddress', 'Checkbox', 'Number', 'Percent', 'Text', 'Password')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UserDefinedField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item in self.options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['options'] = _items
        # set to None if add_all_business_units (nullable) is None
        # and model_fields_set contains the field
        if self.add_all_business_units is None and "add_all_business_units" in self.model_fields_set:
            _dict['addAllBusinessUnits'] = None

        # set to None if add_all_locations (nullable) is None
        # and model_fields_set contains the field
        if self.add_all_locations is None and "add_all_locations" in self.model_fields_set:
            _dict['addAllLocations'] = None

        # set to None if display_on_screen_flag (nullable) is None
        # and model_fields_set contains the field
        if self.display_on_screen_flag is None and "display_on_screen_flag" in self.model_fields_set:
            _dict['displayOnScreenFlag'] = None

        # set to None if entry_type_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.entry_type_identifier is None and "entry_type_identifier" in self.model_fields_set:
            _dict['entryTypeIdentifier'] = None

        # set to None if field_type_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.field_type_identifier is None and "field_type_identifier" in self.model_fields_set:
            _dict['fieldTypeIdentifier'] = None

        # set to None if list_view_flag (nullable) is None
        # and model_fields_set contains the field
        if self.list_view_flag is None and "list_view_flag" in self.model_fields_set:
            _dict['listViewFlag'] = None

        # set to None if number_decimals (nullable) is None
        # and model_fields_set contains the field
        if self.number_decimals is None and "number_decimals" in self.model_fields_set:
            _dict['numberDecimals'] = None

        # set to None if pod_id (nullable) is None
        # and model_fields_set contains the field
        if self.pod_id is None and "pod_id" in self.model_fields_set:
            _dict['podId'] = None

        # set to None if read_only_flag (nullable) is None
        # and model_fields_set contains the field
        if self.read_only_flag is None and "read_only_flag" in self.model_fields_set:
            _dict['readOnlyFlag'] = None

        # set to None if remove_all_business_units (nullable) is None
        # and model_fields_set contains the field
        if self.remove_all_business_units is None and "remove_all_business_units" in self.model_fields_set:
            _dict['removeAllBusinessUnits'] = None

        # set to None if remove_all_locations (nullable) is None
        # and model_fields_set contains the field
        if self.remove_all_locations is None and "remove_all_locations" in self.model_fields_set:
            _dict['removeAllLocations'] = None

        # set to None if required_flag (nullable) is None
        # and model_fields_set contains the field
        if self.required_flag is None and "required_flag" in self.model_fields_set:
            _dict['requiredFlag'] = None

        # set to None if sequence_number (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_number is None and "sequence_number" in self.model_fields_set:
            _dict['sequenceNumber'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UserDefinedField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in UserDefinedField) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "addAllBusinessUnits": obj.get("addAllBusinessUnits"),
            "addAllLocations": obj.get("addAllLocations"),
            "businessUnitIds": obj.get("businessUnitIds"),
            "buttonUrl": obj.get("buttonUrl"),
            "caption": obj.get("caption"),
            "dateCreated": obj.get("dateCreated"),
            "displayOnScreenFlag": obj.get("displayOnScreenFlag"),
            "entryTypeIdentifier": obj.get("entryTypeIdentifier"),
            "fieldTypeIdentifier": obj.get("fieldTypeIdentifier"),
            "helpText": obj.get("helpText"),
            "id": obj.get("id"),
            "listViewFlag": obj.get("listViewFlag"),
            "locationIds": obj.get("locationIds"),
            "numberDecimals": obj.get("numberDecimals"),
            "options": [UserDefinedFieldOption.from_dict(_item) for _item in obj.get("options")] if obj.get("options") is not None else None,
            "podId": obj.get("podId"),
            "readOnlyFlag": obj.get("readOnlyFlag"),
            "removeAllBusinessUnits": obj.get("removeAllBusinessUnits"),
            "removeAllLocations": obj.get("removeAllLocations"),
            "requiredFlag": obj.get("requiredFlag"),
            "screenId": obj.get("screenId"),
            "sequenceNumber": obj.get("sequenceNumber")
        })
        return _obj


