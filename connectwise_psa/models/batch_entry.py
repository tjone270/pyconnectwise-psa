# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.adjustment_detail_reference import AdjustmentDetailReference
from connectwise_psa.models.expense_detail_reference import ExpenseDetailReference
from connectwise_psa.models.invoice_reference import InvoiceReference
from connectwise_psa.models.purchase_order_line_item_reference import PurchaseOrderLineItemReference
from connectwise_psa.models.purchase_order_reference import PurchaseOrderReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BatchEntry(BaseModel):
    """
    BatchEntry
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    account_type: Optional[StrictStr] = Field(default=None, alias="accountType")
    adjustment_detail: Optional[AdjustmentDetailReference] = Field(default=None, alias="adjustmentDetail")
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    cost_of_goods_sold_account_number: Optional[StrictStr] = Field(default=None, alias="costOfGoodsSoldAccountNumber")
    credit: Optional[Union[StrictFloat, StrictInt]] = None
    debit: Optional[Union[StrictFloat, StrictInt]] = None
    expense: Optional[ExpenseDetailReference] = None
    id: Optional[StrictInt] = None
    invoice: Optional[InvoiceReference] = None
    item: Optional[StrictStr] = None
    line_item: Optional[PurchaseOrderLineItemReference] = Field(default=None, alias="lineItem")
    name: Optional[StrictStr] = None
    purchase_order: Optional[PurchaseOrderReference] = Field(default=None, alias="purchaseOrder")
    sales_code: Optional[StrictStr] = Field(default=None, alias="salesCode")
    transfer: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_info", "accountNumber", "accountType", "adjustmentDetail", "cost", "costOfGoodsSoldAccountNumber", "credit", "debit", "expense", "id", "invoice", "item", "lineItem", "name", "purchaseOrder", "salesCode", "transfer"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BatchEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adjustment_detail
        if self.adjustment_detail:
            _dict['adjustmentDetail'] = self.adjustment_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expense
        if self.expense:
            _dict['expense'] = self.expense.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of line_item
        if self.line_item:
            _dict['lineItem'] = self.line_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchase_order
        if self.purchase_order:
            _dict['purchaseOrder'] = self.purchase_order.to_dict()
        # set to None if credit (nullable) is None
        # and model_fields_set contains the field
        if self.credit is None and "credit" in self.model_fields_set:
            _dict['credit'] = None

        # set to None if debit (nullable) is None
        # and model_fields_set contains the field
        if self.debit is None and "debit" in self.model_fields_set:
            _dict['debit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BatchEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in BatchEntry) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "accountNumber": obj.get("accountNumber"),
            "accountType": obj.get("accountType"),
            "adjustmentDetail": AdjustmentDetailReference.from_dict(obj.get("adjustmentDetail")) if obj.get("adjustmentDetail") is not None else None,
            "cost": obj.get("cost"),
            "costOfGoodsSoldAccountNumber": obj.get("costOfGoodsSoldAccountNumber"),
            "credit": obj.get("credit"),
            "debit": obj.get("debit"),
            "expense": ExpenseDetailReference.from_dict(obj.get("expense")) if obj.get("expense") is not None else None,
            "id": obj.get("id"),
            "invoice": InvoiceReference.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "item": obj.get("item"),
            "lineItem": PurchaseOrderLineItemReference.from_dict(obj.get("lineItem")) if obj.get("lineItem") is not None else None,
            "name": obj.get("name"),
            "purchaseOrder": PurchaseOrderReference.from_dict(obj.get("purchaseOrder")) if obj.get("purchaseOrder") is not None else None,
            "salesCode": obj.get("salesCode"),
            "transfer": obj.get("transfer")
        })
        return _obj


