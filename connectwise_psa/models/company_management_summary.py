# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.agreement_reference import AgreementReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.management_solution_reference import ManagementSolutionReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompanyManagementSummary(BaseModel):
    """
    CompanyManagementSummary
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agreement: Optional[AgreementReference] = None
    alerts_generated: Optional[StrictStr] = Field(default=None, alias="alertsGenerated")
    company: Optional[CompanyReference] = None
    cpu_utilization: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUtilization")
    device_type: Optional[StrictStr] = Field(default=None, description="Gets or sets deviceType is required if the managementSolution is Legacy.", alias="deviceType")
    disk_cleanups: Optional[StrictInt] = Field(default=None, alias="diskCleanups")
    disk_defragmentations: Optional[StrictInt] = Field(default=None, alias="diskDefragmentations")
    disk_space_cleaned_mb: Optional[StrictInt] = Field(default=None, alias="diskSpaceCleanedMb")
    failed_backup_jobs: Optional[StrictInt] = Field(default=None, alias="failedBackupJobs")
    fully_patched_machines: Optional[StrictInt] = Field(default=None, alias="fullyPatchedMachines")
    group_identifier: StrictStr = Field(description=" Max length: 100;", alias="groupIdentifier")
    id: Optional[StrictInt] = None
    internet_connectivity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="internetConnectivity")
    management_solution: Optional[ManagementSolutionReference] = Field(default=None, alias="managementSolution")
    memory_utilization: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="memoryUtilization")
    missing_more_five_patches_machines: Optional[StrictInt] = Field(default=None, alias="missingMoreFivePatchesMachines")
    missing_one_two_patches_machines: Optional[StrictInt] = Field(default=None, alias="missingOneTwoPatchesMachines")
    missing_security_patches: Optional[StrictStr] = Field(default=None, alias="missingSecurityPatches")
    missing_three_five_patches_machines: Optional[StrictInt] = Field(default=None, alias="missingThreeFivePatchesMachines")
    missing_unscanned_patches_machines: Optional[StrictInt] = Field(default=None, alias="missingUnscannedPatchesMachines")
    server_availability: Optional[StrictInt] = Field(default=None, alias="serverAvailability")
    servers_disk_space_low: Optional[StrictInt] = Field(default=None, alias="serversDiskSpaceLow")
    servers_offline: Optional[StrictInt] = Field(default=None, alias="serversOffline")
    snmp_machines: Optional[StrictInt] = Field(default=None, alias="snmpMachines")
    spyware_items_removed: Optional[StrictInt] = Field(default=None, alias="spywareItemsRemoved")
    successful_backup_jobs: Optional[StrictInt] = Field(default=None, alias="successfulBackupJobs")
    total_managed_machines: Optional[StrictInt] = Field(default=None, alias="totalManagedMachines")
    total_notifications: Optional[StrictInt] = Field(default=None, alias="totalNotifications")
    total_servers: Optional[StrictInt] = Field(default=None, alias="totalServers")
    total_windows_servers: Optional[StrictInt] = Field(default=None, alias="totalWindowsServers")
    total_windows_workstations: Optional[StrictInt] = Field(default=None, alias="totalWindowsWorkstations")
    total_workstations: Optional[StrictInt] = Field(default=None, alias="totalWorkstations")
    viruses_removed: Optional[StrictInt] = Field(default=None, alias="virusesRemoved")
    windows_patches_installed: Optional[StrictInt] = Field(default=None, alias="windowsPatchesInstalled")
    __properties: ClassVar[List[str]] = ["_info", "agreement", "alertsGenerated", "company", "cpuUtilization", "deviceType", "diskCleanups", "diskDefragmentations", "diskSpaceCleanedMb", "failedBackupJobs", "fullyPatchedMachines", "groupIdentifier", "id", "internetConnectivity", "managementSolution", "memoryUtilization", "missingMoreFivePatchesMachines", "missingOneTwoPatchesMachines", "missingSecurityPatches", "missingThreeFivePatchesMachines", "missingUnscannedPatchesMachines", "serverAvailability", "serversDiskSpaceLow", "serversOffline", "snmpMachines", "spywareItemsRemoved", "successfulBackupJobs", "totalManagedMachines", "totalNotifications", "totalServers", "totalWindowsServers", "totalWindowsWorkstations", "totalWorkstations", "virusesRemoved", "windowsPatchesInstalled"]

    @field_validator('device_type')
    def device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('WorkstationsAndServers', 'BackupStats', 'Servers', 'Workstations'):
            raise ValueError("must be one of enum values ('WorkstationsAndServers', 'BackupStats', 'Servers', 'Workstations')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompanyManagementSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement
        if self.agreement:
            _dict['agreement'] = self.agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of management_solution
        if self.management_solution:
            _dict['managementSolution'] = self.management_solution.to_dict()
        # set to None if cpu_utilization (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_utilization is None and "cpu_utilization" in self.model_fields_set:
            _dict['cpuUtilization'] = None

        # set to None if device_type (nullable) is None
        # and model_fields_set contains the field
        if self.device_type is None and "device_type" in self.model_fields_set:
            _dict['deviceType'] = None

        # set to None if disk_cleanups (nullable) is None
        # and model_fields_set contains the field
        if self.disk_cleanups is None and "disk_cleanups" in self.model_fields_set:
            _dict['diskCleanups'] = None

        # set to None if disk_defragmentations (nullable) is None
        # and model_fields_set contains the field
        if self.disk_defragmentations is None and "disk_defragmentations" in self.model_fields_set:
            _dict['diskDefragmentations'] = None

        # set to None if disk_space_cleaned_mb (nullable) is None
        # and model_fields_set contains the field
        if self.disk_space_cleaned_mb is None and "disk_space_cleaned_mb" in self.model_fields_set:
            _dict['diskSpaceCleanedMb'] = None

        # set to None if failed_backup_jobs (nullable) is None
        # and model_fields_set contains the field
        if self.failed_backup_jobs is None and "failed_backup_jobs" in self.model_fields_set:
            _dict['failedBackupJobs'] = None

        # set to None if fully_patched_machines (nullable) is None
        # and model_fields_set contains the field
        if self.fully_patched_machines is None and "fully_patched_machines" in self.model_fields_set:
            _dict['fullyPatchedMachines'] = None

        # set to None if internet_connectivity (nullable) is None
        # and model_fields_set contains the field
        if self.internet_connectivity is None and "internet_connectivity" in self.model_fields_set:
            _dict['internetConnectivity'] = None

        # set to None if memory_utilization (nullable) is None
        # and model_fields_set contains the field
        if self.memory_utilization is None and "memory_utilization" in self.model_fields_set:
            _dict['memoryUtilization'] = None

        # set to None if missing_more_five_patches_machines (nullable) is None
        # and model_fields_set contains the field
        if self.missing_more_five_patches_machines is None and "missing_more_five_patches_machines" in self.model_fields_set:
            _dict['missingMoreFivePatchesMachines'] = None

        # set to None if missing_one_two_patches_machines (nullable) is None
        # and model_fields_set contains the field
        if self.missing_one_two_patches_machines is None and "missing_one_two_patches_machines" in self.model_fields_set:
            _dict['missingOneTwoPatchesMachines'] = None

        # set to None if missing_three_five_patches_machines (nullable) is None
        # and model_fields_set contains the field
        if self.missing_three_five_patches_machines is None and "missing_three_five_patches_machines" in self.model_fields_set:
            _dict['missingThreeFivePatchesMachines'] = None

        # set to None if missing_unscanned_patches_machines (nullable) is None
        # and model_fields_set contains the field
        if self.missing_unscanned_patches_machines is None and "missing_unscanned_patches_machines" in self.model_fields_set:
            _dict['missingUnscannedPatchesMachines'] = None

        # set to None if server_availability (nullable) is None
        # and model_fields_set contains the field
        if self.server_availability is None and "server_availability" in self.model_fields_set:
            _dict['serverAvailability'] = None

        # set to None if servers_disk_space_low (nullable) is None
        # and model_fields_set contains the field
        if self.servers_disk_space_low is None and "servers_disk_space_low" in self.model_fields_set:
            _dict['serversDiskSpaceLow'] = None

        # set to None if servers_offline (nullable) is None
        # and model_fields_set contains the field
        if self.servers_offline is None and "servers_offline" in self.model_fields_set:
            _dict['serversOffline'] = None

        # set to None if snmp_machines (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_machines is None and "snmp_machines" in self.model_fields_set:
            _dict['snmpMachines'] = None

        # set to None if spyware_items_removed (nullable) is None
        # and model_fields_set contains the field
        if self.spyware_items_removed is None and "spyware_items_removed" in self.model_fields_set:
            _dict['spywareItemsRemoved'] = None

        # set to None if successful_backup_jobs (nullable) is None
        # and model_fields_set contains the field
        if self.successful_backup_jobs is None and "successful_backup_jobs" in self.model_fields_set:
            _dict['successfulBackupJobs'] = None

        # set to None if total_managed_machines (nullable) is None
        # and model_fields_set contains the field
        if self.total_managed_machines is None and "total_managed_machines" in self.model_fields_set:
            _dict['totalManagedMachines'] = None

        # set to None if total_notifications (nullable) is None
        # and model_fields_set contains the field
        if self.total_notifications is None and "total_notifications" in self.model_fields_set:
            _dict['totalNotifications'] = None

        # set to None if total_servers (nullable) is None
        # and model_fields_set contains the field
        if self.total_servers is None and "total_servers" in self.model_fields_set:
            _dict['totalServers'] = None

        # set to None if total_windows_servers (nullable) is None
        # and model_fields_set contains the field
        if self.total_windows_servers is None and "total_windows_servers" in self.model_fields_set:
            _dict['totalWindowsServers'] = None

        # set to None if total_windows_workstations (nullable) is None
        # and model_fields_set contains the field
        if self.total_windows_workstations is None and "total_windows_workstations" in self.model_fields_set:
            _dict['totalWindowsWorkstations'] = None

        # set to None if total_workstations (nullable) is None
        # and model_fields_set contains the field
        if self.total_workstations is None and "total_workstations" in self.model_fields_set:
            _dict['totalWorkstations'] = None

        # set to None if viruses_removed (nullable) is None
        # and model_fields_set contains the field
        if self.viruses_removed is None and "viruses_removed" in self.model_fields_set:
            _dict['virusesRemoved'] = None

        # set to None if windows_patches_installed (nullable) is None
        # and model_fields_set contains the field
        if self.windows_patches_installed is None and "windows_patches_installed" in self.model_fields_set:
            _dict['windowsPatchesInstalled'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompanyManagementSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CompanyManagementSummary) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agreement": AgreementReference.from_dict(obj.get("agreement")) if obj.get("agreement") is not None else None,
            "alertsGenerated": obj.get("alertsGenerated"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "cpuUtilization": obj.get("cpuUtilization"),
            "deviceType": obj.get("deviceType"),
            "diskCleanups": obj.get("diskCleanups"),
            "diskDefragmentations": obj.get("diskDefragmentations"),
            "diskSpaceCleanedMb": obj.get("diskSpaceCleanedMb"),
            "failedBackupJobs": obj.get("failedBackupJobs"),
            "fullyPatchedMachines": obj.get("fullyPatchedMachines"),
            "groupIdentifier": obj.get("groupIdentifier"),
            "id": obj.get("id"),
            "internetConnectivity": obj.get("internetConnectivity"),
            "managementSolution": ManagementSolutionReference.from_dict(obj.get("managementSolution")) if obj.get("managementSolution") is not None else None,
            "memoryUtilization": obj.get("memoryUtilization"),
            "missingMoreFivePatchesMachines": obj.get("missingMoreFivePatchesMachines"),
            "missingOneTwoPatchesMachines": obj.get("missingOneTwoPatchesMachines"),
            "missingSecurityPatches": obj.get("missingSecurityPatches"),
            "missingThreeFivePatchesMachines": obj.get("missingThreeFivePatchesMachines"),
            "missingUnscannedPatchesMachines": obj.get("missingUnscannedPatchesMachines"),
            "serverAvailability": obj.get("serverAvailability"),
            "serversDiskSpaceLow": obj.get("serversDiskSpaceLow"),
            "serversOffline": obj.get("serversOffline"),
            "snmpMachines": obj.get("snmpMachines"),
            "spywareItemsRemoved": obj.get("spywareItemsRemoved"),
            "successfulBackupJobs": obj.get("successfulBackupJobs"),
            "totalManagedMachines": obj.get("totalManagedMachines"),
            "totalNotifications": obj.get("totalNotifications"),
            "totalServers": obj.get("totalServers"),
            "totalWindowsServers": obj.get("totalWindowsServers"),
            "totalWindowsWorkstations": obj.get("totalWindowsWorkstations"),
            "totalWorkstations": obj.get("totalWorkstations"),
            "virusesRemoved": obj.get("virusesRemoved"),
            "windowsPatchesInstalled": obj.get("windowsPatchesInstalled")
        })
        return _obj


