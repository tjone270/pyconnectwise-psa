# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TaxIntegration(BaseModel):
    """
    TaxIntegration
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    account_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="accountNumber")
    accounting_integration_flag: Optional[StrictBool] = Field(default=None, alias="accountingIntegrationFlag")
    commit_transactions_flag: Optional[StrictBool] = Field(default=None, alias="commitTransactionsFlag")
    company_code: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="companyCode")
    enabled_flag: Optional[StrictBool] = Field(default=None, alias="enabledFlag")
    expense_tax_code: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="expenseTaxCode")
    freight_tax_code: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="freightTaxCode")
    id: Optional[StrictInt] = None
    invoice_amount_tax_code: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="invoiceAmountTaxCode")
    license_key: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="licenseKey")
    product_tax_code: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="productTaxCode")
    sales_invoice_flag: Optional[StrictBool] = Field(default=None, alias="salesInvoiceFlag")
    service_url: Optional[StrictStr] = Field(default=None, description=" Max length: 250;", alias="serviceUrl")
    tax_integration_type: Optional[StrictStr] = Field(default=None, alias="taxIntegrationType")
    tax_line_flag: Optional[StrictBool] = Field(default=None, alias="taxLineFlag")
    time_tax_code: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="timeTaxCode")
    __properties: ClassVar[List[str]] = ["_info", "accountNumber", "accountingIntegrationFlag", "commitTransactionsFlag", "companyCode", "enabledFlag", "expenseTaxCode", "freightTaxCode", "id", "invoiceAmountTaxCode", "licenseKey", "productTaxCode", "salesInvoiceFlag", "serviceUrl", "taxIntegrationType", "taxLineFlag", "timeTaxCode"]

    @field_validator('tax_integration_type')
    def tax_integration_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Avalara'):
            raise ValueError("must be one of enum values ('Avalara')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaxIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if accounting_integration_flag (nullable) is None
        # and model_fields_set contains the field
        if self.accounting_integration_flag is None and "accounting_integration_flag" in self.model_fields_set:
            _dict['accountingIntegrationFlag'] = None

        # set to None if commit_transactions_flag (nullable) is None
        # and model_fields_set contains the field
        if self.commit_transactions_flag is None and "commit_transactions_flag" in self.model_fields_set:
            _dict['commitTransactionsFlag'] = None

        # set to None if enabled_flag (nullable) is None
        # and model_fields_set contains the field
        if self.enabled_flag is None and "enabled_flag" in self.model_fields_set:
            _dict['enabledFlag'] = None

        # set to None if sales_invoice_flag (nullable) is None
        # and model_fields_set contains the field
        if self.sales_invoice_flag is None and "sales_invoice_flag" in self.model_fields_set:
            _dict['salesInvoiceFlag'] = None

        # set to None if tax_line_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_line_flag is None and "tax_line_flag" in self.model_fields_set:
            _dict['taxLineFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TaxIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TaxIntegration) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "accountNumber": obj.get("accountNumber"),
            "accountingIntegrationFlag": obj.get("accountingIntegrationFlag"),
            "commitTransactionsFlag": obj.get("commitTransactionsFlag"),
            "companyCode": obj.get("companyCode"),
            "enabledFlag": obj.get("enabledFlag"),
            "expenseTaxCode": obj.get("expenseTaxCode"),
            "freightTaxCode": obj.get("freightTaxCode"),
            "id": obj.get("id"),
            "invoiceAmountTaxCode": obj.get("invoiceAmountTaxCode"),
            "licenseKey": obj.get("licenseKey"),
            "productTaxCode": obj.get("productTaxCode"),
            "salesInvoiceFlag": obj.get("salesInvoiceFlag"),
            "serviceUrl": obj.get("serviceUrl"),
            "taxIntegrationType": obj.get("taxIntegrationType"),
            "taxLineFlag": obj.get("taxLineFlag"),
            "timeTaxCode": obj.get("timeTaxCode")
        })
        return _obj


