# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from connectwise_psa.models.gl_export_adjustment_transaction_detail import GLExportAdjustmentTransactionDetail
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GLExportAdjustmentTransaction(BaseModel):
    """
    GLExportAdjustmentTransaction
    """ # noqa: E501
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    adjustment_description: Optional[StrictStr] = Field(default=None, alias="adjustmentDescription")
    adjustment_detail: Optional[List[GLExportAdjustmentTransactionDetail]] = Field(default=None, alias="adjustmentDetail")
    document_date: Optional[StrictStr] = Field(default=None, alias="documentDate")
    document_type: Optional[StrictStr] = Field(default=None, alias="documentType")
    gl_class: Optional[StrictStr] = Field(default=None, alias="glClass")
    gl_type_id: Optional[StrictStr] = Field(default=None, alias="glTypeID")
    id: Optional[StrictStr] = None
    memo: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["accountNumber", "adjustmentDescription", "adjustmentDetail", "documentDate", "documentType", "glClass", "glTypeID", "id", "memo"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GLExportAdjustmentTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in adjustment_detail (list)
        _items = []
        if self.adjustment_detail:
            for _item in self.adjustment_detail:
                if _item:
                    _items.append(_item.to_dict())
            _dict['adjustmentDetail'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GLExportAdjustmentTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in GLExportAdjustmentTransaction) in the input: " + _key)

        _obj = cls.model_validate({
            "accountNumber": obj.get("accountNumber"),
            "adjustmentDescription": obj.get("adjustmentDescription"),
            "adjustmentDetail": [GLExportAdjustmentTransactionDetail.from_dict(_item) for _item in obj.get("adjustmentDetail")] if obj.get("adjustmentDetail") is not None else None,
            "documentDate": obj.get("documentDate"),
            "documentType": obj.get("documentType"),
            "glClass": obj.get("glClass"),
            "glTypeID": obj.get("glTypeID"),
            "id": obj.get("id"),
            "memo": obj.get("memo")
        })
        return _obj


