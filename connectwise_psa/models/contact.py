# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_communication_item import ContactCommunicationItem
from connectwise_psa.models.contact_department_reference import ContactDepartmentReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.contact_type_reference import ContactTypeReference
from connectwise_psa.models.country_reference import CountryReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.document_reference import DocumentReference
from connectwise_psa.models.relationship_reference import RelationshipReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Contact(BaseModel):
    """
    Contact
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    address_line1: Optional[StrictStr] = Field(default=None, alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, alias="addressLine2")
    anniversary: Optional[StrictStr] = None
    assistant_contact: Optional[ContactReference] = Field(default=None, alias="assistantContact")
    birth_day: Optional[StrictStr] = Field(default=None, alias="birthDay")
    children: Optional[StrictStr] = None
    children_flag: Optional[StrictBool] = Field(default=None, alias="childrenFlag")
    city: Optional[StrictStr] = None
    communication_items: Optional[List[ContactCommunicationItem]] = Field(default=None, alias="communicationItems")
    company: Optional[CompanyReference] = None
    company_location: Optional[SystemLocationReference] = Field(default=None, alias="companyLocation")
    country: Optional[CountryReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    default_billing_flag: Optional[StrictBool] = Field(default=None, alias="defaultBillingFlag")
    default_flag: Optional[StrictBool] = Field(default=None, alias="defaultFlag")
    default_merge_contact_id: Optional[StrictInt] = Field(default=None, alias="defaultMergeContactId")
    default_phone_extension: Optional[StrictStr] = Field(default=None, alias="defaultPhoneExtension")
    default_phone_nbr: Optional[StrictStr] = Field(default=None, alias="defaultPhoneNbr")
    default_phone_type: Optional[StrictStr] = Field(default=None, alias="defaultPhoneType")
    department: Optional[ContactDepartmentReference] = None
    disable_portal_login_flag: Optional[StrictBool] = Field(default=None, alias="disablePortalLoginFlag")
    facebook_url: Optional[StrictStr] = Field(default=None, alias="facebookUrl")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    gender: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    ignore_duplicates: Optional[StrictBool] = Field(default=None, alias="ignoreDuplicates")
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    integrator_tags: Optional[List[StrictStr]] = Field(default=None, alias="integratorTags")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    linked_in_url: Optional[StrictStr] = Field(default=None, alias="linkedInUrl")
    manager_contact: Optional[ContactReference] = Field(default=None, alias="managerContact")
    married_flag: Optional[StrictBool] = Field(default=None, alias="marriedFlag")
    mobile_guid: Optional[StrictStr] = Field(default=None, alias="mobileGuid")
    nick_name: Optional[StrictStr] = Field(default=None, alias="nickName")
    photo: Optional[DocumentReference] = None
    portal_password: Optional[StrictStr] = Field(default=None, alias="portalPassword")
    portal_security_level: Optional[StrictInt] = Field(default=None, alias="portalSecurityLevel")
    presence: Optional[StrictStr] = None
    relationship: Optional[RelationshipReference] = None
    relationship_override: Optional[StrictStr] = Field(default=None, alias="relationshipOverride")
    school: Optional[StrictStr] = None
    security_identifier: Optional[StrictStr] = Field(default=None, alias="securityIdentifier")
    significant_other: Optional[StrictStr] = Field(default=None, alias="significantOther")
    site: Optional[SiteReference] = None
    state: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    twitter_url: Optional[StrictStr] = Field(default=None, alias="twitterUrl")
    type_ids: Optional[List[StrictInt]] = Field(default=None, description="Gets or sets integrer array of Contact_Type_Recids to be assigned to contact that can be passed in only during new contact creation (post)             To update existing contacts type, use the /company/contactTypeAssociations or /company/contacts/{ID}/typeAssociations endpoints.", alias="typeIds")
    types: Optional[List[ContactTypeReference]] = None
    unsubscribe_flag: Optional[StrictBool] = Field(default=None, alias="unsubscribeFlag")
    user_defined_field1: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField1")
    user_defined_field10: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField10")
    user_defined_field2: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField2")
    user_defined_field3: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField3")
    user_defined_field4: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField4")
    user_defined_field5: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField5")
    user_defined_field6: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField6")
    user_defined_field7: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField7")
    user_defined_field8: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField8")
    user_defined_field9: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField9")
    zip: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_info", "addressLine1", "addressLine2", "anniversary", "assistantContact", "birthDay", "children", "childrenFlag", "city", "communicationItems", "company", "companyLocation", "country", "customFields", "defaultBillingFlag", "defaultFlag", "defaultMergeContactId", "defaultPhoneExtension", "defaultPhoneNbr", "defaultPhoneType", "department", "disablePortalLoginFlag", "facebookUrl", "firstName", "gender", "id", "ignoreDuplicates", "inactiveFlag", "integratorTags", "lastName", "linkedInUrl", "managerContact", "marriedFlag", "mobileGuid", "nickName", "photo", "portalPassword", "portalSecurityLevel", "presence", "relationship", "relationshipOverride", "school", "securityIdentifier", "significantOther", "site", "state", "title", "twitterUrl", "typeIds", "types", "unsubscribeFlag", "userDefinedField1", "userDefinedField10", "userDefinedField2", "userDefinedField3", "userDefinedField4", "userDefinedField5", "userDefinedField6", "userDefinedField7", "userDefinedField8", "userDefinedField9", "zip"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Female', 'Male'):
            raise ValueError("must be one of enum values ('Female', 'Male')")
        return value

    @field_validator('presence')
    def presence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NoAgent', 'Online', 'DoNotDisturb', 'Away', 'Offline'):
            raise ValueError("must be one of enum values ('NoAgent', 'Online', 'DoNotDisturb', 'Away', 'Offline')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Contact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assistant_contact
        if self.assistant_contact:
            _dict['assistantContact'] = self.assistant_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in communication_items (list)
        _items = []
        if self.communication_items:
            for _item in self.communication_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['communicationItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_location
        if self.company_location:
            _dict['companyLocation'] = self.company_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manager_contact
        if self.manager_contact:
            _dict['managerContact'] = self.manager_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of photo
        if self.photo:
            _dict['photo'] = self.photo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relationship
        if self.relationship:
            _dict['relationship'] = self.relationship.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in types (list)
        _items = []
        if self.types:
            for _item in self.types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['types'] = _items
        # set to None if children_flag (nullable) is None
        # and model_fields_set contains the field
        if self.children_flag is None and "children_flag" in self.model_fields_set:
            _dict['childrenFlag'] = None

        # set to None if default_billing_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_billing_flag is None and "default_billing_flag" in self.model_fields_set:
            _dict['defaultBillingFlag'] = None

        # set to None if default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_flag is None and "default_flag" in self.model_fields_set:
            _dict['defaultFlag'] = None

        # set to None if default_merge_contact_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_merge_contact_id is None and "default_merge_contact_id" in self.model_fields_set:
            _dict['defaultMergeContactId'] = None

        # set to None if disable_portal_login_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disable_portal_login_flag is None and "disable_portal_login_flag" in self.model_fields_set:
            _dict['disablePortalLoginFlag'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if married_flag (nullable) is None
        # and model_fields_set contains the field
        if self.married_flag is None and "married_flag" in self.model_fields_set:
            _dict['marriedFlag'] = None

        # set to None if mobile_guid (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_guid is None and "mobile_guid" in self.model_fields_set:
            _dict['mobileGuid'] = None

        # set to None if portal_security_level (nullable) is None
        # and model_fields_set contains the field
        if self.portal_security_level is None and "portal_security_level" in self.model_fields_set:
            _dict['portalSecurityLevel'] = None

        # set to None if presence (nullable) is None
        # and model_fields_set contains the field
        if self.presence is None and "presence" in self.model_fields_set:
            _dict['presence'] = None

        # set to None if unsubscribe_flag (nullable) is None
        # and model_fields_set contains the field
        if self.unsubscribe_flag is None and "unsubscribe_flag" in self.model_fields_set:
            _dict['unsubscribeFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Contact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Contact) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "anniversary": obj.get("anniversary"),
            "assistantContact": ContactReference.from_dict(obj.get("assistantContact")) if obj.get("assistantContact") is not None else None,
            "birthDay": obj.get("birthDay"),
            "children": obj.get("children"),
            "childrenFlag": obj.get("childrenFlag"),
            "city": obj.get("city"),
            "communicationItems": [ContactCommunicationItem.from_dict(_item) for _item in obj.get("communicationItems")] if obj.get("communicationItems") is not None else None,
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "companyLocation": SystemLocationReference.from_dict(obj.get("companyLocation")) if obj.get("companyLocation") is not None else None,
            "country": CountryReference.from_dict(obj.get("country")) if obj.get("country") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "defaultBillingFlag": obj.get("defaultBillingFlag"),
            "defaultFlag": obj.get("defaultFlag"),
            "defaultMergeContactId": obj.get("defaultMergeContactId"),
            "defaultPhoneExtension": obj.get("defaultPhoneExtension"),
            "defaultPhoneNbr": obj.get("defaultPhoneNbr"),
            "defaultPhoneType": obj.get("defaultPhoneType"),
            "department": ContactDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "disablePortalLoginFlag": obj.get("disablePortalLoginFlag"),
            "facebookUrl": obj.get("facebookUrl"),
            "firstName": obj.get("firstName"),
            "gender": obj.get("gender"),
            "id": obj.get("id"),
            "ignoreDuplicates": obj.get("ignoreDuplicates"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "integratorTags": obj.get("integratorTags"),
            "lastName": obj.get("lastName"),
            "linkedInUrl": obj.get("linkedInUrl"),
            "managerContact": ContactReference.from_dict(obj.get("managerContact")) if obj.get("managerContact") is not None else None,
            "marriedFlag": obj.get("marriedFlag"),
            "mobileGuid": obj.get("mobileGuid"),
            "nickName": obj.get("nickName"),
            "photo": DocumentReference.from_dict(obj.get("photo")) if obj.get("photo") is not None else None,
            "portalPassword": obj.get("portalPassword"),
            "portalSecurityLevel": obj.get("portalSecurityLevel"),
            "presence": obj.get("presence"),
            "relationship": RelationshipReference.from_dict(obj.get("relationship")) if obj.get("relationship") is not None else None,
            "relationshipOverride": obj.get("relationshipOverride"),
            "school": obj.get("school"),
            "securityIdentifier": obj.get("securityIdentifier"),
            "significantOther": obj.get("significantOther"),
            "site": SiteReference.from_dict(obj.get("site")) if obj.get("site") is not None else None,
            "state": obj.get("state"),
            "title": obj.get("title"),
            "twitterUrl": obj.get("twitterUrl"),
            "typeIds": obj.get("typeIds"),
            "types": [ContactTypeReference.from_dict(_item) for _item in obj.get("types")] if obj.get("types") is not None else None,
            "unsubscribeFlag": obj.get("unsubscribeFlag"),
            "userDefinedField1": obj.get("userDefinedField1"),
            "userDefinedField10": obj.get("userDefinedField10"),
            "userDefinedField2": obj.get("userDefinedField2"),
            "userDefinedField3": obj.get("userDefinedField3"),
            "userDefinedField4": obj.get("userDefinedField4"),
            "userDefinedField5": obj.get("userDefinedField5"),
            "userDefinedField6": obj.get("userDefinedField6"),
            "userDefinedField7": obj.get("userDefinedField7"),
            "userDefinedField8": obj.get("userDefinedField8"),
            "userDefinedField9": obj.get("userDefinedField9"),
            "zip": obj.get("zip")
        })
        return _obj


