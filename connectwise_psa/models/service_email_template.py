# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.board_reference import BoardReference
from connectwise_psa.models.service_status_reference import ServiceStatusReference
from connectwise_psa.models.service_survey_reference import ServiceSurveyReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ServiceEmailTemplate(BaseModel):
    """
    ServiceEmailTemplate
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    body: Optional[StrictStr] = None
    copy_sender_flag: Optional[StrictBool] = Field(default=None, alias="copySenderFlag")
    email_address: Optional[StrictStr] = Field(default=None, description="From fields (first name, last name, email address) are required if useSenderFlag is false. Max length: 100;", alias="emailAddress")
    external_contact_notifications: Optional[StrictBool] = Field(default=None, alias="externalContactNotifications")
    first_name: Optional[StrictStr] = Field(default=None, description="From fields (first name, last name, email address) are required if useSenderFlag is false. Max length: 100;", alias="firstName")
    id: Optional[StrictInt] = None
    internal_contact_notifications: Optional[StrictBool] = Field(default=None, alias="internalContactNotifications")
    last_name: Optional[StrictStr] = Field(default=None, description="From fields (first name, last name, email address) are required if useSenderFlag is false. Max length: 100;", alias="lastName")
    resource_records_flag: Optional[StrictBool] = Field(default=None, alias="resourceRecordsFlag")
    service_board: Optional[BoardReference] = Field(default=None, alias="serviceBoard")
    service_status: Optional[ServiceStatusReference] = Field(default=None, alias="serviceStatus")
    service_survey: Optional[ServiceSurveyReference] = Field(default=None, alias="serviceSurvey")
    subject: Optional[StrictStr] = Field(default=None, description=" Max length: 200;")
    tasks_flag: Optional[StrictBool] = Field(default=None, alias="tasksFlag")
    type: Optional[StrictStr]
    use_sender_flag: Optional[StrictBool] = Field(default=None, alias="useSenderFlag")
    __properties: ClassVar[List[str]] = ["_info", "body", "copySenderFlag", "emailAddress", "externalContactNotifications", "firstName", "id", "internalContactNotifications", "lastName", "resourceRecordsFlag", "serviceBoard", "serviceStatus", "serviceSurvey", "subject", "tasksFlag", "type", "useSenderFlag"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Any', 'Closed', 'Invoice', 'New', 'SalesOrder', 'PurchaseOrder', 'RMA', 'Specific'):
            raise ValueError("must be one of enum values ('Any', 'Closed', 'Invoice', 'New', 'SalesOrder', 'PurchaseOrder', 'RMA', 'Specific')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ServiceEmailTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service_board
        if self.service_board:
            _dict['serviceBoard'] = self.service_board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_status
        if self.service_status:
            _dict['serviceStatus'] = self.service_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_survey
        if self.service_survey:
            _dict['serviceSurvey'] = self.service_survey.to_dict()
        # set to None if copy_sender_flag (nullable) is None
        # and model_fields_set contains the field
        if self.copy_sender_flag is None and "copy_sender_flag" in self.model_fields_set:
            _dict['copySenderFlag'] = None

        # set to None if external_contact_notifications (nullable) is None
        # and model_fields_set contains the field
        if self.external_contact_notifications is None and "external_contact_notifications" in self.model_fields_set:
            _dict['externalContactNotifications'] = None

        # set to None if internal_contact_notifications (nullable) is None
        # and model_fields_set contains the field
        if self.internal_contact_notifications is None and "internal_contact_notifications" in self.model_fields_set:
            _dict['internalContactNotifications'] = None

        # set to None if resource_records_flag (nullable) is None
        # and model_fields_set contains the field
        if self.resource_records_flag is None and "resource_records_flag" in self.model_fields_set:
            _dict['resourceRecordsFlag'] = None

        # set to None if tasks_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tasks_flag is None and "tasks_flag" in self.model_fields_set:
            _dict['tasksFlag'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if use_sender_flag (nullable) is None
        # and model_fields_set contains the field
        if self.use_sender_flag is None and "use_sender_flag" in self.model_fields_set:
            _dict['useSenderFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ServiceEmailTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ServiceEmailTemplate) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "body": obj.get("body"),
            "copySenderFlag": obj.get("copySenderFlag"),
            "emailAddress": obj.get("emailAddress"),
            "externalContactNotifications": obj.get("externalContactNotifications"),
            "firstName": obj.get("firstName"),
            "id": obj.get("id"),
            "internalContactNotifications": obj.get("internalContactNotifications"),
            "lastName": obj.get("lastName"),
            "resourceRecordsFlag": obj.get("resourceRecordsFlag"),
            "serviceBoard": BoardReference.from_dict(obj.get("serviceBoard")) if obj.get("serviceBoard") is not None else None,
            "serviceStatus": ServiceStatusReference.from_dict(obj.get("serviceStatus")) if obj.get("serviceStatus") is not None else None,
            "serviceSurvey": ServiceSurveyReference.from_dict(obj.get("serviceSurvey")) if obj.get("serviceSurvey") is not None else None,
            "subject": obj.get("subject"),
            "tasksFlag": obj.get("tasksFlag"),
            "type": obj.get("type"),
            "useSenderFlag": obj.get("useSenderFlag")
        })
        return _obj


