# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.billing_cycle_reference import BillingCycleReference
from connectwise_psa.models.iv_item_reference import IvItemReference
from connectwise_psa.models.opportunity_reference import OpportunityReference
from connectwise_psa.models.opportunity_status_reference import OpportunityStatusReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ForecastItem(BaseModel):
    """
    ForecastItem
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    bill_cycle: Optional[BillingCycleReference] = Field(default=None, alias="billCycle")
    catalog_item: Optional[IvItemReference] = Field(default=None, alias="catalogItem")
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    cycle_basis: Optional[StrictStr] = Field(default=None, alias="cycleBasis")
    cycles: Optional[StrictInt] = None
    forecast_description: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="forecastDescription")
    forecast_type: Optional[StrictStr] = Field(alias="forecastType")
    id: Optional[StrictInt] = None
    include_flag: Optional[StrictBool] = Field(default=None, alias="includeFlag")
    link_flag: Optional[StrictBool] = Field(default=None, alias="linkFlag")
    margin: Optional[Union[StrictFloat, StrictInt]] = None
    opportunity: Optional[OpportunityReference] = None
    percentage: Optional[StrictInt] = None
    product_class: Optional[StrictStr] = Field(default=None, alias="productClass")
    product_description: Optional[StrictStr] = Field(default=None, alias="productDescription")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    quote_werks_doc_name: Optional[StrictStr] = Field(default=None, description=" Max length: 255;", alias="quoteWerksDocName")
    quote_werks_doc_no: Optional[StrictStr] = Field(default=None, description=" Max length: 20;", alias="quoteWerksDocNo")
    quote_werks_quantity: Optional[StrictInt] = Field(default=None, alias="quoteWerksQuantity")
    recurring_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="recurringCost")
    recurring_date_end: Optional[datetime] = Field(default=None, alias="recurringDateEnd")
    recurring_date_start: Optional[datetime] = Field(default=None, alias="recurringDateStart")
    recurring_flag: Optional[StrictBool] = Field(default=None, alias="recurringFlag")
    recurring_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="recurringRevenue")
    revenue: Optional[Union[StrictFloat, StrictInt]] = None
    sequence_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sequenceNumber")
    status: Optional[OpportunityStatusReference] = None
    sub_number: Optional[StrictInt] = Field(default=None, alias="subNumber")
    taxable_flag: Optional[StrictBool] = Field(default=None, alias="taxableFlag")
    __properties: ClassVar[List[str]] = ["_info", "billCycle", "catalogItem", "cost", "cycleBasis", "cycles", "forecastDescription", "forecastType", "id", "includeFlag", "linkFlag", "margin", "opportunity", "percentage", "productClass", "productDescription", "quantity", "quoteWerksDocName", "quoteWerksDocNo", "quoteWerksQuantity", "recurringCost", "recurringDateEnd", "recurringDateStart", "recurringFlag", "recurringRevenue", "revenue", "sequenceNumber", "status", "subNumber", "taxableFlag"]

    @field_validator('forecast_type')
    def forecast_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Other1', 'Other2', 'Agreement', 'Product', 'Service'):
            raise ValueError("must be one of enum values ('Other1', 'Other2', 'Agreement', 'Product', 'Service')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ForecastItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bill_cycle
        if self.bill_cycle:
            _dict['billCycle'] = self.bill_cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of catalog_item
        if self.catalog_item:
            _dict['catalogItem'] = self.catalog_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opportunity
        if self.opportunity:
            _dict['opportunity'] = self.opportunity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if forecast_type (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_type is None and "forecast_type" in self.model_fields_set:
            _dict['forecastType'] = None

        # set to None if recurring_cost (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_cost is None and "recurring_cost" in self.model_fields_set:
            _dict['recurringCost'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ForecastItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ForecastItem) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "billCycle": BillingCycleReference.from_dict(obj.get("billCycle")) if obj.get("billCycle") is not None else None,
            "catalogItem": IvItemReference.from_dict(obj.get("catalogItem")) if obj.get("catalogItem") is not None else None,
            "cost": obj.get("cost"),
            "cycleBasis": obj.get("cycleBasis"),
            "cycles": obj.get("cycles"),
            "forecastDescription": obj.get("forecastDescription"),
            "forecastType": obj.get("forecastType"),
            "id": obj.get("id"),
            "includeFlag": obj.get("includeFlag"),
            "linkFlag": obj.get("linkFlag"),
            "margin": obj.get("margin"),
            "opportunity": OpportunityReference.from_dict(obj.get("opportunity")) if obj.get("opportunity") is not None else None,
            "percentage": obj.get("percentage"),
            "productClass": obj.get("productClass"),
            "productDescription": obj.get("productDescription"),
            "quantity": obj.get("quantity"),
            "quoteWerksDocName": obj.get("quoteWerksDocName"),
            "quoteWerksDocNo": obj.get("quoteWerksDocNo"),
            "quoteWerksQuantity": obj.get("quoteWerksQuantity"),
            "recurringCost": obj.get("recurringCost"),
            "recurringDateEnd": obj.get("recurringDateEnd"),
            "recurringDateStart": obj.get("recurringDateStart"),
            "recurringFlag": obj.get("recurringFlag"),
            "recurringRevenue": obj.get("recurringRevenue"),
            "revenue": obj.get("revenue"),
            "sequenceNumber": obj.get("sequenceNumber"),
            "status": OpportunityStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "subNumber": obj.get("subNumber"),
            "taxableFlag": obj.get("taxableFlag")
        })
        return _obj


