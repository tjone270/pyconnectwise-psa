# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TimeExpense(BaseModel):
    """
    TimeExpense
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    default_special_invoice_type: Optional[StrictStr] = Field(default=None, alias="defaultSpecialInvoiceType")
    disable_time_entry_flag: Optional[StrictBool] = Field(default=None, alias="disableTimeEntryFlag")
    id: Optional[StrictInt] = None
    internal_company: Optional[CompanyReference] = Field(default=None, alias="internalCompany")
    invoice_start: Optional[StrictInt] = Field(default=None, alias="invoiceStart")
    require_expense_note_flag: Optional[StrictBool] = Field(default=None, alias="requireExpenseNoteFlag")
    require_time_note_flag: Optional[StrictBool] = Field(default=None, alias="requireTimeNoteFlag")
    rounding_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="roundingFactor")
    tier1_approval_flag: Optional[StrictBool] = Field(default=None, alias="tier1ApprovalFlag")
    tier2_approval_flag: Optional[StrictBool] = Field(default=None, alias="tier2ApprovalFlag")
    __properties: ClassVar[List[str]] = ["_info", "defaultSpecialInvoiceType", "disableTimeEntryFlag", "id", "internalCompany", "invoiceStart", "requireExpenseNoteFlag", "requireTimeNoteFlag", "roundingFactor", "tier1ApprovalFlag", "tier2ApprovalFlag"]

    @field_validator('default_special_invoice_type')
    def default_special_invoice_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Agreement', 'CreditMemo', 'DownPayment', 'Miscellaneous', 'Progress', 'Standard'):
            raise ValueError("must be one of enum values ('Agreement', 'CreditMemo', 'DownPayment', 'Miscellaneous', 'Progress', 'Standard')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimeExpense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of internal_company
        if self.internal_company:
            _dict['internalCompany'] = self.internal_company.to_dict()
        # set to None if default_special_invoice_type (nullable) is None
        # and model_fields_set contains the field
        if self.default_special_invoice_type is None and "default_special_invoice_type" in self.model_fields_set:
            _dict['defaultSpecialInvoiceType'] = None

        # set to None if disable_time_entry_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disable_time_entry_flag is None and "disable_time_entry_flag" in self.model_fields_set:
            _dict['disableTimeEntryFlag'] = None

        # set to None if invoice_start (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_start is None and "invoice_start" in self.model_fields_set:
            _dict['invoiceStart'] = None

        # set to None if require_expense_note_flag (nullable) is None
        # and model_fields_set contains the field
        if self.require_expense_note_flag is None and "require_expense_note_flag" in self.model_fields_set:
            _dict['requireExpenseNoteFlag'] = None

        # set to None if require_time_note_flag (nullable) is None
        # and model_fields_set contains the field
        if self.require_time_note_flag is None and "require_time_note_flag" in self.model_fields_set:
            _dict['requireTimeNoteFlag'] = None

        # set to None if rounding_factor (nullable) is None
        # and model_fields_set contains the field
        if self.rounding_factor is None and "rounding_factor" in self.model_fields_set:
            _dict['roundingFactor'] = None

        # set to None if tier1_approval_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tier1_approval_flag is None and "tier1_approval_flag" in self.model_fields_set:
            _dict['tier1ApprovalFlag'] = None

        # set to None if tier2_approval_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tier2_approval_flag is None and "tier2_approval_flag" in self.model_fields_set:
            _dict['tier2ApprovalFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TimeExpense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TimeExpense) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "defaultSpecialInvoiceType": obj.get("defaultSpecialInvoiceType"),
            "disableTimeEntryFlag": obj.get("disableTimeEntryFlag"),
            "id": obj.get("id"),
            "internalCompany": CompanyReference.from_dict(obj.get("internalCompany")) if obj.get("internalCompany") is not None else None,
            "invoiceStart": obj.get("invoiceStart"),
            "requireExpenseNoteFlag": obj.get("requireExpenseNoteFlag"),
            "requireTimeNoteFlag": obj.get("requireTimeNoteFlag"),
            "roundingFactor": obj.get("roundingFactor"),
            "tier1ApprovalFlag": obj.get("tier1ApprovalFlag"),
            "tier2ApprovalFlag": obj.get("tier2ApprovalFlag")
        })
        return _obj


