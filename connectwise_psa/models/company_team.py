# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.team_role_reference import TeamRoleReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompanyTeam(BaseModel):
    """
    CompanyTeam
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    account_manager_flag: Optional[StrictBool] = Field(default=None, alias="accountManagerFlag")
    company: Optional[CompanyReference] = None
    contact: Optional[ContactReference] = None
    department: Optional[SystemDepartmentReference] = None
    id: Optional[StrictInt] = None
    location: Optional[SystemLocationReference] = None
    member: Optional[MemberReference] = None
    sales_flag: Optional[StrictBool] = Field(default=None, alias="salesFlag")
    team_role: Optional[TeamRoleReference] = Field(default=None, alias="teamRole")
    tech_flag: Optional[StrictBool] = Field(default=None, alias="techFlag")
    __properties: ClassVar[List[str]] = ["_info", "accountManagerFlag", "company", "contact", "department", "id", "location", "member", "salesFlag", "teamRole", "techFlag"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompanyTeam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_role
        if self.team_role:
            _dict['teamRole'] = self.team_role.to_dict()
        # set to None if account_manager_flag (nullable) is None
        # and model_fields_set contains the field
        if self.account_manager_flag is None and "account_manager_flag" in self.model_fields_set:
            _dict['accountManagerFlag'] = None

        # set to None if sales_flag (nullable) is None
        # and model_fields_set contains the field
        if self.sales_flag is None and "sales_flag" in self.model_fields_set:
            _dict['salesFlag'] = None

        # set to None if tech_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tech_flag is None and "tech_flag" in self.model_fields_set:
            _dict['techFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompanyTeam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CompanyTeam) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "accountManagerFlag": obj.get("accountManagerFlag"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "contact": ContactReference.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "id": obj.get("id"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "member": MemberReference.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "salesFlag": obj.get("salesFlag"),
            "teamRole": TeamRoleReference.from_dict(obj.get("teamRole")) if obj.get("teamRole") is not None else None,
            "techFlag": obj.get("techFlag")
        })
        return _obj


