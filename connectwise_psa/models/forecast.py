# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.agreement_revenue_reference import AgreementRevenueReference
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.expense_revenue_reference import ExpenseRevenueReference
from connectwise_psa.models.forecast_item import ForecastItem
from connectwise_psa.models.forecast_revenue_reference import ForecastRevenueReference
from connectwise_psa.models.inclusive_revenue_reference import InclusiveRevenueReference
from connectwise_psa.models.lost_revenue_reference import LostRevenueReference
from connectwise_psa.models.open_revenue_reference import OpenRevenueReference
from connectwise_psa.models.other1_revenue_reference import Other1RevenueReference
from connectwise_psa.models.other2_revenue_reference import Other2RevenueReference
from connectwise_psa.models.product_revenue_reference import ProductRevenueReference
from connectwise_psa.models.service_revenue_reference import ServiceRevenueReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
from connectwise_psa.models.time_revenue_reference import TimeRevenueReference
from connectwise_psa.models.won_revenue_reference import WonRevenueReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Forecast(BaseModel):
    """
    Forecast
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agreement_revenue: Optional[AgreementRevenueReference] = Field(default=None, alias="agreementRevenue")
    billing_terms: Optional[BillingTermsReference] = Field(default=None, alias="billingTerms")
    currency: Optional[CurrencyReference] = None
    expected_probability: Optional[StrictInt] = Field(default=None, alias="expectedProbability")
    expense_revenue: Optional[ExpenseRevenueReference] = Field(default=None, alias="expenseRevenue")
    forecast_items: Optional[List[ForecastItem]] = Field(default=None, alias="forecastItems")
    forecast_revenue_totals: Optional[ForecastRevenueReference] = Field(default=None, alias="forecastRevenueTotals")
    forecast_total_with_taxes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="forecastTotalWithTaxes")
    id: Optional[StrictInt] = None
    inclusive_revenue_totals: Optional[InclusiveRevenueReference] = Field(default=None, alias="inclusiveRevenueTotals")
    lost_revenue: Optional[LostRevenueReference] = Field(default=None, alias="lostRevenue")
    open_revenue: Optional[OpenRevenueReference] = Field(default=None, alias="openRevenue")
    other_revenue1: Optional[Other1RevenueReference] = Field(default=None, alias="otherRevenue1")
    other_revenue2: Optional[Other2RevenueReference] = Field(default=None, alias="otherRevenue2")
    product_revenue: Optional[ProductRevenueReference] = Field(default=None, alias="productRevenue")
    recurring_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="recurringTotal")
    sales_tax_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="salesTaxRevenue")
    service_revenue: Optional[ServiceRevenueReference] = Field(default=None, alias="serviceRevenue")
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    time_revenue: Optional[TimeRevenueReference] = Field(default=None, alias="timeRevenue")
    won_revenue: Optional[WonRevenueReference] = Field(default=None, alias="wonRevenue")
    __properties: ClassVar[List[str]] = ["_info", "agreementRevenue", "billingTerms", "currency", "expectedProbability", "expenseRevenue", "forecastItems", "forecastRevenueTotals", "forecastTotalWithTaxes", "id", "inclusiveRevenueTotals", "lostRevenue", "openRevenue", "otherRevenue1", "otherRevenue2", "productRevenue", "recurringTotal", "salesTaxRevenue", "serviceRevenue", "taxCode", "timeRevenue", "wonRevenue"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Forecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement_revenue
        if self.agreement_revenue:
            _dict['agreementRevenue'] = self.agreement_revenue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_terms
        if self.billing_terms:
            _dict['billingTerms'] = self.billing_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expense_revenue
        if self.expense_revenue:
            _dict['expenseRevenue'] = self.expense_revenue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in forecast_items (list)
        _items = []
        if self.forecast_items:
            for _item in self.forecast_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['forecastItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of forecast_revenue_totals
        if self.forecast_revenue_totals:
            _dict['forecastRevenueTotals'] = self.forecast_revenue_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inclusive_revenue_totals
        if self.inclusive_revenue_totals:
            _dict['inclusiveRevenueTotals'] = self.inclusive_revenue_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lost_revenue
        if self.lost_revenue:
            _dict['lostRevenue'] = self.lost_revenue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_revenue
        if self.open_revenue:
            _dict['openRevenue'] = self.open_revenue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_revenue1
        if self.other_revenue1:
            _dict['otherRevenue1'] = self.other_revenue1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_revenue2
        if self.other_revenue2:
            _dict['otherRevenue2'] = self.other_revenue2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_revenue
        if self.product_revenue:
            _dict['productRevenue'] = self.product_revenue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_revenue
        if self.service_revenue:
            _dict['serviceRevenue'] = self.service_revenue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_revenue
        if self.time_revenue:
            _dict['timeRevenue'] = self.time_revenue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of won_revenue
        if self.won_revenue:
            _dict['wonRevenue'] = self.won_revenue.to_dict()
        # set to None if forecast_total_with_taxes (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_total_with_taxes is None and "forecast_total_with_taxes" in self.model_fields_set:
            _dict['forecastTotalWithTaxes'] = None

        # set to None if recurring_total (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_total is None and "recurring_total" in self.model_fields_set:
            _dict['recurringTotal'] = None

        # set to None if sales_tax_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.sales_tax_revenue is None and "sales_tax_revenue" in self.model_fields_set:
            _dict['salesTaxRevenue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Forecast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Forecast) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agreementRevenue": AgreementRevenueReference.from_dict(obj.get("agreementRevenue")) if obj.get("agreementRevenue") is not None else None,
            "billingTerms": BillingTermsReference.from_dict(obj.get("billingTerms")) if obj.get("billingTerms") is not None else None,
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "expectedProbability": obj.get("expectedProbability"),
            "expenseRevenue": ExpenseRevenueReference.from_dict(obj.get("expenseRevenue")) if obj.get("expenseRevenue") is not None else None,
            "forecastItems": [ForecastItem.from_dict(_item) for _item in obj.get("forecastItems")] if obj.get("forecastItems") is not None else None,
            "forecastRevenueTotals": ForecastRevenueReference.from_dict(obj.get("forecastRevenueTotals")) if obj.get("forecastRevenueTotals") is not None else None,
            "forecastTotalWithTaxes": obj.get("forecastTotalWithTaxes"),
            "id": obj.get("id"),
            "inclusiveRevenueTotals": InclusiveRevenueReference.from_dict(obj.get("inclusiveRevenueTotals")) if obj.get("inclusiveRevenueTotals") is not None else None,
            "lostRevenue": LostRevenueReference.from_dict(obj.get("lostRevenue")) if obj.get("lostRevenue") is not None else None,
            "openRevenue": OpenRevenueReference.from_dict(obj.get("openRevenue")) if obj.get("openRevenue") is not None else None,
            "otherRevenue1": Other1RevenueReference.from_dict(obj.get("otherRevenue1")) if obj.get("otherRevenue1") is not None else None,
            "otherRevenue2": Other2RevenueReference.from_dict(obj.get("otherRevenue2")) if obj.get("otherRevenue2") is not None else None,
            "productRevenue": ProductRevenueReference.from_dict(obj.get("productRevenue")) if obj.get("productRevenue") is not None else None,
            "recurringTotal": obj.get("recurringTotal"),
            "salesTaxRevenue": obj.get("salesTaxRevenue"),
            "serviceRevenue": ServiceRevenueReference.from_dict(obj.get("serviceRevenue")) if obj.get("serviceRevenue") is not None else None,
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "timeRevenue": TimeRevenueReference.from_dict(obj.get("timeRevenue")) if obj.get("timeRevenue") is not None else None,
            "wonRevenue": WonRevenueReference.from_dict(obj.get("wonRevenue")) if obj.get("wonRevenue") is not None else None
        })
        return _obj


