# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.company_status_reference import CompanyStatusReference
from connectwise_psa.models.company_type_reference import CompanyTypeReference
from connectwise_psa.models.country_reference import CountryReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompanyPickerItem(BaseModel):
    """
    CompanyPickerItem
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    company: Optional[CompanyReference] = None
    company_country: Optional[CountryReference] = Field(default=None, alias="companyCountry")
    company_location: Optional[SystemLocationReference] = Field(default=None, alias="companyLocation")
    company_site: Optional[SiteReference] = Field(default=None, alias="companySite")
    company_status: Optional[CompanyStatusReference] = Field(default=None, alias="companyStatus")
    company_type: Optional[CompanyTypeReference] = Field(default=None, alias="companyType")
    id: Optional[StrictInt] = None
    member: Optional[MemberReference] = None
    vendor_picker_flag: Optional[StrictBool] = Field(default=None, description="Gets or sets if true, this record was created by the vendor picker component. Otherwise, the record was created by the company picker component.", alias="vendorPickerFlag")
    __properties: ClassVar[List[str]] = ["_info", "company", "companyCountry", "companyLocation", "companySite", "companyStatus", "companyType", "id", "member", "vendorPickerFlag"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompanyPickerItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_country
        if self.company_country:
            _dict['companyCountry'] = self.company_country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_location
        if self.company_location:
            _dict['companyLocation'] = self.company_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_site
        if self.company_site:
            _dict['companySite'] = self.company_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_status
        if self.company_status:
            _dict['companyStatus'] = self.company_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_type
        if self.company_type:
            _dict['companyType'] = self.company_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # set to None if vendor_picker_flag (nullable) is None
        # and model_fields_set contains the field
        if self.vendor_picker_flag is None and "vendor_picker_flag" in self.model_fields_set:
            _dict['vendorPickerFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompanyPickerItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CompanyPickerItem) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "companyCountry": CountryReference.from_dict(obj.get("companyCountry")) if obj.get("companyCountry") is not None else None,
            "companyLocation": SystemLocationReference.from_dict(obj.get("companyLocation")) if obj.get("companyLocation") is not None else None,
            "companySite": SiteReference.from_dict(obj.get("companySite")) if obj.get("companySite") is not None else None,
            "companyStatus": CompanyStatusReference.from_dict(obj.get("companyStatus")) if obj.get("companyStatus") is not None else None,
            "companyType": CompanyTypeReference.from_dict(obj.get("companyType")) if obj.get("companyType") is not None else None,
            "id": obj.get("id"),
            "member": MemberReference.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "vendorPickerFlag": obj.get("vendorPickerFlag")
        })
        return _obj


