# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.system_location_reference import SystemLocationReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TimeAccrual(BaseModel):
    """
    TimeAccrual
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    holiday_available_type: Optional[StrictStr] = Field(default=None, alias="holidayAvailableType")
    holiday_carryover_allowed_flag: Optional[StrictBool] = Field(default=None, alias="holidayCarryoverAllowedFlag")
    holiday_carryover_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="holidayCarryoverLimit")
    holiday_flag: Optional[StrictBool] = Field(default=None, description="if holidayFlag is set to false, system will clear out or ignore the values of holidayAvailableType, holidayCarryoverAllowedFlag, holidayCarryoverLimit", alias="holidayFlag")
    id: Optional[StrictInt] = None
    location: Optional[SystemLocationReference] = None
    pto_available_type: Optional[StrictStr] = Field(default=None, alias="ptoAvailableType")
    pto_carryover_allowed_flag: Optional[StrictBool] = Field(default=None, alias="ptoCarryoverAllowedFlag")
    pto_carryover_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ptoCarryoverLimit")
    pto_flag: Optional[StrictBool] = Field(default=None, description="if ptoFlag is set to false, system will clear out or ignore the values of ptoAvailableType, ptoCarryoverAllowedFlag, ptoCarryoverLimit", alias="ptoFlag")
    sick_available_type: Optional[StrictStr] = Field(default=None, alias="sickAvailableType")
    sick_carryover_allowed_flag: Optional[StrictBool] = Field(default=None, alias="sickCarryoverAllowedFlag")
    sick_carryover_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sickCarryoverLimit")
    sick_flag: Optional[StrictBool] = Field(default=None, description="if sickFlag is set to false, system will clear out or ignore the values of sickAvailableType, sickCarryoverAllowedFlag, sickCarryoverLimit", alias="sickFlag")
    vacation_available_type: Optional[StrictStr] = Field(default=None, alias="vacationAvailableType")
    vacation_carryover_allowed_flag: Optional[StrictBool] = Field(default=None, alias="vacationCarryoverAllowedFlag")
    vacation_carryover_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="vacationCarryoverLimit")
    vacation_flag: Optional[StrictBool] = Field(default=None, description="if vacationFlag is set to false, system will clear out or ingore the values of vacationAvailableType, vacationCarryoverAllowedFlag, vacationCarryoverLimit", alias="vacationFlag")
    __properties: ClassVar[List[str]] = ["_info", "holidayAvailableType", "holidayCarryoverAllowedFlag", "holidayCarryoverLimit", "holidayFlag", "id", "location", "ptoAvailableType", "ptoCarryoverAllowedFlag", "ptoCarryoverLimit", "ptoFlag", "sickAvailableType", "sickCarryoverAllowedFlag", "sickCarryoverLimit", "sickFlag", "vacationAvailableType", "vacationCarryoverAllowedFlag", "vacationCarryoverLimit", "vacationFlag"]

    @field_validator('holiday_available_type')
    def holiday_available_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AnniversaryYear', 'CalendarYear'):
            raise ValueError("must be one of enum values ('AnniversaryYear', 'CalendarYear')")
        return value

    @field_validator('pto_available_type')
    def pto_available_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AnniversaryYear', 'CalendarYear'):
            raise ValueError("must be one of enum values ('AnniversaryYear', 'CalendarYear')")
        return value

    @field_validator('sick_available_type')
    def sick_available_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AnniversaryYear', 'CalendarYear'):
            raise ValueError("must be one of enum values ('AnniversaryYear', 'CalendarYear')")
        return value

    @field_validator('vacation_available_type')
    def vacation_available_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AnniversaryYear', 'CalendarYear'):
            raise ValueError("must be one of enum values ('AnniversaryYear', 'CalendarYear')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimeAccrual from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # set to None if holiday_available_type (nullable) is None
        # and model_fields_set contains the field
        if self.holiday_available_type is None and "holiday_available_type" in self.model_fields_set:
            _dict['holidayAvailableType'] = None

        # set to None if holiday_carryover_allowed_flag (nullable) is None
        # and model_fields_set contains the field
        if self.holiday_carryover_allowed_flag is None and "holiday_carryover_allowed_flag" in self.model_fields_set:
            _dict['holidayCarryoverAllowedFlag'] = None

        # set to None if holiday_carryover_limit (nullable) is None
        # and model_fields_set contains the field
        if self.holiday_carryover_limit is None and "holiday_carryover_limit" in self.model_fields_set:
            _dict['holidayCarryoverLimit'] = None

        # set to None if holiday_flag (nullable) is None
        # and model_fields_set contains the field
        if self.holiday_flag is None and "holiday_flag" in self.model_fields_set:
            _dict['holidayFlag'] = None

        # set to None if pto_available_type (nullable) is None
        # and model_fields_set contains the field
        if self.pto_available_type is None and "pto_available_type" in self.model_fields_set:
            _dict['ptoAvailableType'] = None

        # set to None if pto_carryover_allowed_flag (nullable) is None
        # and model_fields_set contains the field
        if self.pto_carryover_allowed_flag is None and "pto_carryover_allowed_flag" in self.model_fields_set:
            _dict['ptoCarryoverAllowedFlag'] = None

        # set to None if pto_carryover_limit (nullable) is None
        # and model_fields_set contains the field
        if self.pto_carryover_limit is None and "pto_carryover_limit" in self.model_fields_set:
            _dict['ptoCarryoverLimit'] = None

        # set to None if pto_flag (nullable) is None
        # and model_fields_set contains the field
        if self.pto_flag is None and "pto_flag" in self.model_fields_set:
            _dict['ptoFlag'] = None

        # set to None if sick_available_type (nullable) is None
        # and model_fields_set contains the field
        if self.sick_available_type is None and "sick_available_type" in self.model_fields_set:
            _dict['sickAvailableType'] = None

        # set to None if sick_carryover_allowed_flag (nullable) is None
        # and model_fields_set contains the field
        if self.sick_carryover_allowed_flag is None and "sick_carryover_allowed_flag" in self.model_fields_set:
            _dict['sickCarryoverAllowedFlag'] = None

        # set to None if sick_carryover_limit (nullable) is None
        # and model_fields_set contains the field
        if self.sick_carryover_limit is None and "sick_carryover_limit" in self.model_fields_set:
            _dict['sickCarryoverLimit'] = None

        # set to None if sick_flag (nullable) is None
        # and model_fields_set contains the field
        if self.sick_flag is None and "sick_flag" in self.model_fields_set:
            _dict['sickFlag'] = None

        # set to None if vacation_available_type (nullable) is None
        # and model_fields_set contains the field
        if self.vacation_available_type is None and "vacation_available_type" in self.model_fields_set:
            _dict['vacationAvailableType'] = None

        # set to None if vacation_carryover_allowed_flag (nullable) is None
        # and model_fields_set contains the field
        if self.vacation_carryover_allowed_flag is None and "vacation_carryover_allowed_flag" in self.model_fields_set:
            _dict['vacationCarryoverAllowedFlag'] = None

        # set to None if vacation_carryover_limit (nullable) is None
        # and model_fields_set contains the field
        if self.vacation_carryover_limit is None and "vacation_carryover_limit" in self.model_fields_set:
            _dict['vacationCarryoverLimit'] = None

        # set to None if vacation_flag (nullable) is None
        # and model_fields_set contains the field
        if self.vacation_flag is None and "vacation_flag" in self.model_fields_set:
            _dict['vacationFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TimeAccrual from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TimeAccrual) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "holidayAvailableType": obj.get("holidayAvailableType"),
            "holidayCarryoverAllowedFlag": obj.get("holidayCarryoverAllowedFlag"),
            "holidayCarryoverLimit": obj.get("holidayCarryoverLimit"),
            "holidayFlag": obj.get("holidayFlag"),
            "id": obj.get("id"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "ptoAvailableType": obj.get("ptoAvailableType"),
            "ptoCarryoverAllowedFlag": obj.get("ptoCarryoverAllowedFlag"),
            "ptoCarryoverLimit": obj.get("ptoCarryoverLimit"),
            "ptoFlag": obj.get("ptoFlag"),
            "sickAvailableType": obj.get("sickAvailableType"),
            "sickCarryoverAllowedFlag": obj.get("sickCarryoverAllowedFlag"),
            "sickCarryoverLimit": obj.get("sickCarryoverLimit"),
            "sickFlag": obj.get("sickFlag"),
            "vacationAvailableType": obj.get("vacationAvailableType"),
            "vacationCarryoverAllowedFlag": obj.get("vacationCarryoverAllowedFlag"),
            "vacationCarryoverLimit": obj.get("vacationCarryoverLimit"),
            "vacationFlag": obj.get("vacationFlag")
        })
        return _obj


