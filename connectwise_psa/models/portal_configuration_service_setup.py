# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.service_signoff_reference import ServiceSignoffReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PortalConfigurationServiceSetup(BaseModel):
    """
    PortalConfigurationServiceSetup
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    actual_hours_flag: Optional[StrictBool] = Field(default=None, alias="actualHoursFlag")
    approval_status_flag: Optional[StrictBool] = Field(default=None, alias="approvalStatusFlag")
    assigned_resources_flag: Optional[StrictBool] = Field(default=None, alias="assignedResourcesFlag")
    budget_hours_flag: Optional[StrictBool] = Field(default=None, alias="budgetHoursFlag")
    closed_tasks_flag: Optional[StrictBool] = Field(default=None, alias="closedTasksFlag")
    contact_flag: Optional[StrictBool] = Field(default=None, alias="contactFlag")
    display_closed_tickets_option: Optional[StrictStr] = Field(alias="displayClosedTicketsOption")
    enable_chat_assist_flag: Optional[StrictBool] = Field(default=None, alias="enableChatAssistFlag")
    entered_date_flag: Optional[StrictBool] = Field(default=None, alias="enteredDateFlag")
    fixed_fee_ticket_template: Optional[ServiceSignoffReference] = Field(default=None, alias="fixedFeeTicketTemplate")
    id: Optional[StrictInt] = None
    last_update_flag: Optional[StrictBool] = Field(default=None, alias="lastUpdateFlag")
    open_tasks_flag: Optional[StrictBool] = Field(default=None, alias="openTasksFlag")
    required_date_flag: Optional[StrictBool] = Field(default=None, alias="requiredDateFlag")
    service_board_flag: Optional[StrictBool] = Field(default=None, alias="serviceBoardFlag")
    service_sub_type_flag: Optional[StrictBool] = Field(default=None, alias="serviceSubTypeFlag")
    service_sub_type_item_flag: Optional[StrictBool] = Field(default=None, alias="serviceSubTypeItemFlag")
    service_type_flag: Optional[StrictBool] = Field(default=None, alias="serviceTypeFlag")
    site_name_flag: Optional[StrictBool] = Field(default=None, alias="siteNameFlag")
    sla_info_flag: Optional[StrictBool] = Field(default=None, alias="slaInfoFlag")
    status_flag: Optional[StrictBool] = Field(default=None, alias="statusFlag")
    time_materials_ticket_template: Optional[ServiceSignoffReference] = Field(default=None, alias="timeMaterialsTicketTemplate")
    __properties: ClassVar[List[str]] = ["_info", "actualHoursFlag", "approvalStatusFlag", "assignedResourcesFlag", "budgetHoursFlag", "closedTasksFlag", "contactFlag", "displayClosedTicketsOption", "enableChatAssistFlag", "enteredDateFlag", "fixedFeeTicketTemplate", "id", "lastUpdateFlag", "openTasksFlag", "requiredDateFlag", "serviceBoardFlag", "serviceSubTypeFlag", "serviceSubTypeItemFlag", "serviceTypeFlag", "siteNameFlag", "slaInfoFlag", "statusFlag", "timeMaterialsTicketTemplate"]

    @field_validator('display_closed_tickets_option')
    def display_closed_tickets_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DoNotDisplay', 'Closed30Days', 'Closed60Days', 'Closed90Days', 'Closed120Days', 'AllClosed'):
            raise ValueError("must be one of enum values ('DoNotDisplay', 'Closed30Days', 'Closed60Days', 'Closed90Days', 'Closed120Days', 'AllClosed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PortalConfigurationServiceSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fixed_fee_ticket_template
        if self.fixed_fee_ticket_template:
            _dict['fixedFeeTicketTemplate'] = self.fixed_fee_ticket_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_materials_ticket_template
        if self.time_materials_ticket_template:
            _dict['timeMaterialsTicketTemplate'] = self.time_materials_ticket_template.to_dict()
        # set to None if actual_hours_flag (nullable) is None
        # and model_fields_set contains the field
        if self.actual_hours_flag is None and "actual_hours_flag" in self.model_fields_set:
            _dict['actualHoursFlag'] = None

        # set to None if approval_status_flag (nullable) is None
        # and model_fields_set contains the field
        if self.approval_status_flag is None and "approval_status_flag" in self.model_fields_set:
            _dict['approvalStatusFlag'] = None

        # set to None if assigned_resources_flag (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_resources_flag is None and "assigned_resources_flag" in self.model_fields_set:
            _dict['assignedResourcesFlag'] = None

        # set to None if budget_hours_flag (nullable) is None
        # and model_fields_set contains the field
        if self.budget_hours_flag is None and "budget_hours_flag" in self.model_fields_set:
            _dict['budgetHoursFlag'] = None

        # set to None if closed_tasks_flag (nullable) is None
        # and model_fields_set contains the field
        if self.closed_tasks_flag is None and "closed_tasks_flag" in self.model_fields_set:
            _dict['closedTasksFlag'] = None

        # set to None if contact_flag (nullable) is None
        # and model_fields_set contains the field
        if self.contact_flag is None and "contact_flag" in self.model_fields_set:
            _dict['contactFlag'] = None

        # set to None if display_closed_tickets_option (nullable) is None
        # and model_fields_set contains the field
        if self.display_closed_tickets_option is None and "display_closed_tickets_option" in self.model_fields_set:
            _dict['displayClosedTicketsOption'] = None

        # set to None if enable_chat_assist_flag (nullable) is None
        # and model_fields_set contains the field
        if self.enable_chat_assist_flag is None and "enable_chat_assist_flag" in self.model_fields_set:
            _dict['enableChatAssistFlag'] = None

        # set to None if entered_date_flag (nullable) is None
        # and model_fields_set contains the field
        if self.entered_date_flag is None and "entered_date_flag" in self.model_fields_set:
            _dict['enteredDateFlag'] = None

        # set to None if last_update_flag (nullable) is None
        # and model_fields_set contains the field
        if self.last_update_flag is None and "last_update_flag" in self.model_fields_set:
            _dict['lastUpdateFlag'] = None

        # set to None if open_tasks_flag (nullable) is None
        # and model_fields_set contains the field
        if self.open_tasks_flag is None and "open_tasks_flag" in self.model_fields_set:
            _dict['openTasksFlag'] = None

        # set to None if required_date_flag (nullable) is None
        # and model_fields_set contains the field
        if self.required_date_flag is None and "required_date_flag" in self.model_fields_set:
            _dict['requiredDateFlag'] = None

        # set to None if service_board_flag (nullable) is None
        # and model_fields_set contains the field
        if self.service_board_flag is None and "service_board_flag" in self.model_fields_set:
            _dict['serviceBoardFlag'] = None

        # set to None if service_sub_type_flag (nullable) is None
        # and model_fields_set contains the field
        if self.service_sub_type_flag is None and "service_sub_type_flag" in self.model_fields_set:
            _dict['serviceSubTypeFlag'] = None

        # set to None if service_sub_type_item_flag (nullable) is None
        # and model_fields_set contains the field
        if self.service_sub_type_item_flag is None and "service_sub_type_item_flag" in self.model_fields_set:
            _dict['serviceSubTypeItemFlag'] = None

        # set to None if service_type_flag (nullable) is None
        # and model_fields_set contains the field
        if self.service_type_flag is None and "service_type_flag" in self.model_fields_set:
            _dict['serviceTypeFlag'] = None

        # set to None if site_name_flag (nullable) is None
        # and model_fields_set contains the field
        if self.site_name_flag is None and "site_name_flag" in self.model_fields_set:
            _dict['siteNameFlag'] = None

        # set to None if sla_info_flag (nullable) is None
        # and model_fields_set contains the field
        if self.sla_info_flag is None and "sla_info_flag" in self.model_fields_set:
            _dict['slaInfoFlag'] = None

        # set to None if status_flag (nullable) is None
        # and model_fields_set contains the field
        if self.status_flag is None and "status_flag" in self.model_fields_set:
            _dict['statusFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PortalConfigurationServiceSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PortalConfigurationServiceSetup) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "actualHoursFlag": obj.get("actualHoursFlag"),
            "approvalStatusFlag": obj.get("approvalStatusFlag"),
            "assignedResourcesFlag": obj.get("assignedResourcesFlag"),
            "budgetHoursFlag": obj.get("budgetHoursFlag"),
            "closedTasksFlag": obj.get("closedTasksFlag"),
            "contactFlag": obj.get("contactFlag"),
            "displayClosedTicketsOption": obj.get("displayClosedTicketsOption"),
            "enableChatAssistFlag": obj.get("enableChatAssistFlag"),
            "enteredDateFlag": obj.get("enteredDateFlag"),
            "fixedFeeTicketTemplate": ServiceSignoffReference.from_dict(obj.get("fixedFeeTicketTemplate")) if obj.get("fixedFeeTicketTemplate") is not None else None,
            "id": obj.get("id"),
            "lastUpdateFlag": obj.get("lastUpdateFlag"),
            "openTasksFlag": obj.get("openTasksFlag"),
            "requiredDateFlag": obj.get("requiredDateFlag"),
            "serviceBoardFlag": obj.get("serviceBoardFlag"),
            "serviceSubTypeFlag": obj.get("serviceSubTypeFlag"),
            "serviceSubTypeItemFlag": obj.get("serviceSubTypeItemFlag"),
            "serviceTypeFlag": obj.get("serviceTypeFlag"),
            "siteNameFlag": obj.get("siteNameFlag"),
            "slaInfoFlag": obj.get("slaInfoFlag"),
            "statusFlag": obj.get("statusFlag"),
            "timeMaterialsTicketTemplate": ServiceSignoffReference.from_dict(obj.get("timeMaterialsTicketTemplate")) if obj.get("timeMaterialsTicketTemplate") is not None else None
        })
        return _obj


