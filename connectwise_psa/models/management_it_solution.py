# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ManagementItSolution(BaseModel):
    """
    ManagementItSolution
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    continuum_api_password: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for Continuum solution. Max length: 100;", alias="continuumApiPassword")
    continuum_api_username: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for Continuum solution. Max length: 100;", alias="continuumApiUsername")
    global_login_flag: Optional[StrictBool] = Field(default=None, alias="globalLoginFlag")
    global_login_password: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required when globalLoginFlag = true. Max length: 50;", alias="globalLoginPassword")
    global_login_username: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required when globalLoginFlag = true. Max length: 50;", alias="globalLoginUsername")
    id: Optional[StrictInt] = None
    level_api_password: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for Level Platforms solution. Max length: 100;", alias="levelApiPassword")
    level_api_username: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for Level Platforms solution. Max length: 100;", alias="levelApiUsername")
    level_var_domain: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for Level Platforms solution. Max length: 100;", alias="levelVarDomain")
    management_it_solution_type: Optional[StrictStr] = Field(alias="managementItSolutionType")
    management_server_url: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for Level Platforms. Max length: 200;", alias="managementServerUrl")
    management_solution_name: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required when managementItSolutionType is Custom. Max length: 30;", alias="managementSolutionName")
    n_able_password: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for N-Able solution. Max length: 50;", alias="nAblePassword")
    n_able_username: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for N-Able solution. Max length: 50;", alias="nAbleUsername")
    name: StrictStr = Field(description=" Max length: 30;")
    no_display_flag: Optional[StrictBool] = Field(default=None, alias="noDisplayFlag")
    override_login_location_flag: Optional[StrictBool] = Field(default=None, alias="overrideLoginLocationFlag")
    override_web_service_location_flag: Optional[StrictBool] = Field(default=None, alias="overrideWebServiceLocationFlag")
    portal_override_login_url: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for Level Platforms when overrideLoginLocationFlag is true. Max length: 200;", alias="portalOverrideLoginUrl")
    using_ssl_flag: Optional[StrictBool] = Field(default=None, alias="usingSslFlag")
    webservice_override_url: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required for Level Platforms when overrideWebServiceLocationFlag is true. Max length: 200;", alias="webserviceOverrideUrl")
    __properties: ClassVar[List[str]] = ["_info", "continuumApiPassword", "continuumApiUsername", "globalLoginFlag", "globalLoginPassword", "globalLoginUsername", "id", "levelApiPassword", "levelApiUsername", "levelVarDomain", "managementItSolutionType", "managementServerUrl", "managementSolutionName", "nAblePassword", "nAbleUsername", "name", "noDisplayFlag", "overrideLoginLocationFlag", "overrideWebServiceLocationFlag", "portalOverrideLoginUrl", "usingSslFlag", "webserviceOverrideUrl"]

    @field_validator('management_it_solution_type')
    def management_it_solution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LevelPlatforms', 'NAble', 'Continuum', 'Custom'):
            raise ValueError("must be one of enum values ('LevelPlatforms', 'NAble', 'Continuum', 'Custom')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ManagementItSolution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if global_login_flag (nullable) is None
        # and model_fields_set contains the field
        if self.global_login_flag is None and "global_login_flag" in self.model_fields_set:
            _dict['globalLoginFlag'] = None

        # set to None if management_it_solution_type (nullable) is None
        # and model_fields_set contains the field
        if self.management_it_solution_type is None and "management_it_solution_type" in self.model_fields_set:
            _dict['managementItSolutionType'] = None

        # set to None if no_display_flag (nullable) is None
        # and model_fields_set contains the field
        if self.no_display_flag is None and "no_display_flag" in self.model_fields_set:
            _dict['noDisplayFlag'] = None

        # set to None if override_login_location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.override_login_location_flag is None and "override_login_location_flag" in self.model_fields_set:
            _dict['overrideLoginLocationFlag'] = None

        # set to None if override_web_service_location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.override_web_service_location_flag is None and "override_web_service_location_flag" in self.model_fields_set:
            _dict['overrideWebServiceLocationFlag'] = None

        # set to None if using_ssl_flag (nullable) is None
        # and model_fields_set contains the field
        if self.using_ssl_flag is None and "using_ssl_flag" in self.model_fields_set:
            _dict['usingSslFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ManagementItSolution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ManagementItSolution) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "continuumApiPassword": obj.get("continuumApiPassword"),
            "continuumApiUsername": obj.get("continuumApiUsername"),
            "globalLoginFlag": obj.get("globalLoginFlag"),
            "globalLoginPassword": obj.get("globalLoginPassword"),
            "globalLoginUsername": obj.get("globalLoginUsername"),
            "id": obj.get("id"),
            "levelApiPassword": obj.get("levelApiPassword"),
            "levelApiUsername": obj.get("levelApiUsername"),
            "levelVarDomain": obj.get("levelVarDomain"),
            "managementItSolutionType": obj.get("managementItSolutionType"),
            "managementServerUrl": obj.get("managementServerUrl"),
            "managementSolutionName": obj.get("managementSolutionName"),
            "nAblePassword": obj.get("nAblePassword"),
            "nAbleUsername": obj.get("nAbleUsername"),
            "name": obj.get("name"),
            "noDisplayFlag": obj.get("noDisplayFlag"),
            "overrideLoginLocationFlag": obj.get("overrideLoginLocationFlag"),
            "overrideWebServiceLocationFlag": obj.get("overrideWebServiceLocationFlag"),
            "portalOverrideLoginUrl": obj.get("portalOverrideLoginUrl"),
            "usingSslFlag": obj.get("usingSslFlag"),
            "webserviceOverrideUrl": obj.get("webserviceOverrideUrl")
        })
        return _obj


