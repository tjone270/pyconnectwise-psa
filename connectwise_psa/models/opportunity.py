# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.campaign_reference import CampaignReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.opportunity_priority_reference import OpportunityPriorityReference
from connectwise_psa.models.opportunity_probability_reference import OpportunityProbabilityReference
from connectwise_psa.models.opportunity_rating_reference import OpportunityRatingReference
from connectwise_psa.models.opportunity_stage_reference import OpportunityStageReference
from connectwise_psa.models.opportunity_status_reference import OpportunityStatusReference
from connectwise_psa.models.opportunity_type_reference import OpportunityTypeReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Opportunity(BaseModel):
    """
    Opportunity
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    bill_to_company: Optional[CompanyReference] = Field(default=None, alias="billToCompany")
    bill_to_contact: Optional[ContactReference] = Field(default=None, alias="billToContact")
    bill_to_site: Optional[SiteReference] = Field(default=None, alias="billToSite")
    billing_terms: Optional[BillingTermsReference] = Field(default=None, alias="billingTerms")
    business_unit_id: Optional[StrictInt] = Field(default=None, description=" Required On Updates;", alias="businessUnitId")
    campaign: Optional[CampaignReference] = None
    closed_by: Optional[MemberReference] = Field(default=None, alias="closedBy")
    closed_date: Optional[datetime] = Field(default=None, alias="closedDate")
    company: Optional[CompanyReference] = None
    company_location_id: Optional[StrictInt] = Field(default=None, alias="companyLocationId")
    contact: Optional[ContactReference] = None
    currency: Optional[CurrencyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    customer_po: Optional[StrictStr] = Field(default=None, description=" Max length: 25;", alias="customerPO")
    date_became_lead: Optional[datetime] = Field(default=None, alias="dateBecameLead")
    expected_close_date: Optional[datetime] = Field(default=None, description=" Required On Updates;", alias="expectedCloseDate")
    id: Optional[StrictInt] = None
    location_id: Optional[StrictInt] = Field(default=None, description=" Required On Updates;", alias="locationId")
    name: StrictStr = Field(description=" Max length: 100;")
    notes: Optional[StrictStr] = None
    pipeline_change_date: Optional[datetime] = Field(default=None, alias="pipelineChangeDate")
    primary_sales_rep: Optional[MemberReference] = Field(default=None, alias="primarySalesRep")
    priority: Optional[OpportunityPriorityReference] = None
    probability: Optional[OpportunityProbabilityReference] = None
    rating: Optional[OpportunityRatingReference] = None
    secondary_sales_rep: Optional[MemberReference] = Field(default=None, alias="secondarySalesRep")
    ship_to_company: Optional[CompanyReference] = Field(default=None, alias="shipToCompany")
    ship_to_contact: Optional[ContactReference] = Field(default=None, alias="shipToContact")
    ship_to_site: Optional[SiteReference] = Field(default=None, alias="shipToSite")
    site: Optional[SiteReference] = None
    source: Optional[StrictStr] = Field(default=None, description=" Max length: 50;")
    stage: Optional[OpportunityStageReference] = None
    status: Optional[OpportunityStatusReference] = None
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    technical_contact: Optional[ContactReference] = Field(default=None, alias="technicalContact")
    total_sales_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalSalesTax")
    type: Optional[OpportunityTypeReference] = None
    __properties: ClassVar[List[str]] = ["_info", "billToCompany", "billToContact", "billToSite", "billingTerms", "businessUnitId", "campaign", "closedBy", "closedDate", "company", "companyLocationId", "contact", "currency", "customFields", "customerPO", "dateBecameLead", "expectedCloseDate", "id", "locationId", "name", "notes", "pipelineChangeDate", "primarySalesRep", "priority", "probability", "rating", "secondarySalesRep", "shipToCompany", "shipToContact", "shipToSite", "site", "source", "stage", "status", "taxCode", "technicalContact", "totalSalesTax", "type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Opportunity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bill_to_company
        if self.bill_to_company:
            _dict['billToCompany'] = self.bill_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_site
        if self.bill_to_site:
            _dict['billToSite'] = self.bill_to_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_terms
        if self.billing_terms:
            _dict['billingTerms'] = self.billing_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign
        if self.campaign:
            _dict['campaign'] = self.campaign.to_dict()
        # override the default output from pydantic by calling `to_dict()` of closed_by
        if self.closed_by:
            _dict['closedBy'] = self.closed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of primary_sales_rep
        if self.primary_sales_rep:
            _dict['primarySalesRep'] = self.primary_sales_rep.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of probability
        if self.probability:
            _dict['probability'] = self.probability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_sales_rep
        if self.secondary_sales_rep:
            _dict['secondarySalesRep'] = self.secondary_sales_rep.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_company
        if self.ship_to_company:
            _dict['shipToCompany'] = self.ship_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_contact
        if self.ship_to_contact:
            _dict['shipToContact'] = self.ship_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_site
        if self.ship_to_site:
            _dict['shipToSite'] = self.ship_to_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stage
        if self.stage:
            _dict['stage'] = self.stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of technical_contact
        if self.technical_contact:
            _dict['technicalContact'] = self.technical_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # set to None if business_unit_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_unit_id is None and "business_unit_id" in self.model_fields_set:
            _dict['businessUnitId'] = None

        # set to None if company_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_location_id is None and "company_location_id" in self.model_fields_set:
            _dict['companyLocationId'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if total_sales_tax (nullable) is None
        # and model_fields_set contains the field
        if self.total_sales_tax is None and "total_sales_tax" in self.model_fields_set:
            _dict['totalSalesTax'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Opportunity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Opportunity) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "billToCompany": CompanyReference.from_dict(obj.get("billToCompany")) if obj.get("billToCompany") is not None else None,
            "billToContact": ContactReference.from_dict(obj.get("billToContact")) if obj.get("billToContact") is not None else None,
            "billToSite": SiteReference.from_dict(obj.get("billToSite")) if obj.get("billToSite") is not None else None,
            "billingTerms": BillingTermsReference.from_dict(obj.get("billingTerms")) if obj.get("billingTerms") is not None else None,
            "businessUnitId": obj.get("businessUnitId"),
            "campaign": CampaignReference.from_dict(obj.get("campaign")) if obj.get("campaign") is not None else None,
            "closedBy": MemberReference.from_dict(obj.get("closedBy")) if obj.get("closedBy") is not None else None,
            "closedDate": obj.get("closedDate"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "companyLocationId": obj.get("companyLocationId"),
            "contact": ContactReference.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "customerPO": obj.get("customerPO"),
            "dateBecameLead": obj.get("dateBecameLead"),
            "expectedCloseDate": obj.get("expectedCloseDate"),
            "id": obj.get("id"),
            "locationId": obj.get("locationId"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "pipelineChangeDate": obj.get("pipelineChangeDate"),
            "primarySalesRep": MemberReference.from_dict(obj.get("primarySalesRep")) if obj.get("primarySalesRep") is not None else None,
            "priority": OpportunityPriorityReference.from_dict(obj.get("priority")) if obj.get("priority") is not None else None,
            "probability": OpportunityProbabilityReference.from_dict(obj.get("probability")) if obj.get("probability") is not None else None,
            "rating": OpportunityRatingReference.from_dict(obj.get("rating")) if obj.get("rating") is not None else None,
            "secondarySalesRep": MemberReference.from_dict(obj.get("secondarySalesRep")) if obj.get("secondarySalesRep") is not None else None,
            "shipToCompany": CompanyReference.from_dict(obj.get("shipToCompany")) if obj.get("shipToCompany") is not None else None,
            "shipToContact": ContactReference.from_dict(obj.get("shipToContact")) if obj.get("shipToContact") is not None else None,
            "shipToSite": SiteReference.from_dict(obj.get("shipToSite")) if obj.get("shipToSite") is not None else None,
            "site": SiteReference.from_dict(obj.get("site")) if obj.get("site") is not None else None,
            "source": obj.get("source"),
            "stage": OpportunityStageReference.from_dict(obj.get("stage")) if obj.get("stage") is not None else None,
            "status": OpportunityStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "technicalContact": ContactReference.from_dict(obj.get("technicalContact")) if obj.get("technicalContact") is not None else None,
            "totalSalesTax": obj.get("totalSalesTax"),
            "type": OpportunityTypeReference.from_dict(obj.get("type")) if obj.get("type") is not None else None
        })
        return _obj


