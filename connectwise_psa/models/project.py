# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.agreement_reference import AgreementReference
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.opportunity_reference import OpportunityReference
from connectwise_psa.models.project_board_reference import ProjectBoardReference
from connectwise_psa.models.project_status_reference import ProjectStatusReference
from connectwise_psa.models.project_type_reference import ProjectTypeReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Project(BaseModel):
    """
    Project
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    actual_end: Optional[datetime] = Field(default=None, alias="actualEnd")
    actual_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualHours")
    actual_start: Optional[datetime] = Field(default=None, alias="actualStart")
    agreement: Optional[AgreementReference] = None
    bill_expenses: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billExpenses")
    bill_products: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billProducts")
    bill_project_after_closed_flag: Optional[StrictBool] = Field(default=None, alias="billProjectAfterClosedFlag")
    bill_time: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billTime")
    bill_to_company: Optional[CompanyReference] = Field(default=None, alias="billToCompany")
    bill_to_contact: Optional[ContactReference] = Field(default=None, alias="billToContact")
    bill_to_site: Optional[SiteReference] = Field(default=None, alias="billToSite")
    bill_unapproved_time_and_expense: Optional[StrictBool] = Field(default=None, alias="billUnapprovedTimeAndExpense")
    billing_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="billingAmount")
    billing_attention: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="billingAttention")
    billing_method: Optional[StrictStr] = Field(alias="billingMethod")
    billing_rate_type: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billingRateType")
    billing_start_date: Optional[datetime] = Field(default=None, alias="billingStartDate")
    billing_terms: Optional[BillingTermsReference] = Field(default=None, alias="billingTerms")
    board: Optional[ProjectBoardReference] = None
    budget_analysis: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="budgetAnalysis")
    budget_flag: Optional[StrictBool] = Field(default=None, alias="budgetFlag")
    budget_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="budgetHours")
    closed_flag: Optional[StrictBool] = Field(default=None, alias="closedFlag")
    company: Optional[CompanyReference] = None
    company_location: Optional[SystemLocationReference] = Field(default=None, alias="companyLocation")
    contact: Optional[ContactReference] = None
    currency: Optional[CurrencyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    customer_po: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="customerPO")
    department: Optional[SystemDepartmentReference] = None
    description: Optional[StrictStr] = None
    do_not_display_in_portal_flag: Optional[StrictBool] = Field(default=None, alias="doNotDisplayInPortalFlag")
    downpayment: Optional[Union[StrictFloat, StrictInt]] = None
    estimated_end: datetime = Field(alias="estimatedEnd")
    estimated_expense_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedExpenseCost")
    estimated_expense_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedExpenseRevenue")
    estimated_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedHours")
    estimated_product_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedProductCost")
    estimated_product_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedProductRevenue")
    estimated_start: datetime = Field(alias="estimatedStart")
    estimated_time_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedTimeCost")
    estimated_time_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedTimeRevenue")
    expense_approver: Optional[MemberReference] = Field(default=None, alias="expenseApprover")
    id: Optional[StrictInt] = None
    include_dependencies_flag: Optional[StrictBool] = Field(default=None, alias="includeDependenciesFlag")
    include_estimates_flag: Optional[StrictBool] = Field(default=None, alias="includeEstimatesFlag")
    location: Optional[SystemLocationReference] = None
    manager: Optional[MemberReference] = None
    name: StrictStr = Field(description=" Max length: 100;")
    opportunity: Optional[OpportunityReference] = None
    percent_complete: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="percentComplete")
    po_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="poAmount")
    project_template_id: Optional[StrictInt] = Field(default=None, alias="projectTemplateId")
    restrict_down_payment_flag: Optional[StrictBool] = Field(default=None, alias="restrictDownPaymentFlag")
    scheduled_end: Optional[datetime] = Field(default=None, alias="scheduledEnd")
    scheduled_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="scheduledHours")
    scheduled_start: Optional[datetime] = Field(default=None, alias="scheduledStart")
    ship_to_company: Optional[CompanyReference] = Field(default=None, alias="shipToCompany")
    ship_to_contact: Optional[ContactReference] = Field(default=None, alias="shipToContact")
    ship_to_site: Optional[SiteReference] = Field(default=None, alias="shipToSite")
    site: Optional[SiteReference] = None
    status: Optional[ProjectStatusReference] = None
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    time_approver: Optional[MemberReference] = Field(default=None, alias="timeApprover")
    type: Optional[ProjectTypeReference] = None
    __properties: ClassVar[List[str]] = ["_info", "actualEnd", "actualHours", "actualStart", "agreement", "billExpenses", "billProducts", "billProjectAfterClosedFlag", "billTime", "billToCompany", "billToContact", "billToSite", "billUnapprovedTimeAndExpense", "billingAmount", "billingAttention", "billingMethod", "billingRateType", "billingStartDate", "billingTerms", "board", "budgetAnalysis", "budgetFlag", "budgetHours", "closedFlag", "company", "companyLocation", "contact", "currency", "customFields", "customerPO", "department", "description", "doNotDisplayInPortalFlag", "downpayment", "estimatedEnd", "estimatedExpenseCost", "estimatedExpenseRevenue", "estimatedHours", "estimatedProductCost", "estimatedProductRevenue", "estimatedStart", "estimatedTimeCost", "estimatedTimeRevenue", "expenseApprover", "id", "includeDependenciesFlag", "includeEstimatesFlag", "location", "manager", "name", "opportunity", "percentComplete", "poAmount", "projectTemplateId", "restrictDownPaymentFlag", "scheduledEnd", "scheduledHours", "scheduledStart", "shipToCompany", "shipToContact", "shipToSite", "site", "status", "taxCode", "timeApprover", "type"]

    @field_validator('bill_expenses')
    def bill_expenses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('bill_products')
    def bill_products_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('bill_time')
    def bill_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('billing_method')
    def billing_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate'):
            raise ValueError("must be one of enum values ('ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate')")
        return value

    @field_validator('billing_rate_type')
    def billing_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('StaffMember', 'WorkRole'):
            raise ValueError("must be one of enum values ('StaffMember', 'WorkRole')")
        return value

    @field_validator('budget_analysis')
    def budget_analysis_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ActualHours', 'BillableHours'):
            raise ValueError("must be one of enum values ('ActualHours', 'BillableHours')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement
        if self.agreement:
            _dict['agreement'] = self.agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_company
        if self.bill_to_company:
            _dict['billToCompany'] = self.bill_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_site
        if self.bill_to_site:
            _dict['billToSite'] = self.bill_to_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_terms
        if self.billing_terms:
            _dict['billingTerms'] = self.billing_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of board
        if self.board:
            _dict['board'] = self.board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_location
        if self.company_location:
            _dict['companyLocation'] = self.company_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expense_approver
        if self.expense_approver:
            _dict['expenseApprover'] = self.expense_approver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manager
        if self.manager:
            _dict['manager'] = self.manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opportunity
        if self.opportunity:
            _dict['opportunity'] = self.opportunity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_company
        if self.ship_to_company:
            _dict['shipToCompany'] = self.ship_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_contact
        if self.ship_to_contact:
            _dict['shipToContact'] = self.ship_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_site
        if self.ship_to_site:
            _dict['shipToSite'] = self.ship_to_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_approver
        if self.time_approver:
            _dict['timeApprover'] = self.time_approver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # set to None if actual_hours (nullable) is None
        # and model_fields_set contains the field
        if self.actual_hours is None and "actual_hours" in self.model_fields_set:
            _dict['actualHours'] = None

        # set to None if bill_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.bill_expenses is None and "bill_expenses" in self.model_fields_set:
            _dict['billExpenses'] = None

        # set to None if bill_products (nullable) is None
        # and model_fields_set contains the field
        if self.bill_products is None and "bill_products" in self.model_fields_set:
            _dict['billProducts'] = None

        # set to None if bill_project_after_closed_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_project_after_closed_flag is None and "bill_project_after_closed_flag" in self.model_fields_set:
            _dict['billProjectAfterClosedFlag'] = None

        # set to None if bill_time (nullable) is None
        # and model_fields_set contains the field
        if self.bill_time is None and "bill_time" in self.model_fields_set:
            _dict['billTime'] = None

        # set to None if bill_unapproved_time_and_expense (nullable) is None
        # and model_fields_set contains the field
        if self.bill_unapproved_time_and_expense is None and "bill_unapproved_time_and_expense" in self.model_fields_set:
            _dict['billUnapprovedTimeAndExpense'] = None

        # set to None if billing_amount (nullable) is None
        # and model_fields_set contains the field
        if self.billing_amount is None and "billing_amount" in self.model_fields_set:
            _dict['billingAmount'] = None

        # set to None if billing_method (nullable) is None
        # and model_fields_set contains the field
        if self.billing_method is None and "billing_method" in self.model_fields_set:
            _dict['billingMethod'] = None

        # set to None if billing_rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.billing_rate_type is None and "billing_rate_type" in self.model_fields_set:
            _dict['billingRateType'] = None

        # set to None if budget_analysis (nullable) is None
        # and model_fields_set contains the field
        if self.budget_analysis is None and "budget_analysis" in self.model_fields_set:
            _dict['budgetAnalysis'] = None

        # set to None if budget_flag (nullable) is None
        # and model_fields_set contains the field
        if self.budget_flag is None and "budget_flag" in self.model_fields_set:
            _dict['budgetFlag'] = None

        # set to None if budget_hours (nullable) is None
        # and model_fields_set contains the field
        if self.budget_hours is None and "budget_hours" in self.model_fields_set:
            _dict['budgetHours'] = None

        # set to None if do_not_display_in_portal_flag (nullable) is None
        # and model_fields_set contains the field
        if self.do_not_display_in_portal_flag is None and "do_not_display_in_portal_flag" in self.model_fields_set:
            _dict['doNotDisplayInPortalFlag'] = None

        # set to None if downpayment (nullable) is None
        # and model_fields_set contains the field
        if self.downpayment is None and "downpayment" in self.model_fields_set:
            _dict['downpayment'] = None

        # set to None if estimated_expense_cost (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_expense_cost is None and "estimated_expense_cost" in self.model_fields_set:
            _dict['estimatedExpenseCost'] = None

        # set to None if estimated_expense_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_expense_revenue is None and "estimated_expense_revenue" in self.model_fields_set:
            _dict['estimatedExpenseRevenue'] = None

        # set to None if estimated_hours (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_hours is None and "estimated_hours" in self.model_fields_set:
            _dict['estimatedHours'] = None

        # set to None if estimated_product_cost (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_product_cost is None and "estimated_product_cost" in self.model_fields_set:
            _dict['estimatedProductCost'] = None

        # set to None if estimated_product_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_product_revenue is None and "estimated_product_revenue" in self.model_fields_set:
            _dict['estimatedProductRevenue'] = None

        # set to None if estimated_time_cost (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_time_cost is None and "estimated_time_cost" in self.model_fields_set:
            _dict['estimatedTimeCost'] = None

        # set to None if estimated_time_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_time_revenue is None and "estimated_time_revenue" in self.model_fields_set:
            _dict['estimatedTimeRevenue'] = None

        # set to None if include_dependencies_flag (nullable) is None
        # and model_fields_set contains the field
        if self.include_dependencies_flag is None and "include_dependencies_flag" in self.model_fields_set:
            _dict['includeDependenciesFlag'] = None

        # set to None if include_estimates_flag (nullable) is None
        # and model_fields_set contains the field
        if self.include_estimates_flag is None and "include_estimates_flag" in self.model_fields_set:
            _dict['includeEstimatesFlag'] = None

        # set to None if percent_complete (nullable) is None
        # and model_fields_set contains the field
        if self.percent_complete is None and "percent_complete" in self.model_fields_set:
            _dict['percentComplete'] = None

        # set to None if po_amount (nullable) is None
        # and model_fields_set contains the field
        if self.po_amount is None and "po_amount" in self.model_fields_set:
            _dict['poAmount'] = None

        # set to None if project_template_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_template_id is None and "project_template_id" in self.model_fields_set:
            _dict['projectTemplateId'] = None

        # set to None if restrict_down_payment_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_down_payment_flag is None and "restrict_down_payment_flag" in self.model_fields_set:
            _dict['restrictDownPaymentFlag'] = None

        # set to None if scheduled_hours (nullable) is None
        # and model_fields_set contains the field
        if self.scheduled_hours is None and "scheduled_hours" in self.model_fields_set:
            _dict['scheduledHours'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Project) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "actualEnd": obj.get("actualEnd"),
            "actualHours": obj.get("actualHours"),
            "actualStart": obj.get("actualStart"),
            "agreement": AgreementReference.from_dict(obj.get("agreement")) if obj.get("agreement") is not None else None,
            "billExpenses": obj.get("billExpenses"),
            "billProducts": obj.get("billProducts"),
            "billProjectAfterClosedFlag": obj.get("billProjectAfterClosedFlag"),
            "billTime": obj.get("billTime"),
            "billToCompany": CompanyReference.from_dict(obj.get("billToCompany")) if obj.get("billToCompany") is not None else None,
            "billToContact": ContactReference.from_dict(obj.get("billToContact")) if obj.get("billToContact") is not None else None,
            "billToSite": SiteReference.from_dict(obj.get("billToSite")) if obj.get("billToSite") is not None else None,
            "billUnapprovedTimeAndExpense": obj.get("billUnapprovedTimeAndExpense"),
            "billingAmount": obj.get("billingAmount"),
            "billingAttention": obj.get("billingAttention"),
            "billingMethod": obj.get("billingMethod"),
            "billingRateType": obj.get("billingRateType"),
            "billingStartDate": obj.get("billingStartDate"),
            "billingTerms": BillingTermsReference.from_dict(obj.get("billingTerms")) if obj.get("billingTerms") is not None else None,
            "board": ProjectBoardReference.from_dict(obj.get("board")) if obj.get("board") is not None else None,
            "budgetAnalysis": obj.get("budgetAnalysis"),
            "budgetFlag": obj.get("budgetFlag"),
            "budgetHours": obj.get("budgetHours"),
            "closedFlag": obj.get("closedFlag"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "companyLocation": SystemLocationReference.from_dict(obj.get("companyLocation")) if obj.get("companyLocation") is not None else None,
            "contact": ContactReference.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "customerPO": obj.get("customerPO"),
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "description": obj.get("description"),
            "doNotDisplayInPortalFlag": obj.get("doNotDisplayInPortalFlag"),
            "downpayment": obj.get("downpayment"),
            "estimatedEnd": obj.get("estimatedEnd"),
            "estimatedExpenseCost": obj.get("estimatedExpenseCost"),
            "estimatedExpenseRevenue": obj.get("estimatedExpenseRevenue"),
            "estimatedHours": obj.get("estimatedHours"),
            "estimatedProductCost": obj.get("estimatedProductCost"),
            "estimatedProductRevenue": obj.get("estimatedProductRevenue"),
            "estimatedStart": obj.get("estimatedStart"),
            "estimatedTimeCost": obj.get("estimatedTimeCost"),
            "estimatedTimeRevenue": obj.get("estimatedTimeRevenue"),
            "expenseApprover": MemberReference.from_dict(obj.get("expenseApprover")) if obj.get("expenseApprover") is not None else None,
            "id": obj.get("id"),
            "includeDependenciesFlag": obj.get("includeDependenciesFlag"),
            "includeEstimatesFlag": obj.get("includeEstimatesFlag"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "manager": MemberReference.from_dict(obj.get("manager")) if obj.get("manager") is not None else None,
            "name": obj.get("name"),
            "opportunity": OpportunityReference.from_dict(obj.get("opportunity")) if obj.get("opportunity") is not None else None,
            "percentComplete": obj.get("percentComplete"),
            "poAmount": obj.get("poAmount"),
            "projectTemplateId": obj.get("projectTemplateId"),
            "restrictDownPaymentFlag": obj.get("restrictDownPaymentFlag"),
            "scheduledEnd": obj.get("scheduledEnd"),
            "scheduledHours": obj.get("scheduledHours"),
            "scheduledStart": obj.get("scheduledStart"),
            "shipToCompany": CompanyReference.from_dict(obj.get("shipToCompany")) if obj.get("shipToCompany") is not None else None,
            "shipToContact": ContactReference.from_dict(obj.get("shipToContact")) if obj.get("shipToContact") is not None else None,
            "shipToSite": SiteReference.from_dict(obj.get("shipToSite")) if obj.get("shipToSite") is not None else None,
            "site": SiteReference.from_dict(obj.get("site")) if obj.get("site") is not None else None,
            "status": ProjectStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "timeApprover": MemberReference.from_dict(obj.get("timeApprover")) if obj.get("timeApprover") is not None else None,
            "type": ProjectTypeReference.from_dict(obj.get("type")) if obj.get("type") is not None else None
        })
        return _obj


