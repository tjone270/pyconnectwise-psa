# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.agreement_reference import AgreementReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.service_status_reference import ServiceStatusReference
from connectwise_psa.models.ticket_reference import TicketReference
from connectwise_psa.models.work_role_reference import WorkRoleReference
from connectwise_psa.models.work_type_reference import WorkTypeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TicketStopwatch(BaseModel):
    """
    TicketStopwatch
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agreement: Optional[AgreementReference] = None
    billable_option: Optional[StrictStr] = Field(default=None, alias="billableOption")
    business_unit_id: Optional[StrictInt] = Field(default=None, alias="businessUnitId")
    date_entered: Optional[datetime] = Field(default=None, alias="dateEntered")
    email_notes_to_contact_flag: Optional[StrictBool] = Field(default=None, alias="emailNotesToContactFlag")
    email_notes_to_resources_flag: Optional[StrictBool] = Field(default=None, alias="emailNotesToResourcesFlag")
    end_time: Optional[datetime] = Field(default=None, alias="endTime")
    id: Optional[StrictInt] = None
    internal_notes: Optional[StrictStr] = Field(default=None, alias="internalNotes")
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    member: Optional[MemberReference] = None
    mobile_guid: Optional[StrictStr] = Field(default=None, alias="mobileGuid")
    notes: Optional[StrictStr] = Field(default=None, description=" Max length: 4000;")
    service_status: Optional[ServiceStatusReference] = Field(default=None, alias="serviceStatus")
    show_notes_in_discussion_flag: Optional[StrictBool] = Field(default=None, alias="showNotesInDiscussionFlag")
    show_notes_in_internal_flag: Optional[StrictBool] = Field(default=None, alias="showNotesInInternalFlag")
    show_notes_in_resolution_flag: Optional[StrictBool] = Field(default=None, alias="showNotesInResolutionFlag")
    start_time: Optional[datetime] = Field(default=None, alias="startTime")
    status: Optional[StrictStr]
    ticket: Optional[TicketReference] = None
    ticket_mobile_guid: Optional[StrictStr] = Field(default=None, alias="ticketMobileGuid")
    total_pause_time: Optional[StrictInt] = Field(default=None, alias="totalPauseTime")
    work_role: Optional[WorkRoleReference] = Field(default=None, alias="workRole")
    work_type: Optional[WorkTypeReference] = Field(default=None, alias="workType")
    __properties: ClassVar[List[str]] = ["_info", "agreement", "billableOption", "businessUnitId", "dateEntered", "emailNotesToContactFlag", "emailNotesToResourcesFlag", "endTime", "id", "internalNotes", "locationId", "member", "mobileGuid", "notes", "serviceStatus", "showNotesInDiscussionFlag", "showNotesInInternalFlag", "showNotesInResolutionFlag", "startTime", "status", "ticket", "ticketMobileGuid", "totalPauseTime", "workRole", "workType"]

    @field_validator('billable_option')
    def billable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Reset', 'Running', 'Paused', 'Stopped'):
            raise ValueError("must be one of enum values ('Reset', 'Running', 'Paused', 'Stopped')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TicketStopwatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement
        if self.agreement:
            _dict['agreement'] = self.agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_status
        if self.service_status:
            _dict['serviceStatus'] = self.service_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket
        if self.ticket:
            _dict['ticket'] = self.ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_role
        if self.work_role:
            _dict['workRole'] = self.work_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_type
        if self.work_type:
            _dict['workType'] = self.work_type.to_dict()
        # set to None if billable_option (nullable) is None
        # and model_fields_set contains the field
        if self.billable_option is None and "billable_option" in self.model_fields_set:
            _dict['billableOption'] = None

        # set to None if business_unit_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_unit_id is None and "business_unit_id" in self.model_fields_set:
            _dict['businessUnitId'] = None

        # set to None if email_notes_to_contact_flag (nullable) is None
        # and model_fields_set contains the field
        if self.email_notes_to_contact_flag is None and "email_notes_to_contact_flag" in self.model_fields_set:
            _dict['emailNotesToContactFlag'] = None

        # set to None if email_notes_to_resources_flag (nullable) is None
        # and model_fields_set contains the field
        if self.email_notes_to_resources_flag is None and "email_notes_to_resources_flag" in self.model_fields_set:
            _dict['emailNotesToResourcesFlag'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if mobile_guid (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_guid is None and "mobile_guid" in self.model_fields_set:
            _dict['mobileGuid'] = None

        # set to None if show_notes_in_discussion_flag (nullable) is None
        # and model_fields_set contains the field
        if self.show_notes_in_discussion_flag is None and "show_notes_in_discussion_flag" in self.model_fields_set:
            _dict['showNotesInDiscussionFlag'] = None

        # set to None if show_notes_in_internal_flag (nullable) is None
        # and model_fields_set contains the field
        if self.show_notes_in_internal_flag is None and "show_notes_in_internal_flag" in self.model_fields_set:
            _dict['showNotesInInternalFlag'] = None

        # set to None if show_notes_in_resolution_flag (nullable) is None
        # and model_fields_set contains the field
        if self.show_notes_in_resolution_flag is None and "show_notes_in_resolution_flag" in self.model_fields_set:
            _dict['showNotesInResolutionFlag'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if ticket_mobile_guid (nullable) is None
        # and model_fields_set contains the field
        if self.ticket_mobile_guid is None and "ticket_mobile_guid" in self.model_fields_set:
            _dict['ticketMobileGuid'] = None

        # set to None if total_pause_time (nullable) is None
        # and model_fields_set contains the field
        if self.total_pause_time is None and "total_pause_time" in self.model_fields_set:
            _dict['totalPauseTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TicketStopwatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TicketStopwatch) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agreement": AgreementReference.from_dict(obj.get("agreement")) if obj.get("agreement") is not None else None,
            "billableOption": obj.get("billableOption"),
            "businessUnitId": obj.get("businessUnitId"),
            "dateEntered": obj.get("dateEntered"),
            "emailNotesToContactFlag": obj.get("emailNotesToContactFlag"),
            "emailNotesToResourcesFlag": obj.get("emailNotesToResourcesFlag"),
            "endTime": obj.get("endTime"),
            "id": obj.get("id"),
            "internalNotes": obj.get("internalNotes"),
            "locationId": obj.get("locationId"),
            "member": MemberReference.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "mobileGuid": obj.get("mobileGuid"),
            "notes": obj.get("notes"),
            "serviceStatus": ServiceStatusReference.from_dict(obj.get("serviceStatus")) if obj.get("serviceStatus") is not None else None,
            "showNotesInDiscussionFlag": obj.get("showNotesInDiscussionFlag"),
            "showNotesInInternalFlag": obj.get("showNotesInInternalFlag"),
            "showNotesInResolutionFlag": obj.get("showNotesInResolutionFlag"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "ticket": TicketReference.from_dict(obj.get("ticket")) if obj.get("ticket") is not None else None,
            "ticketMobileGuid": obj.get("ticketMobileGuid"),
            "totalPauseTime": obj.get("totalPauseTime"),
            "workRole": WorkRoleReference.from_dict(obj.get("workRole")) if obj.get("workRole") is not None else None,
            "workType": WorkTypeReference.from_dict(obj.get("workType")) if obj.get("workType") is not None else None
        })
        return _obj


