# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.error_response_message import ErrorResponseMessage
from connectwise_psa.models.i_rest_identified_item import IRestIdentifiedItem
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BundleResult(BaseModel):
    """
    BundleResult
    """ # noqa: E501
    count: Optional[StrictInt] = None
    entities: Optional[List[IRestIdentifiedItem]] = None
    error: Optional[ErrorResponseMessage] = None
    resource_type: Optional[StrictStr] = Field(default=None, alias="resourceType")
    sequence_number: Optional[StrictInt] = Field(default=None, alias="sequenceNumber")
    status_code: Optional[StrictInt] = Field(default=None, alias="statusCode")
    success: Optional[StrictBool] = None
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["count", "entities", "error", "resourceType", "sequenceNumber", "statusCode", "success", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BundleResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item in self.entities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BundleResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in BundleResult) in the input: " + _key)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "entities": [IRestIdentifiedItem.from_dict(_item) for _item in obj.get("entities")] if obj.get("entities") is not None else None,
            "error": ErrorResponseMessage.from_dict(obj.get("error")) if obj.get("error") is not None else None,
            "resourceType": obj.get("resourceType"),
            "sequenceNumber": obj.get("sequenceNumber"),
            "statusCode": obj.get("statusCode"),
            "success": obj.get("success"),
            "version": obj.get("version")
        })
        return _obj


