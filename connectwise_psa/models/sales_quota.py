# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.product_category_reference import ProductCategoryReference
from connectwise_psa.models.product_sub_category_reference import ProductSubCategoryReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SalesQuota(BaseModel):
    """
    SalesQuota
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    april_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="aprilMargin")
    april_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="aprilRevenue")
    august_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="augustMargin")
    august_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="augustRevenue")
    category: Optional[ProductCategoryReference] = None
    currency: Optional[CurrencyReference] = None
    december_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="decemberMargin")
    december_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="decemberRevenue")
    department: Optional[SystemDepartmentReference] = None
    february_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="februaryMargin")
    february_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="februaryRevenue")
    forecast_year: Optional[StrictInt] = Field(default=None, alias="forecastYear")
    id: Optional[StrictInt] = None
    january_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="januaryMargin")
    january_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="januaryRevenue")
    july_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="julyMargin")
    july_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="julyRevenue")
    june_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="juneMargin")
    june_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="juneRevenue")
    location: Optional[SystemLocationReference] = None
    march_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="marchMargin")
    march_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="marchRevenue")
    may_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mayMargin")
    may_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mayRevenue")
    member: Optional[MemberReference] = None
    november_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="novemberMargin")
    november_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="novemberRevenue")
    october_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="octoberMargin")
    october_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="octoberRevenue")
    september_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="septemberMargin")
    september_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="septemberRevenue")
    sub_category: Optional[ProductSubCategoryReference] = Field(default=None, alias="subCategory")
    __properties: ClassVar[List[str]] = ["_info", "aprilMargin", "aprilRevenue", "augustMargin", "augustRevenue", "category", "currency", "decemberMargin", "decemberRevenue", "department", "februaryMargin", "februaryRevenue", "forecastYear", "id", "januaryMargin", "januaryRevenue", "julyMargin", "julyRevenue", "juneMargin", "juneRevenue", "location", "marchMargin", "marchRevenue", "mayMargin", "mayRevenue", "member", "novemberMargin", "novemberRevenue", "octoberMargin", "octoberRevenue", "septemberMargin", "septemberRevenue", "subCategory"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SalesQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_category
        if self.sub_category:
            _dict['subCategory'] = self.sub_category.to_dict()
        # set to None if april_margin (nullable) is None
        # and model_fields_set contains the field
        if self.april_margin is None and "april_margin" in self.model_fields_set:
            _dict['aprilMargin'] = None

        # set to None if april_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.april_revenue is None and "april_revenue" in self.model_fields_set:
            _dict['aprilRevenue'] = None

        # set to None if august_margin (nullable) is None
        # and model_fields_set contains the field
        if self.august_margin is None and "august_margin" in self.model_fields_set:
            _dict['augustMargin'] = None

        # set to None if august_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.august_revenue is None and "august_revenue" in self.model_fields_set:
            _dict['augustRevenue'] = None

        # set to None if december_margin (nullable) is None
        # and model_fields_set contains the field
        if self.december_margin is None and "december_margin" in self.model_fields_set:
            _dict['decemberMargin'] = None

        # set to None if december_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.december_revenue is None and "december_revenue" in self.model_fields_set:
            _dict['decemberRevenue'] = None

        # set to None if february_margin (nullable) is None
        # and model_fields_set contains the field
        if self.february_margin is None and "february_margin" in self.model_fields_set:
            _dict['februaryMargin'] = None

        # set to None if february_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.february_revenue is None and "february_revenue" in self.model_fields_set:
            _dict['februaryRevenue'] = None

        # set to None if forecast_year (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_year is None and "forecast_year" in self.model_fields_set:
            _dict['forecastYear'] = None

        # set to None if january_margin (nullable) is None
        # and model_fields_set contains the field
        if self.january_margin is None and "january_margin" in self.model_fields_set:
            _dict['januaryMargin'] = None

        # set to None if january_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.january_revenue is None and "january_revenue" in self.model_fields_set:
            _dict['januaryRevenue'] = None

        # set to None if july_margin (nullable) is None
        # and model_fields_set contains the field
        if self.july_margin is None and "july_margin" in self.model_fields_set:
            _dict['julyMargin'] = None

        # set to None if july_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.july_revenue is None and "july_revenue" in self.model_fields_set:
            _dict['julyRevenue'] = None

        # set to None if june_margin (nullable) is None
        # and model_fields_set contains the field
        if self.june_margin is None and "june_margin" in self.model_fields_set:
            _dict['juneMargin'] = None

        # set to None if june_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.june_revenue is None and "june_revenue" in self.model_fields_set:
            _dict['juneRevenue'] = None

        # set to None if march_margin (nullable) is None
        # and model_fields_set contains the field
        if self.march_margin is None and "march_margin" in self.model_fields_set:
            _dict['marchMargin'] = None

        # set to None if march_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.march_revenue is None and "march_revenue" in self.model_fields_set:
            _dict['marchRevenue'] = None

        # set to None if may_margin (nullable) is None
        # and model_fields_set contains the field
        if self.may_margin is None and "may_margin" in self.model_fields_set:
            _dict['mayMargin'] = None

        # set to None if may_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.may_revenue is None and "may_revenue" in self.model_fields_set:
            _dict['mayRevenue'] = None

        # set to None if november_margin (nullable) is None
        # and model_fields_set contains the field
        if self.november_margin is None and "november_margin" in self.model_fields_set:
            _dict['novemberMargin'] = None

        # set to None if november_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.november_revenue is None and "november_revenue" in self.model_fields_set:
            _dict['novemberRevenue'] = None

        # set to None if october_margin (nullable) is None
        # and model_fields_set contains the field
        if self.october_margin is None and "october_margin" in self.model_fields_set:
            _dict['octoberMargin'] = None

        # set to None if october_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.october_revenue is None and "october_revenue" in self.model_fields_set:
            _dict['octoberRevenue'] = None

        # set to None if september_margin (nullable) is None
        # and model_fields_set contains the field
        if self.september_margin is None and "september_margin" in self.model_fields_set:
            _dict['septemberMargin'] = None

        # set to None if september_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.september_revenue is None and "september_revenue" in self.model_fields_set:
            _dict['septemberRevenue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SalesQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SalesQuota) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "aprilMargin": obj.get("aprilMargin"),
            "aprilRevenue": obj.get("aprilRevenue"),
            "augustMargin": obj.get("augustMargin"),
            "augustRevenue": obj.get("augustRevenue"),
            "category": ProductCategoryReference.from_dict(obj.get("category")) if obj.get("category") is not None else None,
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "decemberMargin": obj.get("decemberMargin"),
            "decemberRevenue": obj.get("decemberRevenue"),
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "februaryMargin": obj.get("februaryMargin"),
            "februaryRevenue": obj.get("februaryRevenue"),
            "forecastYear": obj.get("forecastYear"),
            "id": obj.get("id"),
            "januaryMargin": obj.get("januaryMargin"),
            "januaryRevenue": obj.get("januaryRevenue"),
            "julyMargin": obj.get("julyMargin"),
            "julyRevenue": obj.get("julyRevenue"),
            "juneMargin": obj.get("juneMargin"),
            "juneRevenue": obj.get("juneRevenue"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "marchMargin": obj.get("marchMargin"),
            "marchRevenue": obj.get("marchRevenue"),
            "mayMargin": obj.get("mayMargin"),
            "mayRevenue": obj.get("mayRevenue"),
            "member": MemberReference.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "novemberMargin": obj.get("novemberMargin"),
            "novemberRevenue": obj.get("novemberRevenue"),
            "octoberMargin": obj.get("octoberMargin"),
            "octoberRevenue": obj.get("octoberRevenue"),
            "septemberMargin": obj.get("septemberMargin"),
            "septemberRevenue": obj.get("septemberRevenue"),
            "subCategory": ProductSubCategoryReference.from_dict(obj.get("subCategory")) if obj.get("subCategory") is not None else None
        })
        return _obj


