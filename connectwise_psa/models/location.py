# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.calendar_reference import CalendarReference
from connectwise_psa.models.corporate_structure_level_reference import CorporateStructureLevelReference
from connectwise_psa.models.country_reference import CountryReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.time_zone_setup_reference import TimeZoneSetupReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Location(BaseModel):
    """
    Location
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    calendar: Optional[CalendarReference] = None
    client_flag: Optional[StrictBool] = Field(default=None, alias="clientFlag")
    department_ids: Optional[List[StrictInt]] = Field(default=None, alias="departmentIds")
    id: Optional[StrictInt] = None
    location_flag: Optional[StrictBool] = Field(default=None, alias="locationFlag")
    manager: Optional[MemberReference] = None
    name: StrictStr = Field(description=" Max length: 50;")
    override_address_line1: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="overrideAddressLine1")
    override_address_line2: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="overrideAddressLine2")
    override_city: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="overrideCity")
    override_country: Optional[CountryReference] = Field(default=None, alias="overrideCountry")
    override_fax_number: Optional[StrictStr] = Field(default=None, description=" Max length: 15;", alias="overrideFaxNumber")
    override_phone_number: Optional[StrictStr] = Field(default=None, description=" Max length: 15;", alias="overridePhoneNumber")
    override_state: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="overrideState")
    override_zip: Optional[StrictStr] = Field(default=None, description=" Max length: 12;", alias="overrideZip")
    owa_url: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="owaUrl")
    owner_level_id: Optional[StrictInt] = Field(default=None, alias="ownerLevelId")
    payroll_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 10;", alias="payrollXref")
    reports_to: Optional[SystemLocationReference] = Field(default=None, alias="reportsTo")
    sales_rep: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="salesRep")
    structure_level: Optional[CorporateStructureLevelReference] = Field(default=None, alias="structureLevel")
    time_zone_setup: Optional[TimeZoneSetupReference] = Field(default=None, alias="timeZoneSetup")
    work_role_ids: Optional[List[StrictInt]] = Field(default=None, alias="workRoleIds")
    __properties: ClassVar[List[str]] = ["_info", "calendar", "clientFlag", "departmentIds", "id", "locationFlag", "manager", "name", "overrideAddressLine1", "overrideAddressLine2", "overrideCity", "overrideCountry", "overrideFaxNumber", "overridePhoneNumber", "overrideState", "overrideZip", "owaUrl", "ownerLevelId", "payrollXref", "reportsTo", "salesRep", "structureLevel", "timeZoneSetup", "workRoleIds"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calendar
        if self.calendar:
            _dict['calendar'] = self.calendar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manager
        if self.manager:
            _dict['manager'] = self.manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of override_country
        if self.override_country:
            _dict['overrideCountry'] = self.override_country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reports_to
        if self.reports_to:
            _dict['reportsTo'] = self.reports_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of structure_level
        if self.structure_level:
            _dict['structureLevel'] = self.structure_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_zone_setup
        if self.time_zone_setup:
            _dict['timeZoneSetup'] = self.time_zone_setup.to_dict()
        # set to None if client_flag (nullable) is None
        # and model_fields_set contains the field
        if self.client_flag is None and "client_flag" in self.model_fields_set:
            _dict['clientFlag'] = None

        # set to None if location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.location_flag is None and "location_flag" in self.model_fields_set:
            _dict['locationFlag'] = None

        # set to None if owner_level_id (nullable) is None
        # and model_fields_set contains the field
        if self.owner_level_id is None and "owner_level_id" in self.model_fields_set:
            _dict['ownerLevelId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Location) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "calendar": CalendarReference.from_dict(obj.get("calendar")) if obj.get("calendar") is not None else None,
            "clientFlag": obj.get("clientFlag"),
            "departmentIds": obj.get("departmentIds"),
            "id": obj.get("id"),
            "locationFlag": obj.get("locationFlag"),
            "manager": MemberReference.from_dict(obj.get("manager")) if obj.get("manager") is not None else None,
            "name": obj.get("name"),
            "overrideAddressLine1": obj.get("overrideAddressLine1"),
            "overrideAddressLine2": obj.get("overrideAddressLine2"),
            "overrideCity": obj.get("overrideCity"),
            "overrideCountry": CountryReference.from_dict(obj.get("overrideCountry")) if obj.get("overrideCountry") is not None else None,
            "overrideFaxNumber": obj.get("overrideFaxNumber"),
            "overridePhoneNumber": obj.get("overridePhoneNumber"),
            "overrideState": obj.get("overrideState"),
            "overrideZip": obj.get("overrideZip"),
            "owaUrl": obj.get("owaUrl"),
            "ownerLevelId": obj.get("ownerLevelId"),
            "payrollXref": obj.get("payrollXref"),
            "reportsTo": SystemLocationReference.from_dict(obj.get("reportsTo")) if obj.get("reportsTo") is not None else None,
            "salesRep": obj.get("salesRep"),
            "structureLevel": CorporateStructureLevelReference.from_dict(obj.get("structureLevel")) if obj.get("structureLevel") is not None else None,
            "timeZoneSetup": TimeZoneSetupReference.from_dict(obj.get("timeZoneSetup")) if obj.get("timeZoneSetup") is not None else None,
            "workRoleIds": obj.get("workRoleIds")
        })
        return _obj


