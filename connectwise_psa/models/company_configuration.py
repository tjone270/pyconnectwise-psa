# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.configuration_question import ConfigurationQuestion
from connectwise_psa.models.configuration_status_reference import ConfigurationStatusReference
from connectwise_psa.models.configuration_type_reference import ConfigurationTypeReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.manufacturer_reference import ManufacturerReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.sla_reference import SLAReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompanyConfiguration(BaseModel):
    """
    CompanyConfiguration
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    active_flag: Optional[StrictBool] = Field(default=None, alias="activeFlag")
    backup_billable_space_gb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="backupBillableSpaceGb")
    backup_failed: Optional[StrictInt] = Field(default=None, alias="backupFailed")
    backup_incomplete: Optional[StrictInt] = Field(default=None, alias="backupIncomplete")
    backup_month: Optional[StrictInt] = Field(default=None, alias="backupMonth")
    backup_protected_device_list: Optional[StrictStr] = Field(default=None, alias="backupProtectedDeviceList")
    backup_restores: Optional[StrictInt] = Field(default=None, alias="backupRestores")
    backup_server_name: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="backupServerName")
    backup_successes: Optional[StrictInt] = Field(default=None, alias="backupSuccesses")
    backup_year: Optional[StrictInt] = Field(default=None, alias="backupYear")
    bill_flag: Optional[StrictBool] = Field(default=None, alias="billFlag")
    business_unit_id: Optional[StrictInt] = Field(default=None, alias="businessUnitId")
    company: Optional[CompanyReference] = None
    company_location_id: Optional[StrictInt] = Field(default=None, alias="companyLocationId")
    contact: Optional[ContactReference] = None
    cpu_speed: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="cpuSpeed")
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    default_gateway: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="defaultGateway")
    department: Optional[SystemDepartmentReference] = None
    device_identifier: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="deviceIdentifier")
    display_vendor_flag: Optional[StrictBool] = Field(default=None, alias="displayVendorFlag")
    id: Optional[StrictInt] = None
    installation_date: Optional[datetime] = Field(default=None, alias="installationDate")
    installed_by: Optional[MemberReference] = Field(default=None, alias="installedBy")
    ip_address: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="ipAddress")
    last_backup_date: Optional[datetime] = Field(default=None, alias="lastBackupDate")
    last_login_name: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="lastLoginName")
    local_hard_drives: Optional[StrictStr] = Field(default=None, alias="localHardDrives")
    location: Optional[SystemLocationReference] = None
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    mac_address: Optional[StrictStr] = Field(default=None, description=" Max length: 25;", alias="macAddress")
    management_link: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="managementLink")
    manufacturer: Optional[ManufacturerReference] = None
    manufacturer_part_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="manufacturerPartNumber")
    mobile_guid: Optional[StrictStr] = Field(default=None, alias="mobileGuid")
    model_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="modelNumber")
    name: StrictStr = Field(description=" Max length: 100;")
    needs_renewal_flag: Optional[StrictBool] = Field(default=None, alias="needsRenewalFlag")
    notes: Optional[StrictStr] = None
    os_info: Optional[StrictStr] = Field(default=None, description=" Max length: 250;", alias="osInfo")
    os_type: Optional[StrictStr] = Field(default=None, description=" Max length: 250;", alias="osType")
    parent_configuration_id: Optional[StrictInt] = Field(default=None, alias="parentConfigurationId")
    purchase_date: Optional[datetime] = Field(default=None, alias="purchaseDate")
    questions: Optional[List[ConfigurationQuestion]] = None
    ram: Optional[StrictStr] = Field(default=None, description=" Max length: 25;")
    remote_link: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="remoteLink")
    serial_number: Optional[StrictStr] = Field(default=None, description=" Max length: 250;", alias="serialNumber")
    show_automate_flag: Optional[StrictBool] = Field(default=None, alias="showAutomateFlag")
    show_remote_flag: Optional[StrictBool] = Field(default=None, alias="showRemoteFlag")
    site: Optional[SiteReference] = None
    sla: Optional[SLAReference] = None
    status: Optional[ConfigurationStatusReference] = None
    tag_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="tagNumber")
    type: Optional[ConfigurationTypeReference] = None
    vendor: Optional[CompanyReference] = None
    vendor_notes: Optional[StrictStr] = Field(default=None, alias="vendorNotes")
    warranty_expiration_date: Optional[datetime] = Field(default=None, alias="warrantyExpirationDate")
    __properties: ClassVar[List[str]] = ["_info", "activeFlag", "backupBillableSpaceGb", "backupFailed", "backupIncomplete", "backupMonth", "backupProtectedDeviceList", "backupRestores", "backupServerName", "backupSuccesses", "backupYear", "billFlag", "businessUnitId", "company", "companyLocationId", "contact", "cpuSpeed", "customFields", "defaultGateway", "department", "deviceIdentifier", "displayVendorFlag", "id", "installationDate", "installedBy", "ipAddress", "lastBackupDate", "lastLoginName", "localHardDrives", "location", "locationId", "macAddress", "managementLink", "manufacturer", "manufacturerPartNumber", "mobileGuid", "modelNumber", "name", "needsRenewalFlag", "notes", "osInfo", "osType", "parentConfigurationId", "purchaseDate", "questions", "ram", "remoteLink", "serialNumber", "showAutomateFlag", "showRemoteFlag", "site", "sla", "status", "tagNumber", "type", "vendor", "vendorNotes", "warrantyExpirationDate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompanyConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of installed_by
        if self.installed_by:
            _dict['installedBy'] = self.installed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manufacturer
        if self.manufacturer:
            _dict['manufacturer'] = self.manufacturer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in questions (list)
        _items = []
        if self.questions:
            for _item in self.questions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['questions'] = _items
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sla
        if self.sla:
            _dict['sla'] = self.sla.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # set to None if active_flag (nullable) is None
        # and model_fields_set contains the field
        if self.active_flag is None and "active_flag" in self.model_fields_set:
            _dict['activeFlag'] = None

        # set to None if backup_billable_space_gb (nullable) is None
        # and model_fields_set contains the field
        if self.backup_billable_space_gb is None and "backup_billable_space_gb" in self.model_fields_set:
            _dict['backupBillableSpaceGb'] = None

        # set to None if backup_failed (nullable) is None
        # and model_fields_set contains the field
        if self.backup_failed is None and "backup_failed" in self.model_fields_set:
            _dict['backupFailed'] = None

        # set to None if backup_incomplete (nullable) is None
        # and model_fields_set contains the field
        if self.backup_incomplete is None and "backup_incomplete" in self.model_fields_set:
            _dict['backupIncomplete'] = None

        # set to None if backup_month (nullable) is None
        # and model_fields_set contains the field
        if self.backup_month is None and "backup_month" in self.model_fields_set:
            _dict['backupMonth'] = None

        # set to None if backup_restores (nullable) is None
        # and model_fields_set contains the field
        if self.backup_restores is None and "backup_restores" in self.model_fields_set:
            _dict['backupRestores'] = None

        # set to None if backup_successes (nullable) is None
        # and model_fields_set contains the field
        if self.backup_successes is None and "backup_successes" in self.model_fields_set:
            _dict['backupSuccesses'] = None

        # set to None if backup_year (nullable) is None
        # and model_fields_set contains the field
        if self.backup_year is None and "backup_year" in self.model_fields_set:
            _dict['backupYear'] = None

        # set to None if bill_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_flag is None and "bill_flag" in self.model_fields_set:
            _dict['billFlag'] = None

        # set to None if business_unit_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_unit_id is None and "business_unit_id" in self.model_fields_set:
            _dict['businessUnitId'] = None

        # set to None if company_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_location_id is None and "company_location_id" in self.model_fields_set:
            _dict['companyLocationId'] = None

        # set to None if display_vendor_flag (nullable) is None
        # and model_fields_set contains the field
        if self.display_vendor_flag is None and "display_vendor_flag" in self.model_fields_set:
            _dict['displayVendorFlag'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if mobile_guid (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_guid is None and "mobile_guid" in self.model_fields_set:
            _dict['mobileGuid'] = None

        # set to None if needs_renewal_flag (nullable) is None
        # and model_fields_set contains the field
        if self.needs_renewal_flag is None and "needs_renewal_flag" in self.model_fields_set:
            _dict['needsRenewalFlag'] = None

        # set to None if parent_configuration_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_configuration_id is None and "parent_configuration_id" in self.model_fields_set:
            _dict['parentConfigurationId'] = None

        # set to None if show_automate_flag (nullable) is None
        # and model_fields_set contains the field
        if self.show_automate_flag is None and "show_automate_flag" in self.model_fields_set:
            _dict['showAutomateFlag'] = None

        # set to None if show_remote_flag (nullable) is None
        # and model_fields_set contains the field
        if self.show_remote_flag is None and "show_remote_flag" in self.model_fields_set:
            _dict['showRemoteFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompanyConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CompanyConfiguration) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "activeFlag": obj.get("activeFlag"),
            "backupBillableSpaceGb": obj.get("backupBillableSpaceGb"),
            "backupFailed": obj.get("backupFailed"),
            "backupIncomplete": obj.get("backupIncomplete"),
            "backupMonth": obj.get("backupMonth"),
            "backupProtectedDeviceList": obj.get("backupProtectedDeviceList"),
            "backupRestores": obj.get("backupRestores"),
            "backupServerName": obj.get("backupServerName"),
            "backupSuccesses": obj.get("backupSuccesses"),
            "backupYear": obj.get("backupYear"),
            "billFlag": obj.get("billFlag"),
            "businessUnitId": obj.get("businessUnitId"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "companyLocationId": obj.get("companyLocationId"),
            "contact": ContactReference.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "cpuSpeed": obj.get("cpuSpeed"),
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "defaultGateway": obj.get("defaultGateway"),
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "deviceIdentifier": obj.get("deviceIdentifier"),
            "displayVendorFlag": obj.get("displayVendorFlag"),
            "id": obj.get("id"),
            "installationDate": obj.get("installationDate"),
            "installedBy": MemberReference.from_dict(obj.get("installedBy")) if obj.get("installedBy") is not None else None,
            "ipAddress": obj.get("ipAddress"),
            "lastBackupDate": obj.get("lastBackupDate"),
            "lastLoginName": obj.get("lastLoginName"),
            "localHardDrives": obj.get("localHardDrives"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "locationId": obj.get("locationId"),
            "macAddress": obj.get("macAddress"),
            "managementLink": obj.get("managementLink"),
            "manufacturer": ManufacturerReference.from_dict(obj.get("manufacturer")) if obj.get("manufacturer") is not None else None,
            "manufacturerPartNumber": obj.get("manufacturerPartNumber"),
            "mobileGuid": obj.get("mobileGuid"),
            "modelNumber": obj.get("modelNumber"),
            "name": obj.get("name"),
            "needsRenewalFlag": obj.get("needsRenewalFlag"),
            "notes": obj.get("notes"),
            "osInfo": obj.get("osInfo"),
            "osType": obj.get("osType"),
            "parentConfigurationId": obj.get("parentConfigurationId"),
            "purchaseDate": obj.get("purchaseDate"),
            "questions": [ConfigurationQuestion.from_dict(_item) for _item in obj.get("questions")] if obj.get("questions") is not None else None,
            "ram": obj.get("ram"),
            "remoteLink": obj.get("remoteLink"),
            "serialNumber": obj.get("serialNumber"),
            "showAutomateFlag": obj.get("showAutomateFlag"),
            "showRemoteFlag": obj.get("showRemoteFlag"),
            "site": SiteReference.from_dict(obj.get("site")) if obj.get("site") is not None else None,
            "sla": SLAReference.from_dict(obj.get("sla")) if obj.get("sla") is not None else None,
            "status": ConfigurationStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "tagNumber": obj.get("tagNumber"),
            "type": ConfigurationTypeReference.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "vendor": CompanyReference.from_dict(obj.get("vendor")) if obj.get("vendor") is not None else None,
            "vendorNotes": obj.get("vendorNotes"),
            "warrantyExpirationDate": obj.get("warrantyExpirationDate")
        })
        return _obj


