# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HistoryEntry(BaseModel):
    """
    HistoryEntry
    """ # noqa: E501
    var_date: Optional[datetime] = Field(default=None, alias="date")
    history_type: Optional[StrictStr] = Field(default=None, alias="historyType")
    member_id: Optional[StrictStr] = Field(default=None, alias="memberID")
    member_name: Optional[StrictStr] = Field(default=None, alias="memberName")
    time_zone_offset_display: Optional[StrictStr] = Field(default=None, alias="timeZoneOffsetDisplay")
    __properties: ClassVar[List[str]] = ["date", "historyType", "memberID", "memberName", "timeZoneOffsetDisplay"]

    @field_validator('history_type')
    def history_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LastLogin', 'Closed', 'Cancelled', 'Acknowledged', 'Updated', 'Created', 'Assigned'):
            raise ValueError("must be one of enum values ('LastLogin', 'Closed', 'Cancelled', 'Acknowledged', 'Updated', 'Created', 'Assigned')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HistoryEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HistoryEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in HistoryEntry) in the input: " + _key)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "historyType": obj.get("historyType"),
            "memberID": obj.get("memberID"),
            "memberName": obj.get("memberName"),
            "timeZoneOffsetDisplay": obj.get("timeZoneOffsetDisplay")
        })
        return _obj


