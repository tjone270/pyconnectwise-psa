# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AgreementRecap(BaseModel):
    """
    AgreementRecap
    """ # noqa: E501
    adjustment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="adjustmentAmount")
    agreement_status: Optional[StrictStr] = Field(default=None, alias="agreementStatus")
    available_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="availableAmount")
    company_name: Optional[StrictStr] = Field(default=None, alias="companyName")
    id: Optional[StrictInt] = None
    is_unlimited: Optional[StrictStr] = Field(default=None, alias="isUnlimited")
    last_invoice_amount: Optional[StrictStr] = Field(default=None, alias="lastInvoiceAmount")
    last_invoice_date: Optional[StrictStr] = Field(default=None, alias="lastInvoiceDate")
    last_invoice_number: Optional[StrictStr] = Field(default=None, alias="lastInvoiceNumber")
    name: Optional[StrictStr] = None
    next_invoice_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="nextInvoiceAmount")
    next_invoice_date: Optional[StrictStr] = Field(default=None, alias="nextInvoiceDate")
    overrun_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="overrunAmount")
    remaining_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="remainingAmount")
    starting_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="startingAmount")
    unbilled_overage_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unbilledOverageAmount")
    unbilled_periods: Optional[StrictInt] = Field(default=None, alias="unbilledPeriods")
    used_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="usedAmount")
    __properties: ClassVar[List[str]] = ["adjustmentAmount", "agreementStatus", "availableAmount", "companyName", "id", "isUnlimited", "lastInvoiceAmount", "lastInvoiceDate", "lastInvoiceNumber", "name", "nextInvoiceAmount", "nextInvoiceDate", "overrunAmount", "remainingAmount", "startingAmount", "unbilledOverageAmount", "unbilledPeriods", "usedAmount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AgreementRecap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AgreementRecap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in AgreementRecap) in the input: " + _key)

        _obj = cls.model_validate({
            "adjustmentAmount": obj.get("adjustmentAmount"),
            "agreementStatus": obj.get("agreementStatus"),
            "availableAmount": obj.get("availableAmount"),
            "companyName": obj.get("companyName"),
            "id": obj.get("id"),
            "isUnlimited": obj.get("isUnlimited"),
            "lastInvoiceAmount": obj.get("lastInvoiceAmount"),
            "lastInvoiceDate": obj.get("lastInvoiceDate"),
            "lastInvoiceNumber": obj.get("lastInvoiceNumber"),
            "name": obj.get("name"),
            "nextInvoiceAmount": obj.get("nextInvoiceAmount"),
            "nextInvoiceDate": obj.get("nextInvoiceDate"),
            "overrunAmount": obj.get("overrunAmount"),
            "remainingAmount": obj.get("remainingAmount"),
            "startingAmount": obj.get("startingAmount"),
            "unbilledOverageAmount": obj.get("unbilledOverageAmount"),
            "unbilledPeriods": obj.get("unbilledPeriods"),
            "usedAmount": obj.get("usedAmount")
        })
        return _obj


