# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.invoice_grouping_reference import InvoiceGroupingReference
from connectwise_psa.models.iv_item_reference import IvItemReference
from connectwise_psa.models.opportunity_reference import OpportunityReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Addition(BaseModel):
    """
    Addition
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agreement_id: Optional[StrictInt] = Field(default=None, alias="agreementId")
    agreement_status: Optional[StrictStr] = Field(default=None, alias="agreementStatus")
    bill_customer: Optional[StrictStr] = Field(alias="billCustomer")
    billed_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="billedQuantity")
    cancelled_date: Optional[datetime] = Field(default=None, alias="cancelledDate")
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    description: Optional[StrictStr] = None
    effective_date: Optional[datetime] = Field(default=None, alias="effectiveDate")
    ext_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="extCost")
    ext_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="extPrice")
    extended_prorate_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="extendedProrateCost")
    extended_prorate_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="extendedProratePrice")
    id: Optional[StrictInt] = None
    invoice_description: Optional[StrictStr] = Field(default=None, description=" Max length: 6000;", alias="invoiceDescription")
    invoice_grouping: Optional[InvoiceGroupingReference] = Field(default=None, alias="invoiceGrouping")
    less_included: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lessIncluded")
    margin: Optional[Union[StrictFloat, StrictInt]] = None
    opportunity: Optional[OpportunityReference] = None
    product: Optional[IvItemReference] = None
    prorate_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="prorateCost")
    prorate_current_period_flag: Optional[StrictBool] = Field(default=None, alias="prorateCurrentPeriodFlag")
    prorate_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="proratePrice")
    purchase_item_flag: Optional[StrictBool] = Field(default=None, alias="purchaseItemFlag")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    sequence_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sequenceNumber")
    serial_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="serialNumber")
    special_order_flag: Optional[StrictBool] = Field(default=None, alias="specialOrderFlag")
    taxable_flag: Optional[StrictBool] = Field(default=None, alias="taxableFlag")
    unit_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unitCost")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unitPrice")
    uom: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_info", "agreementId", "agreementStatus", "billCustomer", "billedQuantity", "cancelledDate", "customFields", "description", "effectiveDate", "extCost", "extPrice", "extendedProrateCost", "extendedProratePrice", "id", "invoiceDescription", "invoiceGrouping", "lessIncluded", "margin", "opportunity", "product", "prorateCost", "prorateCurrentPeriodFlag", "proratePrice", "purchaseItemFlag", "quantity", "sequenceNumber", "serialNumber", "specialOrderFlag", "taxableFlag", "unitCost", "unitPrice", "uom"]

    @field_validator('agreement_status')
    def agreement_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Active', 'Cancelled', 'Expired', 'Inactive'):
            raise ValueError("must be one of enum values ('Active', 'Cancelled', 'Expired', 'Inactive')")
        return value

    @field_validator('bill_customer')
    def bill_customer_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Addition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice_grouping
        if self.invoice_grouping:
            _dict['invoiceGrouping'] = self.invoice_grouping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opportunity
        if self.opportunity:
            _dict['opportunity'] = self.opportunity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # set to None if agreement_id (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_id is None and "agreement_id" in self.model_fields_set:
            _dict['agreementId'] = None

        # set to None if agreement_status (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_status is None and "agreement_status" in self.model_fields_set:
            _dict['agreementStatus'] = None

        # set to None if bill_customer (nullable) is None
        # and model_fields_set contains the field
        if self.bill_customer is None and "bill_customer" in self.model_fields_set:
            _dict['billCustomer'] = None

        # set to None if billed_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.billed_quantity is None and "billed_quantity" in self.model_fields_set:
            _dict['billedQuantity'] = None

        # set to None if ext_cost (nullable) is None
        # and model_fields_set contains the field
        if self.ext_cost is None and "ext_cost" in self.model_fields_set:
            _dict['extCost'] = None

        # set to None if ext_price (nullable) is None
        # and model_fields_set contains the field
        if self.ext_price is None and "ext_price" in self.model_fields_set:
            _dict['extPrice'] = None

        # set to None if extended_prorate_cost (nullable) is None
        # and model_fields_set contains the field
        if self.extended_prorate_cost is None and "extended_prorate_cost" in self.model_fields_set:
            _dict['extendedProrateCost'] = None

        # set to None if extended_prorate_price (nullable) is None
        # and model_fields_set contains the field
        if self.extended_prorate_price is None and "extended_prorate_price" in self.model_fields_set:
            _dict['extendedProratePrice'] = None

        # set to None if less_included (nullable) is None
        # and model_fields_set contains the field
        if self.less_included is None and "less_included" in self.model_fields_set:
            _dict['lessIncluded'] = None

        # set to None if margin (nullable) is None
        # and model_fields_set contains the field
        if self.margin is None and "margin" in self.model_fields_set:
            _dict['margin'] = None

        # set to None if prorate_cost (nullable) is None
        # and model_fields_set contains the field
        if self.prorate_cost is None and "prorate_cost" in self.model_fields_set:
            _dict['prorateCost'] = None

        # set to None if prorate_current_period_flag (nullable) is None
        # and model_fields_set contains the field
        if self.prorate_current_period_flag is None and "prorate_current_period_flag" in self.model_fields_set:
            _dict['prorateCurrentPeriodFlag'] = None

        # set to None if prorate_price (nullable) is None
        # and model_fields_set contains the field
        if self.prorate_price is None and "prorate_price" in self.model_fields_set:
            _dict['proratePrice'] = None

        # set to None if purchase_item_flag (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_item_flag is None and "purchase_item_flag" in self.model_fields_set:
            _dict['purchaseItemFlag'] = None

        # set to None if quantity (nullable) is None
        # and model_fields_set contains the field
        if self.quantity is None and "quantity" in self.model_fields_set:
            _dict['quantity'] = None

        # set to None if sequence_number (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_number is None and "sequence_number" in self.model_fields_set:
            _dict['sequenceNumber'] = None

        # set to None if special_order_flag (nullable) is None
        # and model_fields_set contains the field
        if self.special_order_flag is None and "special_order_flag" in self.model_fields_set:
            _dict['specialOrderFlag'] = None

        # set to None if taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_flag is None and "taxable_flag" in self.model_fields_set:
            _dict['taxableFlag'] = None

        # set to None if unit_cost (nullable) is None
        # and model_fields_set contains the field
        if self.unit_cost is None and "unit_cost" in self.model_fields_set:
            _dict['unitCost'] = None

        # set to None if unit_price (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price is None and "unit_price" in self.model_fields_set:
            _dict['unitPrice'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Addition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Addition) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agreementId": obj.get("agreementId"),
            "agreementStatus": obj.get("agreementStatus"),
            "billCustomer": obj.get("billCustomer"),
            "billedQuantity": obj.get("billedQuantity"),
            "cancelledDate": obj.get("cancelledDate"),
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "description": obj.get("description"),
            "effectiveDate": obj.get("effectiveDate"),
            "extCost": obj.get("extCost"),
            "extPrice": obj.get("extPrice"),
            "extendedProrateCost": obj.get("extendedProrateCost"),
            "extendedProratePrice": obj.get("extendedProratePrice"),
            "id": obj.get("id"),
            "invoiceDescription": obj.get("invoiceDescription"),
            "invoiceGrouping": InvoiceGroupingReference.from_dict(obj.get("invoiceGrouping")) if obj.get("invoiceGrouping") is not None else None,
            "lessIncluded": obj.get("lessIncluded"),
            "margin": obj.get("margin"),
            "opportunity": OpportunityReference.from_dict(obj.get("opportunity")) if obj.get("opportunity") is not None else None,
            "product": IvItemReference.from_dict(obj.get("product")) if obj.get("product") is not None else None,
            "prorateCost": obj.get("prorateCost"),
            "prorateCurrentPeriodFlag": obj.get("prorateCurrentPeriodFlag"),
            "proratePrice": obj.get("proratePrice"),
            "purchaseItemFlag": obj.get("purchaseItemFlag"),
            "quantity": obj.get("quantity"),
            "sequenceNumber": obj.get("sequenceNumber"),
            "serialNumber": obj.get("serialNumber"),
            "specialOrderFlag": obj.get("specialOrderFlag"),
            "taxableFlag": obj.get("taxableFlag"),
            "unitCost": obj.get("unitCost"),
            "unitPrice": obj.get("unitPrice"),
            "uom": obj.get("uom")
        })
        return _obj


