# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.billing_cycle_reference import BillingCycleReference
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.email_template_reference import EmailTemplateReference
from connectwise_psa.models.invoice_template_reference import InvoiceTemplateReference
from connectwise_psa.models.project_type_reference import ProjectTypeReference
from connectwise_psa.models.sla_reference import SLAReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.work_role_reference import WorkRoleReference
from connectwise_psa.models.work_type_reference import WorkTypeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AgreementType(BaseModel):
    """
    AgreementType
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    add_all_work_role_exclusions: Optional[StrictBool] = Field(default=None, alias="addAllWorkRoleExclusions")
    add_all_work_type_exclusions: Optional[StrictBool] = Field(default=None, alias="addAllWorkTypeExclusions")
    allow_overruns_flag: Optional[StrictBool] = Field(default=None, alias="allowOverrunsFlag")
    application_cycle: Optional[StrictStr] = Field(default=None, alias="applicationCycle")
    application_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="applicationLimit")
    application_units: Optional[StrictStr] = Field(default=None, alias="applicationUnits")
    application_unlimited_flag: Optional[StrictBool] = Field(default=None, alias="applicationUnlimitedFlag")
    auto_invoice_flag: Optional[StrictBool] = Field(default=None, alias="autoInvoiceFlag")
    bill_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="billAmount")
    bill_expenses: Optional[StrictStr] = Field(alias="billExpenses")
    bill_one_time_flag: Optional[StrictBool] = Field(default=None, alias="billOneTimeFlag")
    bill_products: Optional[StrictStr] = Field(alias="billProducts")
    bill_time: Optional[StrictStr] = Field(alias="billTime")
    billable_expense_invoice_flag: Optional[StrictBool] = Field(default=None, alias="billableExpenseInvoiceFlag")
    billable_product_invoice_flag: Optional[StrictBool] = Field(default=None, alias="billableProductInvoiceFlag")
    billable_time_invoice_flag: Optional[StrictBool] = Field(default=None, alias="billableTimeInvoiceFlag")
    billing_cycle: Optional[BillingCycleReference] = Field(default=None, alias="billingCycle")
    billing_terms: Optional[BillingTermsReference] = Field(default=None, alias="billingTerms")
    bottom_comment_flag: Optional[StrictBool] = Field(default=None, alias="bottomCommentFlag")
    carry_over_unused_flag: Optional[StrictBool] = Field(default=None, alias="carryOverUnusedFlag")
    charge_to_firm_flag: Optional[StrictBool] = Field(default=None, alias="chargeToFirmFlag")
    comp_hourly_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="compHourlyRate")
    comp_limit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="compLimitAmount")
    copy_work_roles_flag: Optional[StrictBool] = Field(default=None, alias="copyWorkRolesFlag")
    copy_work_types_flag: Optional[StrictBool] = Field(default=None, alias="copyWorkTypesFlag")
    cover_agreement_expense_flag: Optional[StrictBool] = Field(default=None, alias="coverAgreementExpenseFlag")
    cover_agreement_product_flag: Optional[StrictBool] = Field(default=None, alias="coverAgreementProductFlag")
    cover_agreement_time_flag: Optional[StrictBool] = Field(default=None, alias="coverAgreementTimeFlag")
    cover_sales_tax_flag: Optional[StrictBool] = Field(default=None, alias="coverSalesTaxFlag")
    default_flag: Optional[StrictBool] = Field(default=None, alias="defaultFlag")
    department: Optional[SystemDepartmentReference] = None
    email_template: Optional[EmailTemplateReference] = Field(default=None, alias="emailTemplate")
    employee_comp_not_exceed: Optional[StrictStr] = Field(alias="employeeCompNotExceed")
    employee_comp_rate: Optional[StrictStr] = Field(alias="employeeCompRate")
    exclusion_work_role_ids: Optional[List[StrictInt]] = Field(default=None, alias="exclusionWorkRoleIds")
    exclusion_work_type_ids: Optional[List[StrictInt]] = Field(default=None, alias="exclusionWorkTypeIds")
    expire_when_zero: Optional[StrictBool] = Field(default=None, alias="expireWhenZero")
    expired_days: Optional[StrictInt] = Field(default=None, alias="expiredDays")
    id: Optional[StrictInt] = None
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    integration_x_ref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="integrationXRef")
    invoice_description: Optional[StrictStr] = Field(default=None, description=" Max length: 4000;", alias="invoiceDescription")
    invoice_pre_suffix: Optional[StrictStr] = Field(default=None, description=" Max length: 5;", alias="invoicePreSuffix")
    invoice_prorated_additions_flag: Optional[StrictBool] = Field(default=None, alias="invoiceProratedAdditionsFlag")
    invoice_template: Optional[InvoiceTemplateReference] = Field(default=None, alias="invoiceTemplate")
    invoicing_cycle: Optional[StrictStr] = Field(alias="invoicingCycle")
    limit: Optional[StrictInt] = None
    location: Optional[SystemLocationReference] = None
    name: StrictStr = Field(description=" Max length: 50;")
    one_time_flag: Optional[StrictBool] = Field(default=None, alias="oneTimeFlag")
    pre_payment_flag: Optional[StrictBool] = Field(default=None, alias="prePaymentFlag")
    prefix_suffix_option: Optional[StrictStr] = Field(default=None, alias="prefixSuffixOption")
    project_type: Optional[ProjectTypeReference] = Field(default=None, alias="projectType")
    prorate_flag: Optional[StrictBool] = Field(default=None, alias="prorateFlag")
    remove_all_work_role_exclusions: Optional[StrictBool] = Field(default=None, alias="removeAllWorkRoleExclusions")
    remove_all_work_type_exclusions: Optional[StrictBool] = Field(default=None, alias="removeAllWorkTypeExclusions")
    restrict_department_flag: Optional[StrictBool] = Field(default=None, alias="restrictDepartmentFlag")
    restrict_down_payment_flag: Optional[StrictBool] = Field(default=None, alias="restrictDownPaymentFlag")
    restrict_location_flag: Optional[StrictBool] = Field(default=None, alias="restrictLocationFlag")
    sla: Optional[SLAReference] = None
    taxable_flag: Optional[StrictBool] = Field(default=None, alias="taxableFlag")
    top_comment_flag: Optional[StrictBool] = Field(default=None, alias="topCommentFlag")
    work_role: Optional[WorkRoleReference] = Field(default=None, alias="workRole")
    work_type: Optional[WorkTypeReference] = Field(default=None, alias="workType")
    __properties: ClassVar[List[str]] = ["_info", "addAllWorkRoleExclusions", "addAllWorkTypeExclusions", "allowOverrunsFlag", "applicationCycle", "applicationLimit", "applicationUnits", "applicationUnlimitedFlag", "autoInvoiceFlag", "billAmount", "billExpenses", "billOneTimeFlag", "billProducts", "billTime", "billableExpenseInvoiceFlag", "billableProductInvoiceFlag", "billableTimeInvoiceFlag", "billingCycle", "billingTerms", "bottomCommentFlag", "carryOverUnusedFlag", "chargeToFirmFlag", "compHourlyRate", "compLimitAmount", "copyWorkRolesFlag", "copyWorkTypesFlag", "coverAgreementExpenseFlag", "coverAgreementProductFlag", "coverAgreementTimeFlag", "coverSalesTaxFlag", "defaultFlag", "department", "emailTemplate", "employeeCompNotExceed", "employeeCompRate", "exclusionWorkRoleIds", "exclusionWorkTypeIds", "expireWhenZero", "expiredDays", "id", "inactiveFlag", "integrationXRef", "invoiceDescription", "invoicePreSuffix", "invoiceProratedAdditionsFlag", "invoiceTemplate", "invoicingCycle", "limit", "location", "name", "oneTimeFlag", "prePaymentFlag", "prefixSuffixOption", "projectType", "prorateFlag", "removeAllWorkRoleExclusions", "removeAllWorkTypeExclusions", "restrictDepartmentFlag", "restrictDownPaymentFlag", "restrictLocationFlag", "sla", "taxableFlag", "topCommentFlag", "workRole", "workType"]

    @field_validator('application_cycle')
    def application_cycle_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Contract2Weeks', 'Contract4Weeks', 'ContractYear', 'CalendarMonth', 'CalendarQuarter', 'CalendarWeek', 'ContractQuarter', 'CalendarYear'):
            raise ValueError("must be one of enum values ('Contract2Weeks', 'Contract4Weeks', 'ContractYear', 'CalendarMonth', 'CalendarQuarter', 'CalendarWeek', 'ContractQuarter', 'CalendarYear')")
        return value

    @field_validator('application_units')
    def application_units_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Amount', 'Hours', 'Incidents'):
            raise ValueError("must be one of enum values ('Amount', 'Hours', 'Incidents')")
        return value

    @field_validator('bill_expenses')
    def bill_expenses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('bill_products')
    def bill_products_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('bill_time')
    def bill_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('employee_comp_not_exceed')
    def employee_comp_not_exceed_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billing', 'Amount', 'Percent'):
            raise ValueError("must be one of enum values ('Billing', 'Amount', 'Percent')")
        return value

    @field_validator('employee_comp_rate')
    def employee_comp_rate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Actual', 'Hourly'):
            raise ValueError("must be one of enum values ('Actual', 'Hourly')")
        return value

    @field_validator('invoicing_cycle')
    def invoicing_cycle_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ContractYear', 'CalendarYear'):
            raise ValueError("must be one of enum values ('ContractYear', 'CalendarYear')")
        return value

    @field_validator('prefix_suffix_option')
    def prefix_suffix_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Prefix', 'Suffix'):
            raise ValueError("must be one of enum values ('Prefix', 'Suffix')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AgreementType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_cycle
        if self.billing_cycle:
            _dict['billingCycle'] = self.billing_cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_terms
        if self.billing_terms:
            _dict['billingTerms'] = self.billing_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_template
        if self.email_template:
            _dict['emailTemplate'] = self.email_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_template
        if self.invoice_template:
            _dict['invoiceTemplate'] = self.invoice_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_type
        if self.project_type:
            _dict['projectType'] = self.project_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sla
        if self.sla:
            _dict['sla'] = self.sla.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_role
        if self.work_role:
            _dict['workRole'] = self.work_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_type
        if self.work_type:
            _dict['workType'] = self.work_type.to_dict()
        # set to None if add_all_work_role_exclusions (nullable) is None
        # and model_fields_set contains the field
        if self.add_all_work_role_exclusions is None and "add_all_work_role_exclusions" in self.model_fields_set:
            _dict['addAllWorkRoleExclusions'] = None

        # set to None if add_all_work_type_exclusions (nullable) is None
        # and model_fields_set contains the field
        if self.add_all_work_type_exclusions is None and "add_all_work_type_exclusions" in self.model_fields_set:
            _dict['addAllWorkTypeExclusions'] = None

        # set to None if allow_overruns_flag (nullable) is None
        # and model_fields_set contains the field
        if self.allow_overruns_flag is None and "allow_overruns_flag" in self.model_fields_set:
            _dict['allowOverrunsFlag'] = None

        # set to None if application_cycle (nullable) is None
        # and model_fields_set contains the field
        if self.application_cycle is None and "application_cycle" in self.model_fields_set:
            _dict['applicationCycle'] = None

        # set to None if application_limit (nullable) is None
        # and model_fields_set contains the field
        if self.application_limit is None and "application_limit" in self.model_fields_set:
            _dict['applicationLimit'] = None

        # set to None if application_units (nullable) is None
        # and model_fields_set contains the field
        if self.application_units is None and "application_units" in self.model_fields_set:
            _dict['applicationUnits'] = None

        # set to None if application_unlimited_flag (nullable) is None
        # and model_fields_set contains the field
        if self.application_unlimited_flag is None and "application_unlimited_flag" in self.model_fields_set:
            _dict['applicationUnlimitedFlag'] = None

        # set to None if auto_invoice_flag (nullable) is None
        # and model_fields_set contains the field
        if self.auto_invoice_flag is None and "auto_invoice_flag" in self.model_fields_set:
            _dict['autoInvoiceFlag'] = None

        # set to None if bill_amount (nullable) is None
        # and model_fields_set contains the field
        if self.bill_amount is None and "bill_amount" in self.model_fields_set:
            _dict['billAmount'] = None

        # set to None if bill_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.bill_expenses is None and "bill_expenses" in self.model_fields_set:
            _dict['billExpenses'] = None

        # set to None if bill_one_time_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_one_time_flag is None and "bill_one_time_flag" in self.model_fields_set:
            _dict['billOneTimeFlag'] = None

        # set to None if bill_products (nullable) is None
        # and model_fields_set contains the field
        if self.bill_products is None and "bill_products" in self.model_fields_set:
            _dict['billProducts'] = None

        # set to None if bill_time (nullable) is None
        # and model_fields_set contains the field
        if self.bill_time is None and "bill_time" in self.model_fields_set:
            _dict['billTime'] = None

        # set to None if billable_expense_invoice_flag (nullable) is None
        # and model_fields_set contains the field
        if self.billable_expense_invoice_flag is None and "billable_expense_invoice_flag" in self.model_fields_set:
            _dict['billableExpenseInvoiceFlag'] = None

        # set to None if billable_product_invoice_flag (nullable) is None
        # and model_fields_set contains the field
        if self.billable_product_invoice_flag is None and "billable_product_invoice_flag" in self.model_fields_set:
            _dict['billableProductInvoiceFlag'] = None

        # set to None if billable_time_invoice_flag (nullable) is None
        # and model_fields_set contains the field
        if self.billable_time_invoice_flag is None and "billable_time_invoice_flag" in self.model_fields_set:
            _dict['billableTimeInvoiceFlag'] = None

        # set to None if bottom_comment_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bottom_comment_flag is None and "bottom_comment_flag" in self.model_fields_set:
            _dict['bottomCommentFlag'] = None

        # set to None if carry_over_unused_flag (nullable) is None
        # and model_fields_set contains the field
        if self.carry_over_unused_flag is None and "carry_over_unused_flag" in self.model_fields_set:
            _dict['carryOverUnusedFlag'] = None

        # set to None if charge_to_firm_flag (nullable) is None
        # and model_fields_set contains the field
        if self.charge_to_firm_flag is None and "charge_to_firm_flag" in self.model_fields_set:
            _dict['chargeToFirmFlag'] = None

        # set to None if comp_hourly_rate (nullable) is None
        # and model_fields_set contains the field
        if self.comp_hourly_rate is None and "comp_hourly_rate" in self.model_fields_set:
            _dict['compHourlyRate'] = None

        # set to None if comp_limit_amount (nullable) is None
        # and model_fields_set contains the field
        if self.comp_limit_amount is None and "comp_limit_amount" in self.model_fields_set:
            _dict['compLimitAmount'] = None

        # set to None if copy_work_roles_flag (nullable) is None
        # and model_fields_set contains the field
        if self.copy_work_roles_flag is None and "copy_work_roles_flag" in self.model_fields_set:
            _dict['copyWorkRolesFlag'] = None

        # set to None if copy_work_types_flag (nullable) is None
        # and model_fields_set contains the field
        if self.copy_work_types_flag is None and "copy_work_types_flag" in self.model_fields_set:
            _dict['copyWorkTypesFlag'] = None

        # set to None if cover_agreement_expense_flag (nullable) is None
        # and model_fields_set contains the field
        if self.cover_agreement_expense_flag is None and "cover_agreement_expense_flag" in self.model_fields_set:
            _dict['coverAgreementExpenseFlag'] = None

        # set to None if cover_agreement_product_flag (nullable) is None
        # and model_fields_set contains the field
        if self.cover_agreement_product_flag is None and "cover_agreement_product_flag" in self.model_fields_set:
            _dict['coverAgreementProductFlag'] = None

        # set to None if cover_agreement_time_flag (nullable) is None
        # and model_fields_set contains the field
        if self.cover_agreement_time_flag is None and "cover_agreement_time_flag" in self.model_fields_set:
            _dict['coverAgreementTimeFlag'] = None

        # set to None if cover_sales_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.cover_sales_tax_flag is None and "cover_sales_tax_flag" in self.model_fields_set:
            _dict['coverSalesTaxFlag'] = None

        # set to None if default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_flag is None and "default_flag" in self.model_fields_set:
            _dict['defaultFlag'] = None

        # set to None if employee_comp_not_exceed (nullable) is None
        # and model_fields_set contains the field
        if self.employee_comp_not_exceed is None and "employee_comp_not_exceed" in self.model_fields_set:
            _dict['employeeCompNotExceed'] = None

        # set to None if employee_comp_rate (nullable) is None
        # and model_fields_set contains the field
        if self.employee_comp_rate is None and "employee_comp_rate" in self.model_fields_set:
            _dict['employeeCompRate'] = None

        # set to None if expire_when_zero (nullable) is None
        # and model_fields_set contains the field
        if self.expire_when_zero is None and "expire_when_zero" in self.model_fields_set:
            _dict['expireWhenZero'] = None

        # set to None if expired_days (nullable) is None
        # and model_fields_set contains the field
        if self.expired_days is None and "expired_days" in self.model_fields_set:
            _dict['expiredDays'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if invoice_prorated_additions_flag (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_prorated_additions_flag is None and "invoice_prorated_additions_flag" in self.model_fields_set:
            _dict['invoiceProratedAdditionsFlag'] = None

        # set to None if invoicing_cycle (nullable) is None
        # and model_fields_set contains the field
        if self.invoicing_cycle is None and "invoicing_cycle" in self.model_fields_set:
            _dict['invoicingCycle'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if one_time_flag (nullable) is None
        # and model_fields_set contains the field
        if self.one_time_flag is None and "one_time_flag" in self.model_fields_set:
            _dict['oneTimeFlag'] = None

        # set to None if pre_payment_flag (nullable) is None
        # and model_fields_set contains the field
        if self.pre_payment_flag is None and "pre_payment_flag" in self.model_fields_set:
            _dict['prePaymentFlag'] = None

        # set to None if prefix_suffix_option (nullable) is None
        # and model_fields_set contains the field
        if self.prefix_suffix_option is None and "prefix_suffix_option" in self.model_fields_set:
            _dict['prefixSuffixOption'] = None

        # set to None if prorate_flag (nullable) is None
        # and model_fields_set contains the field
        if self.prorate_flag is None and "prorate_flag" in self.model_fields_set:
            _dict['prorateFlag'] = None

        # set to None if remove_all_work_role_exclusions (nullable) is None
        # and model_fields_set contains the field
        if self.remove_all_work_role_exclusions is None and "remove_all_work_role_exclusions" in self.model_fields_set:
            _dict['removeAllWorkRoleExclusions'] = None

        # set to None if remove_all_work_type_exclusions (nullable) is None
        # and model_fields_set contains the field
        if self.remove_all_work_type_exclusions is None and "remove_all_work_type_exclusions" in self.model_fields_set:
            _dict['removeAllWorkTypeExclusions'] = None

        # set to None if restrict_department_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_department_flag is None and "restrict_department_flag" in self.model_fields_set:
            _dict['restrictDepartmentFlag'] = None

        # set to None if restrict_down_payment_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_down_payment_flag is None and "restrict_down_payment_flag" in self.model_fields_set:
            _dict['restrictDownPaymentFlag'] = None

        # set to None if restrict_location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_location_flag is None and "restrict_location_flag" in self.model_fields_set:
            _dict['restrictLocationFlag'] = None

        # set to None if taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_flag is None and "taxable_flag" in self.model_fields_set:
            _dict['taxableFlag'] = None

        # set to None if top_comment_flag (nullable) is None
        # and model_fields_set contains the field
        if self.top_comment_flag is None and "top_comment_flag" in self.model_fields_set:
            _dict['topCommentFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AgreementType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in AgreementType) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "addAllWorkRoleExclusions": obj.get("addAllWorkRoleExclusions"),
            "addAllWorkTypeExclusions": obj.get("addAllWorkTypeExclusions"),
            "allowOverrunsFlag": obj.get("allowOverrunsFlag"),
            "applicationCycle": obj.get("applicationCycle"),
            "applicationLimit": obj.get("applicationLimit"),
            "applicationUnits": obj.get("applicationUnits"),
            "applicationUnlimitedFlag": obj.get("applicationUnlimitedFlag"),
            "autoInvoiceFlag": obj.get("autoInvoiceFlag"),
            "billAmount": obj.get("billAmount"),
            "billExpenses": obj.get("billExpenses"),
            "billOneTimeFlag": obj.get("billOneTimeFlag"),
            "billProducts": obj.get("billProducts"),
            "billTime": obj.get("billTime"),
            "billableExpenseInvoiceFlag": obj.get("billableExpenseInvoiceFlag"),
            "billableProductInvoiceFlag": obj.get("billableProductInvoiceFlag"),
            "billableTimeInvoiceFlag": obj.get("billableTimeInvoiceFlag"),
            "billingCycle": BillingCycleReference.from_dict(obj.get("billingCycle")) if obj.get("billingCycle") is not None else None,
            "billingTerms": BillingTermsReference.from_dict(obj.get("billingTerms")) if obj.get("billingTerms") is not None else None,
            "bottomCommentFlag": obj.get("bottomCommentFlag"),
            "carryOverUnusedFlag": obj.get("carryOverUnusedFlag"),
            "chargeToFirmFlag": obj.get("chargeToFirmFlag"),
            "compHourlyRate": obj.get("compHourlyRate"),
            "compLimitAmount": obj.get("compLimitAmount"),
            "copyWorkRolesFlag": obj.get("copyWorkRolesFlag"),
            "copyWorkTypesFlag": obj.get("copyWorkTypesFlag"),
            "coverAgreementExpenseFlag": obj.get("coverAgreementExpenseFlag"),
            "coverAgreementProductFlag": obj.get("coverAgreementProductFlag"),
            "coverAgreementTimeFlag": obj.get("coverAgreementTimeFlag"),
            "coverSalesTaxFlag": obj.get("coverSalesTaxFlag"),
            "defaultFlag": obj.get("defaultFlag"),
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "emailTemplate": EmailTemplateReference.from_dict(obj.get("emailTemplate")) if obj.get("emailTemplate") is not None else None,
            "employeeCompNotExceed": obj.get("employeeCompNotExceed"),
            "employeeCompRate": obj.get("employeeCompRate"),
            "exclusionWorkRoleIds": obj.get("exclusionWorkRoleIds"),
            "exclusionWorkTypeIds": obj.get("exclusionWorkTypeIds"),
            "expireWhenZero": obj.get("expireWhenZero"),
            "expiredDays": obj.get("expiredDays"),
            "id": obj.get("id"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "integrationXRef": obj.get("integrationXRef"),
            "invoiceDescription": obj.get("invoiceDescription"),
            "invoicePreSuffix": obj.get("invoicePreSuffix"),
            "invoiceProratedAdditionsFlag": obj.get("invoiceProratedAdditionsFlag"),
            "invoiceTemplate": InvoiceTemplateReference.from_dict(obj.get("invoiceTemplate")) if obj.get("invoiceTemplate") is not None else None,
            "invoicingCycle": obj.get("invoicingCycle"),
            "limit": obj.get("limit"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "name": obj.get("name"),
            "oneTimeFlag": obj.get("oneTimeFlag"),
            "prePaymentFlag": obj.get("prePaymentFlag"),
            "prefixSuffixOption": obj.get("prefixSuffixOption"),
            "projectType": ProjectTypeReference.from_dict(obj.get("projectType")) if obj.get("projectType") is not None else None,
            "prorateFlag": obj.get("prorateFlag"),
            "removeAllWorkRoleExclusions": obj.get("removeAllWorkRoleExclusions"),
            "removeAllWorkTypeExclusions": obj.get("removeAllWorkTypeExclusions"),
            "restrictDepartmentFlag": obj.get("restrictDepartmentFlag"),
            "restrictDownPaymentFlag": obj.get("restrictDownPaymentFlag"),
            "restrictLocationFlag": obj.get("restrictLocationFlag"),
            "sla": SLAReference.from_dict(obj.get("sla")) if obj.get("sla") is not None else None,
            "taxableFlag": obj.get("taxableFlag"),
            "topCommentFlag": obj.get("topCommentFlag"),
            "workRole": WorkRoleReference.from_dict(obj.get("workRole")) if obj.get("workRole") is not None else None,
            "workType": WorkTypeReference.from_dict(obj.get("workType")) if obj.get("workType") is not None else None
        })
        return _obj


