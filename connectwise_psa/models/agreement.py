# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.agreement_reference import AgreementReference
from connectwise_psa.models.agreement_type_reference import AgreementTypeReference
from connectwise_psa.models.billing_cycle_reference import BillingCycleReference
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.invoice_template_reference import InvoiceTemplateReference
from connectwise_psa.models.opportunity_reference import OpportunityReference
from connectwise_psa.models.project_type_reference import ProjectTypeReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.sla_reference import SLAReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
from connectwise_psa.models.work_role_reference import WorkRoleReference
from connectwise_psa.models.work_type_reference import WorkTypeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Agreement(BaseModel):
    """
    Agreement
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agreement_status: Optional[StrictStr] = Field(default=None, alias="agreementStatus")
    allow_overruns: Optional[StrictBool] = Field(default=None, alias="allowOverruns")
    application_cycle: Optional[StrictStr] = Field(default=None, alias="applicationCycle")
    application_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="applicationLimit")
    application_units: Optional[StrictStr] = Field(default=None, alias="applicationUnits")
    application_unlimited_flag: Optional[StrictBool] = Field(default=None, alias="applicationUnlimitedFlag")
    auto_invoice_flag: Optional[StrictBool] = Field(default=None, alias="autoInvoiceFlag")
    bill_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="billAmount")
    bill_expenses: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billExpenses")
    bill_one_time_flag: Optional[StrictBool] = Field(default=None, alias="billOneTimeFlag")
    bill_products: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billProducts")
    bill_start_date: Optional[datetime] = Field(default=None, alias="billStartDate")
    bill_time: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billTime")
    bill_to_company: Optional[CompanyReference] = Field(default=None, alias="billToCompany")
    bill_to_contact: Optional[ContactReference] = Field(default=None, alias="billToContact")
    bill_to_site: Optional[SiteReference] = Field(default=None, alias="billToSite")
    billable_expense_invoice: Optional[StrictBool] = Field(default=None, alias="billableExpenseInvoice")
    billable_product_invoice: Optional[StrictBool] = Field(default=None, alias="billableProductInvoice")
    billable_time_invoice: Optional[StrictBool] = Field(default=None, alias="billableTimeInvoice")
    billing_cycle: Optional[BillingCycleReference] = Field(default=None, alias="billingCycle")
    billing_terms: Optional[BillingTermsReference] = Field(default=None, alias="billingTerms")
    bottom_comment: Optional[StrictBool] = Field(default=None, alias="bottomComment")
    cancelled_flag: Optional[StrictBool] = Field(default=None, alias="cancelledFlag")
    carry_over_unused: Optional[StrictBool] = Field(default=None, alias="carryOverUnused")
    charge_to_firm: Optional[StrictBool] = Field(default=None, alias="chargeToFirm")
    comp_hourly_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="compHourlyRate")
    comp_limit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="compLimitAmount")
    company: Optional[CompanyReference] = None
    company_location: Optional[SystemLocationReference] = Field(default=None, alias="companyLocation")
    contact: Optional[ContactReference] = None
    cover_agreement_expense: Optional[StrictBool] = Field(default=None, alias="coverAgreementExpense")
    cover_agreement_product: Optional[StrictBool] = Field(default=None, alias="coverAgreementProduct")
    cover_agreement_time: Optional[StrictBool] = Field(default=None, alias="coverAgreementTime")
    cover_sales_tax: Optional[StrictBool] = Field(default=None, alias="coverSalesTax")
    currency: Optional[CurrencyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    customer_po: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="customerPO")
    date_cancelled: Optional[datetime] = Field(default=None, alias="dateCancelled")
    department: Optional[SystemDepartmentReference] = None
    employee_comp_not_exceed: Optional[StrictStr] = Field(default=None, alias="employeeCompNotExceed")
    employee_comp_rate: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="employeeCompRate")
    end_date: Optional[datetime] = Field(default=None, alias="endDate")
    expire_when_zero: Optional[StrictBool] = Field(default=None, alias="expireWhenZero")
    expired_days: Optional[StrictInt] = Field(default=None, alias="expiredDays")
    id: Optional[StrictInt] = None
    internal_notes: Optional[StrictStr] = Field(default=None, alias="internalNotes")
    invoice_description: Optional[StrictStr] = Field(default=None, alias="invoiceDescription")
    invoice_prorated_additions_flag: Optional[StrictBool] = Field(default=None, alias="invoiceProratedAdditionsFlag")
    invoice_template: Optional[InvoiceTemplateReference] = Field(default=None, alias="invoiceTemplate")
    invoicing_cycle: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="invoicingCycle")
    limit: Optional[StrictInt] = None
    location: Optional[SystemLocationReference] = None
    name: StrictStr = Field(description=" Max length: 100;")
    next_invoice_date: Optional[StrictStr] = Field(default=None, alias="nextInvoiceDate")
    no_ending_date_flag: Optional[StrictBool] = Field(default=None, alias="noEndingDateFlag")
    one_time_flag: Optional[StrictBool] = Field(default=None, alias="oneTimeFlag")
    opportunity: Optional[OpportunityReference] = None
    parent_agreement: Optional[AgreementReference] = Field(default=None, alias="parentAgreement")
    period_type: Optional[StrictStr] = Field(default=None, alias="periodType")
    project_type: Optional[ProjectTypeReference] = Field(default=None, alias="projectType")
    prorate_first_bill: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="prorateFirstBill")
    prorate_flag: Optional[StrictBool] = Field(default=None, alias="prorateFlag")
    reason_cancelled: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="reasonCancelled")
    restrict_department_flag: Optional[StrictBool] = Field(default=None, alias="restrictDepartmentFlag")
    restrict_down_payment: Optional[StrictBool] = Field(default=None, alias="restrictDownPayment")
    restrict_location_flag: Optional[StrictBool] = Field(default=None, alias="restrictLocationFlag")
    ship_to_company: Optional[CompanyReference] = Field(default=None, alias="shipToCompany")
    ship_to_contact: Optional[ContactReference] = Field(default=None, alias="shipToContact")
    ship_to_site: Optional[SiteReference] = Field(default=None, alias="shipToSite")
    site: Optional[SiteReference] = None
    sla: Optional[SLAReference] = None
    start_date: Optional[datetime] = Field(default=None, alias="startDate")
    sub_contract_company: Optional[CompanyReference] = Field(default=None, alias="subContractCompany")
    sub_contract_contact: Optional[ContactReference] = Field(default=None, alias="subContractContact")
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    taxable: Optional[StrictBool] = None
    top_comment: Optional[StrictBool] = Field(default=None, alias="topComment")
    type: Optional[AgreementTypeReference] = None
    work_order: Optional[StrictStr] = Field(default=None, description=" Max length: 20;", alias="workOrder")
    work_role: Optional[WorkRoleReference] = Field(default=None, alias="workRole")
    work_type: Optional[WorkTypeReference] = Field(default=None, alias="workType")
    __properties: ClassVar[List[str]] = ["_info", "agreementStatus", "allowOverruns", "applicationCycle", "applicationLimit", "applicationUnits", "applicationUnlimitedFlag", "autoInvoiceFlag", "billAmount", "billExpenses", "billOneTimeFlag", "billProducts", "billStartDate", "billTime", "billToCompany", "billToContact", "billToSite", "billableExpenseInvoice", "billableProductInvoice", "billableTimeInvoice", "billingCycle", "billingTerms", "bottomComment", "cancelledFlag", "carryOverUnused", "chargeToFirm", "compHourlyRate", "compLimitAmount", "company", "companyLocation", "contact", "coverAgreementExpense", "coverAgreementProduct", "coverAgreementTime", "coverSalesTax", "currency", "customFields", "customerPO", "dateCancelled", "department", "employeeCompNotExceed", "employeeCompRate", "endDate", "expireWhenZero", "expiredDays", "id", "internalNotes", "invoiceDescription", "invoiceProratedAdditionsFlag", "invoiceTemplate", "invoicingCycle", "limit", "location", "name", "nextInvoiceDate", "noEndingDateFlag", "oneTimeFlag", "opportunity", "parentAgreement", "periodType", "projectType", "prorateFirstBill", "prorateFlag", "reasonCancelled", "restrictDepartmentFlag", "restrictDownPayment", "restrictLocationFlag", "shipToCompany", "shipToContact", "shipToSite", "site", "sla", "startDate", "subContractCompany", "subContractContact", "taxCode", "taxable", "topComment", "type", "workOrder", "workRole", "workType"]

    @field_validator('agreement_status')
    def agreement_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Active', 'Cancelled', 'Expired', 'Inactive'):
            raise ValueError("must be one of enum values ('Active', 'Cancelled', 'Expired', 'Inactive')")
        return value

    @field_validator('application_cycle')
    def application_cycle_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Contract2Weeks', 'Contract4Weeks', 'ContractYear', 'CalendarMonth', 'CalendarQuarter', 'CalendarWeek', 'ContractQuarter', 'CalendarYear'):
            raise ValueError("must be one of enum values ('Contract2Weeks', 'Contract4Weeks', 'ContractYear', 'CalendarMonth', 'CalendarQuarter', 'CalendarWeek', 'ContractQuarter', 'CalendarYear')")
        return value

    @field_validator('application_units')
    def application_units_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Amount', 'Hours', 'Incidents'):
            raise ValueError("must be one of enum values ('Amount', 'Hours', 'Incidents')")
        return value

    @field_validator('bill_expenses')
    def bill_expenses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('bill_products')
    def bill_products_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('bill_time')
    def bill_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('employee_comp_not_exceed')
    def employee_comp_not_exceed_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billing', 'Amount', 'Percent'):
            raise ValueError("must be one of enum values ('Billing', 'Amount', 'Percent')")
        return value

    @field_validator('employee_comp_rate')
    def employee_comp_rate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Actual', 'Hourly'):
            raise ValueError("must be one of enum values ('Actual', 'Hourly')")
        return value

    @field_validator('invoicing_cycle')
    def invoicing_cycle_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ContractYear', 'CalendarYear'):
            raise ValueError("must be one of enum values ('ContractYear', 'CalendarYear')")
        return value

    @field_validator('period_type')
    def period_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Current', 'Future', 'Both', 'Undefined'):
            raise ValueError("must be one of enum values ('Current', 'Future', 'Both', 'Undefined')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Agreement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bill_to_company
        if self.bill_to_company:
            _dict['billToCompany'] = self.bill_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_site
        if self.bill_to_site:
            _dict['billToSite'] = self.bill_to_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_cycle
        if self.billing_cycle:
            _dict['billingCycle'] = self.billing_cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_terms
        if self.billing_terms:
            _dict['billingTerms'] = self.billing_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_location
        if self.company_location:
            _dict['companyLocation'] = self.company_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_template
        if self.invoice_template:
            _dict['invoiceTemplate'] = self.invoice_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opportunity
        if self.opportunity:
            _dict['opportunity'] = self.opportunity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_agreement
        if self.parent_agreement:
            _dict['parentAgreement'] = self.parent_agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_type
        if self.project_type:
            _dict['projectType'] = self.project_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_company
        if self.ship_to_company:
            _dict['shipToCompany'] = self.ship_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_contact
        if self.ship_to_contact:
            _dict['shipToContact'] = self.ship_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_site
        if self.ship_to_site:
            _dict['shipToSite'] = self.ship_to_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sla
        if self.sla:
            _dict['sla'] = self.sla.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_contract_company
        if self.sub_contract_company:
            _dict['subContractCompany'] = self.sub_contract_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_contract_contact
        if self.sub_contract_contact:
            _dict['subContractContact'] = self.sub_contract_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_role
        if self.work_role:
            _dict['workRole'] = self.work_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_type
        if self.work_type:
            _dict['workType'] = self.work_type.to_dict()
        # set to None if agreement_status (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_status is None and "agreement_status" in self.model_fields_set:
            _dict['agreementStatus'] = None

        # set to None if allow_overruns (nullable) is None
        # and model_fields_set contains the field
        if self.allow_overruns is None and "allow_overruns" in self.model_fields_set:
            _dict['allowOverruns'] = None

        # set to None if application_cycle (nullable) is None
        # and model_fields_set contains the field
        if self.application_cycle is None and "application_cycle" in self.model_fields_set:
            _dict['applicationCycle'] = None

        # set to None if application_limit (nullable) is None
        # and model_fields_set contains the field
        if self.application_limit is None and "application_limit" in self.model_fields_set:
            _dict['applicationLimit'] = None

        # set to None if application_units (nullable) is None
        # and model_fields_set contains the field
        if self.application_units is None and "application_units" in self.model_fields_set:
            _dict['applicationUnits'] = None

        # set to None if application_unlimited_flag (nullable) is None
        # and model_fields_set contains the field
        if self.application_unlimited_flag is None and "application_unlimited_flag" in self.model_fields_set:
            _dict['applicationUnlimitedFlag'] = None

        # set to None if auto_invoice_flag (nullable) is None
        # and model_fields_set contains the field
        if self.auto_invoice_flag is None and "auto_invoice_flag" in self.model_fields_set:
            _dict['autoInvoiceFlag'] = None

        # set to None if bill_amount (nullable) is None
        # and model_fields_set contains the field
        if self.bill_amount is None and "bill_amount" in self.model_fields_set:
            _dict['billAmount'] = None

        # set to None if bill_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.bill_expenses is None and "bill_expenses" in self.model_fields_set:
            _dict['billExpenses'] = None

        # set to None if bill_one_time_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_one_time_flag is None and "bill_one_time_flag" in self.model_fields_set:
            _dict['billOneTimeFlag'] = None

        # set to None if bill_products (nullable) is None
        # and model_fields_set contains the field
        if self.bill_products is None and "bill_products" in self.model_fields_set:
            _dict['billProducts'] = None

        # set to None if bill_time (nullable) is None
        # and model_fields_set contains the field
        if self.bill_time is None and "bill_time" in self.model_fields_set:
            _dict['billTime'] = None

        # set to None if billable_expense_invoice (nullable) is None
        # and model_fields_set contains the field
        if self.billable_expense_invoice is None and "billable_expense_invoice" in self.model_fields_set:
            _dict['billableExpenseInvoice'] = None

        # set to None if billable_product_invoice (nullable) is None
        # and model_fields_set contains the field
        if self.billable_product_invoice is None and "billable_product_invoice" in self.model_fields_set:
            _dict['billableProductInvoice'] = None

        # set to None if billable_time_invoice (nullable) is None
        # and model_fields_set contains the field
        if self.billable_time_invoice is None and "billable_time_invoice" in self.model_fields_set:
            _dict['billableTimeInvoice'] = None

        # set to None if bottom_comment (nullable) is None
        # and model_fields_set contains the field
        if self.bottom_comment is None and "bottom_comment" in self.model_fields_set:
            _dict['bottomComment'] = None

        # set to None if cancelled_flag (nullable) is None
        # and model_fields_set contains the field
        if self.cancelled_flag is None and "cancelled_flag" in self.model_fields_set:
            _dict['cancelledFlag'] = None

        # set to None if carry_over_unused (nullable) is None
        # and model_fields_set contains the field
        if self.carry_over_unused is None and "carry_over_unused" in self.model_fields_set:
            _dict['carryOverUnused'] = None

        # set to None if charge_to_firm (nullable) is None
        # and model_fields_set contains the field
        if self.charge_to_firm is None and "charge_to_firm" in self.model_fields_set:
            _dict['chargeToFirm'] = None

        # set to None if comp_hourly_rate (nullable) is None
        # and model_fields_set contains the field
        if self.comp_hourly_rate is None and "comp_hourly_rate" in self.model_fields_set:
            _dict['compHourlyRate'] = None

        # set to None if comp_limit_amount (nullable) is None
        # and model_fields_set contains the field
        if self.comp_limit_amount is None and "comp_limit_amount" in self.model_fields_set:
            _dict['compLimitAmount'] = None

        # set to None if cover_agreement_expense (nullable) is None
        # and model_fields_set contains the field
        if self.cover_agreement_expense is None and "cover_agreement_expense" in self.model_fields_set:
            _dict['coverAgreementExpense'] = None

        # set to None if cover_agreement_product (nullable) is None
        # and model_fields_set contains the field
        if self.cover_agreement_product is None and "cover_agreement_product" in self.model_fields_set:
            _dict['coverAgreementProduct'] = None

        # set to None if cover_agreement_time (nullable) is None
        # and model_fields_set contains the field
        if self.cover_agreement_time is None and "cover_agreement_time" in self.model_fields_set:
            _dict['coverAgreementTime'] = None

        # set to None if cover_sales_tax (nullable) is None
        # and model_fields_set contains the field
        if self.cover_sales_tax is None and "cover_sales_tax" in self.model_fields_set:
            _dict['coverSalesTax'] = None

        # set to None if employee_comp_not_exceed (nullable) is None
        # and model_fields_set contains the field
        if self.employee_comp_not_exceed is None and "employee_comp_not_exceed" in self.model_fields_set:
            _dict['employeeCompNotExceed'] = None

        # set to None if employee_comp_rate (nullable) is None
        # and model_fields_set contains the field
        if self.employee_comp_rate is None and "employee_comp_rate" in self.model_fields_set:
            _dict['employeeCompRate'] = None

        # set to None if expire_when_zero (nullable) is None
        # and model_fields_set contains the field
        if self.expire_when_zero is None and "expire_when_zero" in self.model_fields_set:
            _dict['expireWhenZero'] = None

        # set to None if expired_days (nullable) is None
        # and model_fields_set contains the field
        if self.expired_days is None and "expired_days" in self.model_fields_set:
            _dict['expiredDays'] = None

        # set to None if invoice_prorated_additions_flag (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_prorated_additions_flag is None and "invoice_prorated_additions_flag" in self.model_fields_set:
            _dict['invoiceProratedAdditionsFlag'] = None

        # set to None if invoicing_cycle (nullable) is None
        # and model_fields_set contains the field
        if self.invoicing_cycle is None and "invoicing_cycle" in self.model_fields_set:
            _dict['invoicingCycle'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if no_ending_date_flag (nullable) is None
        # and model_fields_set contains the field
        if self.no_ending_date_flag is None and "no_ending_date_flag" in self.model_fields_set:
            _dict['noEndingDateFlag'] = None

        # set to None if one_time_flag (nullable) is None
        # and model_fields_set contains the field
        if self.one_time_flag is None and "one_time_flag" in self.model_fields_set:
            _dict['oneTimeFlag'] = None

        # set to None if period_type (nullable) is None
        # and model_fields_set contains the field
        if self.period_type is None and "period_type" in self.model_fields_set:
            _dict['periodType'] = None

        # set to None if prorate_first_bill (nullable) is None
        # and model_fields_set contains the field
        if self.prorate_first_bill is None and "prorate_first_bill" in self.model_fields_set:
            _dict['prorateFirstBill'] = None

        # set to None if prorate_flag (nullable) is None
        # and model_fields_set contains the field
        if self.prorate_flag is None and "prorate_flag" in self.model_fields_set:
            _dict['prorateFlag'] = None

        # set to None if restrict_department_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_department_flag is None and "restrict_department_flag" in self.model_fields_set:
            _dict['restrictDepartmentFlag'] = None

        # set to None if restrict_down_payment (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_down_payment is None and "restrict_down_payment" in self.model_fields_set:
            _dict['restrictDownPayment'] = None

        # set to None if restrict_location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_location_flag is None and "restrict_location_flag" in self.model_fields_set:
            _dict['restrictLocationFlag'] = None

        # set to None if taxable (nullable) is None
        # and model_fields_set contains the field
        if self.taxable is None and "taxable" in self.model_fields_set:
            _dict['taxable'] = None

        # set to None if top_comment (nullable) is None
        # and model_fields_set contains the field
        if self.top_comment is None and "top_comment" in self.model_fields_set:
            _dict['topComment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Agreement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Agreement) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agreementStatus": obj.get("agreementStatus"),
            "allowOverruns": obj.get("allowOverruns"),
            "applicationCycle": obj.get("applicationCycle"),
            "applicationLimit": obj.get("applicationLimit"),
            "applicationUnits": obj.get("applicationUnits"),
            "applicationUnlimitedFlag": obj.get("applicationUnlimitedFlag"),
            "autoInvoiceFlag": obj.get("autoInvoiceFlag"),
            "billAmount": obj.get("billAmount"),
            "billExpenses": obj.get("billExpenses"),
            "billOneTimeFlag": obj.get("billOneTimeFlag"),
            "billProducts": obj.get("billProducts"),
            "billStartDate": obj.get("billStartDate"),
            "billTime": obj.get("billTime"),
            "billToCompany": CompanyReference.from_dict(obj.get("billToCompany")) if obj.get("billToCompany") is not None else None,
            "billToContact": ContactReference.from_dict(obj.get("billToContact")) if obj.get("billToContact") is not None else None,
            "billToSite": SiteReference.from_dict(obj.get("billToSite")) if obj.get("billToSite") is not None else None,
            "billableExpenseInvoice": obj.get("billableExpenseInvoice"),
            "billableProductInvoice": obj.get("billableProductInvoice"),
            "billableTimeInvoice": obj.get("billableTimeInvoice"),
            "billingCycle": BillingCycleReference.from_dict(obj.get("billingCycle")) if obj.get("billingCycle") is not None else None,
            "billingTerms": BillingTermsReference.from_dict(obj.get("billingTerms")) if obj.get("billingTerms") is not None else None,
            "bottomComment": obj.get("bottomComment"),
            "cancelledFlag": obj.get("cancelledFlag"),
            "carryOverUnused": obj.get("carryOverUnused"),
            "chargeToFirm": obj.get("chargeToFirm"),
            "compHourlyRate": obj.get("compHourlyRate"),
            "compLimitAmount": obj.get("compLimitAmount"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "companyLocation": SystemLocationReference.from_dict(obj.get("companyLocation")) if obj.get("companyLocation") is not None else None,
            "contact": ContactReference.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "coverAgreementExpense": obj.get("coverAgreementExpense"),
            "coverAgreementProduct": obj.get("coverAgreementProduct"),
            "coverAgreementTime": obj.get("coverAgreementTime"),
            "coverSalesTax": obj.get("coverSalesTax"),
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "customerPO": obj.get("customerPO"),
            "dateCancelled": obj.get("dateCancelled"),
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "employeeCompNotExceed": obj.get("employeeCompNotExceed"),
            "employeeCompRate": obj.get("employeeCompRate"),
            "endDate": obj.get("endDate"),
            "expireWhenZero": obj.get("expireWhenZero"),
            "expiredDays": obj.get("expiredDays"),
            "id": obj.get("id"),
            "internalNotes": obj.get("internalNotes"),
            "invoiceDescription": obj.get("invoiceDescription"),
            "invoiceProratedAdditionsFlag": obj.get("invoiceProratedAdditionsFlag"),
            "invoiceTemplate": InvoiceTemplateReference.from_dict(obj.get("invoiceTemplate")) if obj.get("invoiceTemplate") is not None else None,
            "invoicingCycle": obj.get("invoicingCycle"),
            "limit": obj.get("limit"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "name": obj.get("name"),
            "nextInvoiceDate": obj.get("nextInvoiceDate"),
            "noEndingDateFlag": obj.get("noEndingDateFlag"),
            "oneTimeFlag": obj.get("oneTimeFlag"),
            "opportunity": OpportunityReference.from_dict(obj.get("opportunity")) if obj.get("opportunity") is not None else None,
            "parentAgreement": AgreementReference.from_dict(obj.get("parentAgreement")) if obj.get("parentAgreement") is not None else None,
            "periodType": obj.get("periodType"),
            "projectType": ProjectTypeReference.from_dict(obj.get("projectType")) if obj.get("projectType") is not None else None,
            "prorateFirstBill": obj.get("prorateFirstBill"),
            "prorateFlag": obj.get("prorateFlag"),
            "reasonCancelled": obj.get("reasonCancelled"),
            "restrictDepartmentFlag": obj.get("restrictDepartmentFlag"),
            "restrictDownPayment": obj.get("restrictDownPayment"),
            "restrictLocationFlag": obj.get("restrictLocationFlag"),
            "shipToCompany": CompanyReference.from_dict(obj.get("shipToCompany")) if obj.get("shipToCompany") is not None else None,
            "shipToContact": ContactReference.from_dict(obj.get("shipToContact")) if obj.get("shipToContact") is not None else None,
            "shipToSite": SiteReference.from_dict(obj.get("shipToSite")) if obj.get("shipToSite") is not None else None,
            "site": SiteReference.from_dict(obj.get("site")) if obj.get("site") is not None else None,
            "sla": SLAReference.from_dict(obj.get("sla")) if obj.get("sla") is not None else None,
            "startDate": obj.get("startDate"),
            "subContractCompany": CompanyReference.from_dict(obj.get("subContractCompany")) if obj.get("subContractCompany") is not None else None,
            "subContractContact": ContactReference.from_dict(obj.get("subContractContact")) if obj.get("subContractContact") is not None else None,
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "taxable": obj.get("taxable"),
            "topComment": obj.get("topComment"),
            "type": AgreementTypeReference.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "workOrder": obj.get("workOrder"),
            "workRole": WorkRoleReference.from_dict(obj.get("workRole")) if obj.get("workRole") is not None else None,
            "workType": WorkTypeReference.from_dict(obj.get("workType")) if obj.get("workType") is not None else None
        })
        return _obj


