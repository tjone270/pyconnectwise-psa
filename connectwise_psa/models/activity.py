# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.activity_status_reference import ActivityStatusReference
from connectwise_psa.models.activity_type_reference import ActivityTypeReference
from connectwise_psa.models.agreement_reference import AgreementReference
from connectwise_psa.models.campaign_reference import CampaignReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.opportunity_reference import OpportunityReference
from connectwise_psa.models.reminder_reference import ReminderReference
from connectwise_psa.models.schedule_status_reference import ScheduleStatusReference
from connectwise_psa.models.service_location_reference import ServiceLocationReference
from connectwise_psa.models.ticket_reference import TicketReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Activity(BaseModel):
    """
    Activity
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agreement: Optional[AgreementReference] = None
    assign_to: Optional[MemberReference] = Field(default=None, alias="assignTo")
    assigned_by: Optional[MemberReference] = Field(default=None, alias="assignedBy")
    campaign: Optional[CampaignReference] = None
    company: Optional[CompanyReference] = None
    contact: Optional[ContactReference] = None
    currency: Optional[CurrencyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    date_end: Optional[datetime] = Field(default=None, alias="dateEnd")
    date_start: Optional[datetime] = Field(default=None, alias="dateStart")
    email: Optional[StrictStr] = Field(default=None, description=" Max length: 250;")
    id: Optional[StrictInt] = None
    mobile_guid: Optional[StrictStr] = Field(default=None, alias="mobileGuid")
    name: StrictStr = Field(description=" Max length: 100;")
    notes: Optional[StrictStr] = None
    notify_flag: Optional[StrictBool] = Field(default=None, alias="notifyFlag")
    opportunity: Optional[OpportunityReference] = None
    phone_number: Optional[StrictStr] = Field(default=None, description=" Max length: 30;", alias="phoneNumber")
    reminder: Optional[ReminderReference] = None
    schedule_status: Optional[ScheduleStatusReference] = Field(default=None, alias="scheduleStatus")
    status: Optional[ActivityStatusReference] = None
    ticket: Optional[TicketReference] = None
    type: Optional[ActivityTypeReference] = None
    where: Optional[ServiceLocationReference] = None
    __properties: ClassVar[List[str]] = ["_info", "agreement", "assignTo", "assignedBy", "campaign", "company", "contact", "currency", "customFields", "dateEnd", "dateStart", "email", "id", "mobileGuid", "name", "notes", "notifyFlag", "opportunity", "phoneNumber", "reminder", "scheduleStatus", "status", "ticket", "type", "where"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Activity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement
        if self.agreement:
            _dict['agreement'] = self.agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assign_to
        if self.assign_to:
            _dict['assignTo'] = self.assign_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assigned_by
        if self.assigned_by:
            _dict['assignedBy'] = self.assigned_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign
        if self.campaign:
            _dict['campaign'] = self.campaign.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of opportunity
        if self.opportunity:
            _dict['opportunity'] = self.opportunity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reminder
        if self.reminder:
            _dict['reminder'] = self.reminder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_status
        if self.schedule_status:
            _dict['scheduleStatus'] = self.schedule_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket
        if self.ticket:
            _dict['ticket'] = self.ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of where
        if self.where:
            _dict['where'] = self.where.to_dict()
        # set to None if mobile_guid (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_guid is None and "mobile_guid" in self.model_fields_set:
            _dict['mobileGuid'] = None

        # set to None if notify_flag (nullable) is None
        # and model_fields_set contains the field
        if self.notify_flag is None and "notify_flag" in self.model_fields_set:
            _dict['notifyFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Activity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Activity) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agreement": AgreementReference.from_dict(obj.get("agreement")) if obj.get("agreement") is not None else None,
            "assignTo": MemberReference.from_dict(obj.get("assignTo")) if obj.get("assignTo") is not None else None,
            "assignedBy": MemberReference.from_dict(obj.get("assignedBy")) if obj.get("assignedBy") is not None else None,
            "campaign": CampaignReference.from_dict(obj.get("campaign")) if obj.get("campaign") is not None else None,
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "contact": ContactReference.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "dateEnd": obj.get("dateEnd"),
            "dateStart": obj.get("dateStart"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "mobileGuid": obj.get("mobileGuid"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "notifyFlag": obj.get("notifyFlag"),
            "opportunity": OpportunityReference.from_dict(obj.get("opportunity")) if obj.get("opportunity") is not None else None,
            "phoneNumber": obj.get("phoneNumber"),
            "reminder": ReminderReference.from_dict(obj.get("reminder")) if obj.get("reminder") is not None else None,
            "scheduleStatus": ScheduleStatusReference.from_dict(obj.get("scheduleStatus")) if obj.get("scheduleStatus") is not None else None,
            "status": ActivityStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "ticket": TicketReference.from_dict(obj.get("ticket")) if obj.get("ticket") is not None else None,
            "type": ActivityTypeReference.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "where": ServiceLocationReference.from_dict(obj.get("where")) if obj.get("where") is not None else None
        })
        return _obj


