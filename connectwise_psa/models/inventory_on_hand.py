# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.catalog_item_reference import CatalogItemReference
from connectwise_psa.models.on_hand_serial_number_reference import OnHandSerialNumberReference
from connectwise_psa.models.warehouse_bin_reference import WarehouseBinReference
from connectwise_psa.models.warehouse_reference import WarehouseReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InventoryOnHand(BaseModel):
    """
    InventoryOnHand
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    catalog_item: Optional[CatalogItemReference] = Field(default=None, alias="catalogItem")
    id: Optional[StrictInt] = None
    on_hand: Optional[StrictInt] = Field(default=None, alias="onHand")
    serial_numbers: Optional[List[OnHandSerialNumberReference]] = Field(default=None, alias="serialNumbers")
    warehouse: Optional[WarehouseReference] = None
    warehouse_bin: Optional[WarehouseBinReference] = Field(default=None, alias="warehouseBin")
    __properties: ClassVar[List[str]] = ["_info", "catalogItem", "id", "onHand", "serialNumbers", "warehouse", "warehouseBin"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InventoryOnHand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of catalog_item
        if self.catalog_item:
            _dict['catalogItem'] = self.catalog_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in serial_numbers (list)
        _items = []
        if self.serial_numbers:
            for _item in self.serial_numbers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['serialNumbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of warehouse
        if self.warehouse:
            _dict['warehouse'] = self.warehouse.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse_bin
        if self.warehouse_bin:
            _dict['warehouseBin'] = self.warehouse_bin.to_dict()
        # set to None if on_hand (nullable) is None
        # and model_fields_set contains the field
        if self.on_hand is None and "on_hand" in self.model_fields_set:
            _dict['onHand'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InventoryOnHand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in InventoryOnHand) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "catalogItem": CatalogItemReference.from_dict(obj.get("catalogItem")) if obj.get("catalogItem") is not None else None,
            "id": obj.get("id"),
            "onHand": obj.get("onHand"),
            "serialNumbers": [OnHandSerialNumberReference.from_dict(_item) for _item in obj.get("serialNumbers")] if obj.get("serialNumbers") is not None else None,
            "warehouse": WarehouseReference.from_dict(obj.get("warehouse")) if obj.get("warehouse") is not None else None,
            "warehouseBin": WarehouseBinReference.from_dict(obj.get("warehouseBin")) if obj.get("warehouseBin") is not None else None
        })
        return _obj


