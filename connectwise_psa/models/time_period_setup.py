# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TimePeriodSetup(BaseModel):
    """
    TimePeriodSetup
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    days_past_end_date: Optional[StrictInt] = Field(alias="daysPastEndDate")
    description: Optional[StrictStr] = Field(default=None, description=" Max length: 100;")
    first_period_end_date: date = Field(alias="firstPeriodEndDate")
    id: Optional[StrictInt] = None
    last_day_flag: Optional[StrictBool] = Field(default=None, description="Only needed when type is monthly", alias="lastDayFlag")
    monthly_period_ends: Optional[StrictInt] = Field(default=None, description="Only needed when type is monthly", alias="monthlyPeriodEnds")
    number_future_periods: Optional[StrictInt] = Field(alias="numberFuturePeriods")
    period_apply_to: Optional[StrictStr] = Field(alias="periodApplyTo")
    semi_monthly_first_period: Optional[StrictInt] = Field(default=None, description="Only needed when type is semi-monthly", alias="semiMonthlyFirstPeriod")
    semi_monthly_last_day_flag: Optional[StrictBool] = Field(default=None, alias="semiMonthlyLastDayFlag")
    semi_monthly_second_period: Optional[StrictInt] = Field(default=None, description="Only needed when type is semi-monthly", alias="semiMonthlySecondPeriod")
    type: Optional[StrictStr]
    year: Optional[StrictInt]
    __properties: ClassVar[List[str]] = ["_info", "daysPastEndDate", "description", "firstPeriodEndDate", "id", "lastDayFlag", "monthlyPeriodEnds", "numberFuturePeriods", "periodApplyTo", "semiMonthlyFirstPeriod", "semiMonthlyLastDayFlag", "semiMonthlySecondPeriod", "type", "year"]

    @field_validator('period_apply_to')
    def period_apply_to_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Both', 'Expense', 'Time'):
            raise ValueError("must be one of enum values ('Both', 'Expense', 'Time')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Weekly', 'BiWeekly', 'SemiMonthly', 'Monthly'):
            raise ValueError("must be one of enum values ('Weekly', 'BiWeekly', 'SemiMonthly', 'Monthly')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimePeriodSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if days_past_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.days_past_end_date is None and "days_past_end_date" in self.model_fields_set:
            _dict['daysPastEndDate'] = None

        # set to None if last_day_flag (nullable) is None
        # and model_fields_set contains the field
        if self.last_day_flag is None and "last_day_flag" in self.model_fields_set:
            _dict['lastDayFlag'] = None

        # set to None if monthly_period_ends (nullable) is None
        # and model_fields_set contains the field
        if self.monthly_period_ends is None and "monthly_period_ends" in self.model_fields_set:
            _dict['monthlyPeriodEnds'] = None

        # set to None if number_future_periods (nullable) is None
        # and model_fields_set contains the field
        if self.number_future_periods is None and "number_future_periods" in self.model_fields_set:
            _dict['numberFuturePeriods'] = None

        # set to None if period_apply_to (nullable) is None
        # and model_fields_set contains the field
        if self.period_apply_to is None and "period_apply_to" in self.model_fields_set:
            _dict['periodApplyTo'] = None

        # set to None if semi_monthly_first_period (nullable) is None
        # and model_fields_set contains the field
        if self.semi_monthly_first_period is None and "semi_monthly_first_period" in self.model_fields_set:
            _dict['semiMonthlyFirstPeriod'] = None

        # set to None if semi_monthly_last_day_flag (nullable) is None
        # and model_fields_set contains the field
        if self.semi_monthly_last_day_flag is None and "semi_monthly_last_day_flag" in self.model_fields_set:
            _dict['semiMonthlyLastDayFlag'] = None

        # set to None if semi_monthly_second_period (nullable) is None
        # and model_fields_set contains the field
        if self.semi_monthly_second_period is None and "semi_monthly_second_period" in self.model_fields_set:
            _dict['semiMonthlySecondPeriod'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if year (nullable) is None
        # and model_fields_set contains the field
        if self.year is None and "year" in self.model_fields_set:
            _dict['year'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TimePeriodSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TimePeriodSetup) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "daysPastEndDate": obj.get("daysPastEndDate"),
            "description": obj.get("description"),
            "firstPeriodEndDate": obj.get("firstPeriodEndDate"),
            "id": obj.get("id"),
            "lastDayFlag": obj.get("lastDayFlag"),
            "monthlyPeriodEnds": obj.get("monthlyPeriodEnds"),
            "numberFuturePeriods": obj.get("numberFuturePeriods"),
            "periodApplyTo": obj.get("periodApplyTo"),
            "semiMonthlyFirstPeriod": obj.get("semiMonthlyFirstPeriod"),
            "semiMonthlyLastDayFlag": obj.get("semiMonthlyLastDayFlag"),
            "semiMonthlySecondPeriod": obj.get("semiMonthlySecondPeriod"),
            "type": obj.get("type"),
            "year": obj.get("year")
        })
        return _obj


