# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TimeEntryEmailViewModel(BaseModel):
    """
    TimeEntryEmailViewModel
    """ # noqa: E501
    append_discussion: Optional[StrictBool] = Field(default=None, alias="appendDiscussion")
    append_internal: Optional[StrictBool] = Field(default=None, alias="appendInternal")
    append_resolution: Optional[StrictBool] = Field(default=None, alias="appendResolution")
    cc_email_address_list: Optional[StrictStr] = Field(default=None, alias="ccEmailAddressList")
    contact: Optional[StrictStr] = None
    contact_email_address: Optional[StrictStr] = Field(default=None, alias="contactEmailAddress")
    document_rec_id_list: Optional[List[StrictInt]] = Field(default=None, alias="documentRecIdList")
    var_from: Optional[StrictStr] = Field(default=None, alias="from")
    from_email_address: Optional[StrictStr] = Field(default=None, alias="fromEmailAddress")
    from_email_address_for_resources: Optional[StrictStr] = Field(default=None, alias="fromEmailAddressForResources")
    from_for_resources: Optional[StrictStr] = Field(default=None, alias="fromForResources")
    is_to_ccs: Optional[StrictBool] = Field(default=None, alias="isToCcs")
    is_to_contact: Optional[StrictBool] = Field(default=None, alias="isToContact")
    is_to_resources: Optional[StrictBool] = Field(default=None, alias="isToResources")
    member_rec_id: Optional[StrictInt] = Field(default=None, alias="memberRecId")
    no_time_entry: Optional[StrictBool] = Field(default=None, alias="noTimeEntry")
    note: Optional[StrictStr] = None
    resource_email_address_list: Optional[StrictStr] = Field(default=None, alias="resourceEmailAddressList")
    resources: Optional[StrictStr] = None
    save_cc_list: Optional[StrictBool] = Field(default=None, alias="saveCcList")
    schedule_date: Optional[datetime] = Field(default=None, alias="scheduleDate")
    schedule_done: Optional[StrictBool] = Field(default=None, alias="scheduleDone")
    sr_detail_rec_id: Optional[StrictInt] = Field(default=None, alias="srDetailRecId")
    sr_service_rec_id: Optional[StrictInt] = Field(default=None, alias="srServiceRecId")
    sr_service_status_rec_id: Optional[StrictInt] = Field(default=None, alias="srServiceStatusRecId")
    time_rec_id: Optional[StrictInt] = Field(default=None, alias="timeRecId")
    __properties: ClassVar[List[str]] = ["appendDiscussion", "appendInternal", "appendResolution", "ccEmailAddressList", "contact", "contactEmailAddress", "documentRecIdList", "from", "fromEmailAddress", "fromEmailAddressForResources", "fromForResources", "isToCcs", "isToContact", "isToResources", "memberRecId", "noTimeEntry", "note", "resourceEmailAddressList", "resources", "saveCcList", "scheduleDate", "scheduleDone", "srDetailRecId", "srServiceRecId", "srServiceStatusRecId", "timeRecId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimeEntryEmailViewModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TimeEntryEmailViewModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TimeEntryEmailViewModel) in the input: " + _key)

        _obj = cls.model_validate({
            "appendDiscussion": obj.get("appendDiscussion"),
            "appendInternal": obj.get("appendInternal"),
            "appendResolution": obj.get("appendResolution"),
            "ccEmailAddressList": obj.get("ccEmailAddressList"),
            "contact": obj.get("contact"),
            "contactEmailAddress": obj.get("contactEmailAddress"),
            "documentRecIdList": obj.get("documentRecIdList"),
            "from": obj.get("from"),
            "fromEmailAddress": obj.get("fromEmailAddress"),
            "fromEmailAddressForResources": obj.get("fromEmailAddressForResources"),
            "fromForResources": obj.get("fromForResources"),
            "isToCcs": obj.get("isToCcs"),
            "isToContact": obj.get("isToContact"),
            "isToResources": obj.get("isToResources"),
            "memberRecId": obj.get("memberRecId"),
            "noTimeEntry": obj.get("noTimeEntry"),
            "note": obj.get("note"),
            "resourceEmailAddressList": obj.get("resourceEmailAddressList"),
            "resources": obj.get("resources"),
            "saveCcList": obj.get("saveCcList"),
            "scheduleDate": obj.get("scheduleDate"),
            "scheduleDone": obj.get("scheduleDone"),
            "srDetailRecId": obj.get("srDetailRecId"),
            "srServiceRecId": obj.get("srServiceRecId"),
            "srServiceStatusRecId": obj.get("srServiceStatusRecId"),
            "timeRecId": obj.get("timeRecId")
        })
        return _obj


