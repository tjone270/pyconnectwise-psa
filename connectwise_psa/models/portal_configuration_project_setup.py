# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.portal_configuration_reference import PortalConfigurationReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PortalConfigurationProjectSetup(BaseModel):
    """
    PortalConfigurationProjectSetup
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    billing_method_flag: Optional[StrictBool] = Field(default=None, alias="billingMethodFlag")
    contact_flag: Optional[StrictBool] = Field(default=None, alias="contactFlag")
    description_flag: Optional[StrictBool] = Field(default=None, alias="descriptionFlag")
    estimated_end_flag: Optional[StrictBool] = Field(default=None, alias="estimatedEndFlag")
    estimated_start_flag: Optional[StrictBool] = Field(default=None, alias="estimatedStartFlag")
    fixed_fee_actual_finish_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeActualFinishFlag")
    fixed_fee_actual_hrs_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeActualHrsFlag")
    fixed_fee_actual_start_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeActualStartFlag")
    fixed_fee_assigned_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeAssignedFlag")
    fixed_fee_bill_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeBillFlag")
    fixed_fee_budget_hrs_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeBudgetHrsFlag")
    fixed_fee_scheduled_finish_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeScheduledFinishFlag")
    fixed_fee_scheduled_hrs_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeScheduledHrsFlag")
    fixed_fee_scheduled_start_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeScheduledStartFlag")
    fixed_fee_status_flag: Optional[StrictBool] = Field(default=None, alias="fixedFeeStatusFlag")
    id: Optional[StrictInt] = None
    last_updated_flag: Optional[StrictBool] = Field(default=None, alias="lastUpdatedFlag")
    only_display: Optional[StrictStr] = Field(alias="onlyDisplay")
    portal_config: Optional[PortalConfigurationReference] = Field(default=None, alias="portalConfig")
    project_detail_total_hours_flag: Optional[StrictBool] = Field(default=None, alias="projectDetailTotalHoursFlag")
    project_issue_actual_finish_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueActualFinishFlag")
    project_issue_actual_hrs_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueActualHrsFlag")
    project_issue_actual_start_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueActualStartFlag")
    project_issue_assigned_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueAssignedFlag")
    project_issue_bill_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueBillFlag")
    project_issue_budget_hrs_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueBudgetHrsFlag")
    project_issue_scheduled_finish_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueScheduledFinishFlag")
    project_issue_scheduled_hrs_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueScheduledHrsFlag")
    project_issue_scheduled_start_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueScheduledStartFlag")
    project_issue_status_flag: Optional[StrictBool] = Field(default=None, alias="projectIssueStatusFlag")
    project_manager_flag: Optional[StrictBool] = Field(default=None, alias="projectManagerFlag")
    project_name_flag: Optional[StrictBool] = Field(default=None, alias="projectNameFlag")
    project_type_flag: Optional[StrictBool] = Field(default=None, alias="projectTypeFlag")
    status_flag: Optional[StrictBool] = Field(default=None, alias="statusFlag")
    time_material_actual_finish_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialActualFinishFlag")
    time_material_actual_hrs_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialActualHrsFlag")
    time_material_actual_start_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialActualStartFlag")
    time_material_assigned_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialAssignedFlag")
    time_material_bill_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialBillFlag")
    time_material_budget_hrs_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialBudgetHrsFlag")
    time_material_scheduled_finish_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialScheduledFinishFlag")
    time_material_scheduled_hrs_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialScheduledHrsFlag")
    time_material_scheduled_start_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialScheduledStartFlag")
    time_material_status_flag: Optional[StrictBool] = Field(default=None, alias="timeMaterialStatusFlag")
    __properties: ClassVar[List[str]] = ["_info", "billingMethodFlag", "contactFlag", "descriptionFlag", "estimatedEndFlag", "estimatedStartFlag", "fixedFeeActualFinishFlag", "fixedFeeActualHrsFlag", "fixedFeeActualStartFlag", "fixedFeeAssignedFlag", "fixedFeeBillFlag", "fixedFeeBudgetHrsFlag", "fixedFeeScheduledFinishFlag", "fixedFeeScheduledHrsFlag", "fixedFeeScheduledStartFlag", "fixedFeeStatusFlag", "id", "lastUpdatedFlag", "onlyDisplay", "portalConfig", "projectDetailTotalHoursFlag", "projectIssueActualFinishFlag", "projectIssueActualHrsFlag", "projectIssueActualStartFlag", "projectIssueAssignedFlag", "projectIssueBillFlag", "projectIssueBudgetHrsFlag", "projectIssueScheduledFinishFlag", "projectIssueScheduledHrsFlag", "projectIssueScheduledStartFlag", "projectIssueStatusFlag", "projectManagerFlag", "projectNameFlag", "projectTypeFlag", "statusFlag", "timeMaterialActualFinishFlag", "timeMaterialActualHrsFlag", "timeMaterialActualStartFlag", "timeMaterialAssignedFlag", "timeMaterialBillFlag", "timeMaterialBudgetHrsFlag", "timeMaterialScheduledFinishFlag", "timeMaterialScheduledHrsFlag", "timeMaterialScheduledStartFlag", "timeMaterialStatusFlag"]

    @field_validator('only_display')
    def only_display_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DoNotDisplay', 'Closed30Days', 'Closed60Days', 'Closed90Days', 'Closed120Days', 'AllClosed'):
            raise ValueError("must be one of enum values ('DoNotDisplay', 'Closed30Days', 'Closed60Days', 'Closed90Days', 'Closed120Days', 'AllClosed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PortalConfigurationProjectSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of portal_config
        if self.portal_config:
            _dict['portalConfig'] = self.portal_config.to_dict()
        # set to None if billing_method_flag (nullable) is None
        # and model_fields_set contains the field
        if self.billing_method_flag is None and "billing_method_flag" in self.model_fields_set:
            _dict['billingMethodFlag'] = None

        # set to None if contact_flag (nullable) is None
        # and model_fields_set contains the field
        if self.contact_flag is None and "contact_flag" in self.model_fields_set:
            _dict['contactFlag'] = None

        # set to None if description_flag (nullable) is None
        # and model_fields_set contains the field
        if self.description_flag is None and "description_flag" in self.model_fields_set:
            _dict['descriptionFlag'] = None

        # set to None if estimated_end_flag (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_end_flag is None and "estimated_end_flag" in self.model_fields_set:
            _dict['estimatedEndFlag'] = None

        # set to None if estimated_start_flag (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_start_flag is None and "estimated_start_flag" in self.model_fields_set:
            _dict['estimatedStartFlag'] = None

        # set to None if fixed_fee_actual_finish_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_actual_finish_flag is None and "fixed_fee_actual_finish_flag" in self.model_fields_set:
            _dict['fixedFeeActualFinishFlag'] = None

        # set to None if fixed_fee_actual_hrs_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_actual_hrs_flag is None and "fixed_fee_actual_hrs_flag" in self.model_fields_set:
            _dict['fixedFeeActualHrsFlag'] = None

        # set to None if fixed_fee_actual_start_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_actual_start_flag is None and "fixed_fee_actual_start_flag" in self.model_fields_set:
            _dict['fixedFeeActualStartFlag'] = None

        # set to None if fixed_fee_assigned_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_assigned_flag is None and "fixed_fee_assigned_flag" in self.model_fields_set:
            _dict['fixedFeeAssignedFlag'] = None

        # set to None if fixed_fee_bill_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_bill_flag is None and "fixed_fee_bill_flag" in self.model_fields_set:
            _dict['fixedFeeBillFlag'] = None

        # set to None if fixed_fee_budget_hrs_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_budget_hrs_flag is None and "fixed_fee_budget_hrs_flag" in self.model_fields_set:
            _dict['fixedFeeBudgetHrsFlag'] = None

        # set to None if fixed_fee_scheduled_finish_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_scheduled_finish_flag is None and "fixed_fee_scheduled_finish_flag" in self.model_fields_set:
            _dict['fixedFeeScheduledFinishFlag'] = None

        # set to None if fixed_fee_scheduled_hrs_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_scheduled_hrs_flag is None and "fixed_fee_scheduled_hrs_flag" in self.model_fields_set:
            _dict['fixedFeeScheduledHrsFlag'] = None

        # set to None if fixed_fee_scheduled_start_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_scheduled_start_flag is None and "fixed_fee_scheduled_start_flag" in self.model_fields_set:
            _dict['fixedFeeScheduledStartFlag'] = None

        # set to None if fixed_fee_status_flag (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_fee_status_flag is None and "fixed_fee_status_flag" in self.model_fields_set:
            _dict['fixedFeeStatusFlag'] = None

        # set to None if last_updated_flag (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated_flag is None and "last_updated_flag" in self.model_fields_set:
            _dict['lastUpdatedFlag'] = None

        # set to None if only_display (nullable) is None
        # and model_fields_set contains the field
        if self.only_display is None and "only_display" in self.model_fields_set:
            _dict['onlyDisplay'] = None

        # set to None if project_detail_total_hours_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_detail_total_hours_flag is None and "project_detail_total_hours_flag" in self.model_fields_set:
            _dict['projectDetailTotalHoursFlag'] = None

        # set to None if project_issue_actual_finish_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_actual_finish_flag is None and "project_issue_actual_finish_flag" in self.model_fields_set:
            _dict['projectIssueActualFinishFlag'] = None

        # set to None if project_issue_actual_hrs_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_actual_hrs_flag is None and "project_issue_actual_hrs_flag" in self.model_fields_set:
            _dict['projectIssueActualHrsFlag'] = None

        # set to None if project_issue_actual_start_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_actual_start_flag is None and "project_issue_actual_start_flag" in self.model_fields_set:
            _dict['projectIssueActualStartFlag'] = None

        # set to None if project_issue_assigned_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_assigned_flag is None and "project_issue_assigned_flag" in self.model_fields_set:
            _dict['projectIssueAssignedFlag'] = None

        # set to None if project_issue_bill_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_bill_flag is None and "project_issue_bill_flag" in self.model_fields_set:
            _dict['projectIssueBillFlag'] = None

        # set to None if project_issue_budget_hrs_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_budget_hrs_flag is None and "project_issue_budget_hrs_flag" in self.model_fields_set:
            _dict['projectIssueBudgetHrsFlag'] = None

        # set to None if project_issue_scheduled_finish_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_scheduled_finish_flag is None and "project_issue_scheduled_finish_flag" in self.model_fields_set:
            _dict['projectIssueScheduledFinishFlag'] = None

        # set to None if project_issue_scheduled_hrs_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_scheduled_hrs_flag is None and "project_issue_scheduled_hrs_flag" in self.model_fields_set:
            _dict['projectIssueScheduledHrsFlag'] = None

        # set to None if project_issue_scheduled_start_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_scheduled_start_flag is None and "project_issue_scheduled_start_flag" in self.model_fields_set:
            _dict['projectIssueScheduledStartFlag'] = None

        # set to None if project_issue_status_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_issue_status_flag is None and "project_issue_status_flag" in self.model_fields_set:
            _dict['projectIssueStatusFlag'] = None

        # set to None if project_manager_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_manager_flag is None and "project_manager_flag" in self.model_fields_set:
            _dict['projectManagerFlag'] = None

        # set to None if project_name_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_name_flag is None and "project_name_flag" in self.model_fields_set:
            _dict['projectNameFlag'] = None

        # set to None if project_type_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_type_flag is None and "project_type_flag" in self.model_fields_set:
            _dict['projectTypeFlag'] = None

        # set to None if status_flag (nullable) is None
        # and model_fields_set contains the field
        if self.status_flag is None and "status_flag" in self.model_fields_set:
            _dict['statusFlag'] = None

        # set to None if time_material_actual_finish_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_actual_finish_flag is None and "time_material_actual_finish_flag" in self.model_fields_set:
            _dict['timeMaterialActualFinishFlag'] = None

        # set to None if time_material_actual_hrs_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_actual_hrs_flag is None and "time_material_actual_hrs_flag" in self.model_fields_set:
            _dict['timeMaterialActualHrsFlag'] = None

        # set to None if time_material_actual_start_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_actual_start_flag is None and "time_material_actual_start_flag" in self.model_fields_set:
            _dict['timeMaterialActualStartFlag'] = None

        # set to None if time_material_assigned_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_assigned_flag is None and "time_material_assigned_flag" in self.model_fields_set:
            _dict['timeMaterialAssignedFlag'] = None

        # set to None if time_material_bill_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_bill_flag is None and "time_material_bill_flag" in self.model_fields_set:
            _dict['timeMaterialBillFlag'] = None

        # set to None if time_material_budget_hrs_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_budget_hrs_flag is None and "time_material_budget_hrs_flag" in self.model_fields_set:
            _dict['timeMaterialBudgetHrsFlag'] = None

        # set to None if time_material_scheduled_finish_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_scheduled_finish_flag is None and "time_material_scheduled_finish_flag" in self.model_fields_set:
            _dict['timeMaterialScheduledFinishFlag'] = None

        # set to None if time_material_scheduled_hrs_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_scheduled_hrs_flag is None and "time_material_scheduled_hrs_flag" in self.model_fields_set:
            _dict['timeMaterialScheduledHrsFlag'] = None

        # set to None if time_material_scheduled_start_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_scheduled_start_flag is None and "time_material_scheduled_start_flag" in self.model_fields_set:
            _dict['timeMaterialScheduledStartFlag'] = None

        # set to None if time_material_status_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_material_status_flag is None and "time_material_status_flag" in self.model_fields_set:
            _dict['timeMaterialStatusFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PortalConfigurationProjectSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PortalConfigurationProjectSetup) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "billingMethodFlag": obj.get("billingMethodFlag"),
            "contactFlag": obj.get("contactFlag"),
            "descriptionFlag": obj.get("descriptionFlag"),
            "estimatedEndFlag": obj.get("estimatedEndFlag"),
            "estimatedStartFlag": obj.get("estimatedStartFlag"),
            "fixedFeeActualFinishFlag": obj.get("fixedFeeActualFinishFlag"),
            "fixedFeeActualHrsFlag": obj.get("fixedFeeActualHrsFlag"),
            "fixedFeeActualStartFlag": obj.get("fixedFeeActualStartFlag"),
            "fixedFeeAssignedFlag": obj.get("fixedFeeAssignedFlag"),
            "fixedFeeBillFlag": obj.get("fixedFeeBillFlag"),
            "fixedFeeBudgetHrsFlag": obj.get("fixedFeeBudgetHrsFlag"),
            "fixedFeeScheduledFinishFlag": obj.get("fixedFeeScheduledFinishFlag"),
            "fixedFeeScheduledHrsFlag": obj.get("fixedFeeScheduledHrsFlag"),
            "fixedFeeScheduledStartFlag": obj.get("fixedFeeScheduledStartFlag"),
            "fixedFeeStatusFlag": obj.get("fixedFeeStatusFlag"),
            "id": obj.get("id"),
            "lastUpdatedFlag": obj.get("lastUpdatedFlag"),
            "onlyDisplay": obj.get("onlyDisplay"),
            "portalConfig": PortalConfigurationReference.from_dict(obj.get("portalConfig")) if obj.get("portalConfig") is not None else None,
            "projectDetailTotalHoursFlag": obj.get("projectDetailTotalHoursFlag"),
            "projectIssueActualFinishFlag": obj.get("projectIssueActualFinishFlag"),
            "projectIssueActualHrsFlag": obj.get("projectIssueActualHrsFlag"),
            "projectIssueActualStartFlag": obj.get("projectIssueActualStartFlag"),
            "projectIssueAssignedFlag": obj.get("projectIssueAssignedFlag"),
            "projectIssueBillFlag": obj.get("projectIssueBillFlag"),
            "projectIssueBudgetHrsFlag": obj.get("projectIssueBudgetHrsFlag"),
            "projectIssueScheduledFinishFlag": obj.get("projectIssueScheduledFinishFlag"),
            "projectIssueScheduledHrsFlag": obj.get("projectIssueScheduledHrsFlag"),
            "projectIssueScheduledStartFlag": obj.get("projectIssueScheduledStartFlag"),
            "projectIssueStatusFlag": obj.get("projectIssueStatusFlag"),
            "projectManagerFlag": obj.get("projectManagerFlag"),
            "projectNameFlag": obj.get("projectNameFlag"),
            "projectTypeFlag": obj.get("projectTypeFlag"),
            "statusFlag": obj.get("statusFlag"),
            "timeMaterialActualFinishFlag": obj.get("timeMaterialActualFinishFlag"),
            "timeMaterialActualHrsFlag": obj.get("timeMaterialActualHrsFlag"),
            "timeMaterialActualStartFlag": obj.get("timeMaterialActualStartFlag"),
            "timeMaterialAssignedFlag": obj.get("timeMaterialAssignedFlag"),
            "timeMaterialBillFlag": obj.get("timeMaterialBillFlag"),
            "timeMaterialBudgetHrsFlag": obj.get("timeMaterialBudgetHrsFlag"),
            "timeMaterialScheduledFinishFlag": obj.get("timeMaterialScheduledFinishFlag"),
            "timeMaterialScheduledHrsFlag": obj.get("timeMaterialScheduledHrsFlag"),
            "timeMaterialScheduledStartFlag": obj.get("timeMaterialScheduledStartFlag"),
            "timeMaterialStatusFlag": obj.get("timeMaterialStatusFlag")
        })
        return _obj


