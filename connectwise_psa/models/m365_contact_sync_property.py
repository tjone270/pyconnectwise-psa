# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class M365ContactSyncProperty(BaseModel):
    """
    M365ContactSyncProperty
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    company_rec_id: Optional[StrictInt] = Field(default=None, alias="companyRecID")
    exclude_include_flag: Optional[StrictBool] = Field(default=None, alias="excludeIncludeFlag")
    id: Optional[StrictInt] = None
    include_exclude_type: Optional[StrictStr] = Field(default=None, alias="includeExcludeType")
    property_type: Optional[StrictStr] = Field(default=None, alias="propertyType")
    wild_card: Optional[StrictStr] = Field(default=None, alias="wildCard")
    __properties: ClassVar[List[str]] = ["_info", "companyRecID", "excludeIncludeFlag", "id", "includeExcludeType", "propertyType", "wildCard"]

    @field_validator('include_exclude_type')
    def include_exclude_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('All', 'M365Property', 'None'):
            raise ValueError("must be one of enum values ('All', 'M365Property', 'None')")
        return value

    @field_validator('property_type')
    def property_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('City', 'DepartmentContactSync', 'Email', 'DistributionGroup', 'JobTitle', 'AssignedLicenses', 'DisplayName', 'OfficeLocation', 'ReportManager', 'State', 'EmployeeType', 'UserType'):
            raise ValueError("must be one of enum values ('City', 'DepartmentContactSync', 'Email', 'DistributionGroup', 'JobTitle', 'AssignedLicenses', 'DisplayName', 'OfficeLocation', 'ReportManager', 'State', 'EmployeeType', 'UserType')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of M365ContactSyncProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if include_exclude_type (nullable) is None
        # and model_fields_set contains the field
        if self.include_exclude_type is None and "include_exclude_type" in self.model_fields_set:
            _dict['includeExcludeType'] = None

        # set to None if property_type (nullable) is None
        # and model_fields_set contains the field
        if self.property_type is None and "property_type" in self.model_fields_set:
            _dict['propertyType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of M365ContactSyncProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in M365ContactSyncProperty) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "companyRecID": obj.get("companyRecID"),
            "excludeIncludeFlag": obj.get("excludeIncludeFlag"),
            "id": obj.get("id"),
            "includeExcludeType": obj.get("includeExcludeType"),
            "propertyType": obj.get("propertyType"),
            "wildCard": obj.get("wildCard")
        })
        return _obj


