# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.board_reference import BoardReference
from connectwise_psa.models.calendar_reference import CalendarReference
from connectwise_psa.models.country_reference import CountryReference
from connectwise_psa.models.directional_sync_reference import DirectionalSyncReference
from connectwise_psa.models.document_reference import DocumentReference
from connectwise_psa.models.ldap_configuration_reference import LdapConfigurationReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.member_type_reference import MemberTypeReference
from connectwise_psa.models.project_board_reference import ProjectBoardReference
from connectwise_psa.models.report_card_reference import ReportCardReference
from connectwise_psa.models.security_role_reference import SecurityRoleReference
from connectwise_psa.models.service_location_reference import ServiceLocationReference
from connectwise_psa.models.structure_reference import StructureReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.time_zone_setup_reference import TimeZoneSetupReference
from connectwise_psa.models.warehouse_bin_reference import WarehouseBinReference
from connectwise_psa.models.warehouse_reference import WarehouseReference
from connectwise_psa.models.work_role_reference import WorkRoleReference
from connectwise_psa.models.work_type_reference import WorkTypeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MyMember(BaseModel):
    """
    MyMember
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    admin_flag: Optional[StrictBool] = Field(default=None, alias="adminFlag")
    agreement_invoicing_display_options: Optional[StrictStr] = Field(default=None, alias="agreementInvoicingDisplayOptions")
    allow_expenses_entered_against_companies_flag: Optional[StrictBool] = Field(default=None, alias="allowExpensesEnteredAgainstCompaniesFlag")
    allow_in_cell_entry_on_time_sheet: Optional[StrictBool] = Field(default=None, alias="allowInCellEntryOnTimeSheet")
    authentication_service_type: Optional[StrictStr] = Field(default=None, alias="authenticationServiceType")
    billable_forecast: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="billableForecast")
    calendar: Optional[CalendarReference] = None
    calendar_sync_integration_flag: Optional[StrictBool] = Field(default=None, alias="calendarSyncIntegrationFlag")
    company_activity_tab_format: Optional[StrictStr] = Field(default=None, alias="companyActivityTabFormat")
    corelytics_password: Optional[StrictStr] = Field(default=None, alias="corelyticsPassword")
    corelytics_username: Optional[StrictStr] = Field(default=None, alias="corelyticsUsername")
    country: Optional[CountryReference] = None
    daily_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dailyCapacity")
    days_tolerance: Optional[StrictInt] = Field(default=None, alias="daysTolerance")
    default_department: Optional[SystemDepartmentReference] = Field(default=None, alias="defaultDepartment")
    default_email: Optional[StrictStr] = Field(default=None, alias="defaultEmail")
    default_location: Optional[SystemLocationReference] = Field(default=None, alias="defaultLocation")
    default_phone: Optional[StrictStr] = Field(default=None, alias="defaultPhone")
    directional_sync: Optional[DirectionalSyncReference] = Field(default=None, alias="directionalSync")
    disable_online_flag: Optional[StrictBool] = Field(default=None, alias="disableOnlineFlag")
    employee_identifer: Optional[StrictStr] = Field(default=None, alias="employeeIdentifer")
    enable_ldap_authentication_flag: Optional[StrictBool] = Field(default=None, alias="enableLdapAuthenticationFlag")
    enable_mobile_flag: Optional[StrictBool] = Field(default=None, alias="enableMobileFlag")
    enable_mobile_gps_flag: Optional[StrictBool] = Field(default=None, alias="enableMobileGpsFlag")
    enter_time_against_company_flag: Optional[StrictBool] = Field(default=None, alias="enterTimeAgainstCompanyFlag")
    excluded_project_board_ids: Optional[List[StrictInt]] = Field(default=None, alias="excludedProjectBoardIds")
    excluded_service_board_ids: Optional[List[StrictInt]] = Field(default=None, alias="excludedServiceBoardIds")
    expense_approver: Optional[MemberReference] = Field(default=None, alias="expenseApprover")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    hide_member_in_dispatch_portal_flag: Optional[StrictBool] = Field(default=None, alias="hideMemberInDispatchPortalFlag")
    hire_date: Optional[StrictStr] = Field(default=None, alias="hireDate")
    home_email: Optional[StrictStr] = Field(default=None, alias="homeEmail")
    home_extension: Optional[StrictStr] = Field(default=None, alias="homeExtension")
    home_phone: Optional[StrictStr] = Field(default=None, alias="homePhone")
    hourly_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="hourlyCost")
    hourly_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="hourlyRate")
    id: Optional[StrictInt] = None
    identifier: Optional[StrictStr] = None
    inactive_date: Optional[StrictStr] = Field(default=None, alias="inactiveDate")
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    include_in_utilization_reporting_flag: Optional[StrictBool] = Field(default=None, alias="includeInUtilizationReportingFlag")
    invoice_screen_default_tab_format: Optional[StrictStr] = Field(default=None, alias="invoiceScreenDefaultTabFormat")
    invoice_time_tab_format: Optional[StrictStr] = Field(default=None, alias="invoiceTimeTabFormat")
    invoicing_display_options: Optional[StrictStr] = Field(default=None, alias="invoicingDisplayOptions")
    last_login: Optional[StrictStr] = Field(default=None, alias="lastLogin")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    ldap_configuration: Optional[LdapConfigurationReference] = Field(default=None, alias="ldapConfiguration")
    ldap_user_name: Optional[StrictStr] = Field(default=None, alias="ldapUserName")
    license_class: Optional[StrictStr] = Field(default=None, description="F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member", alias="licenseClass")
    mapi_name: Optional[StrictStr] = Field(default=None, alias="mapiName")
    middle_initial: Optional[StrictStr] = Field(default=None, alias="middleInitial")
    minimum_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minimumHours")
    mobile_email: Optional[StrictStr] = Field(default=None, alias="mobileEmail")
    mobile_extension: Optional[StrictStr] = Field(default=None, alias="mobileExtension")
    mobile_phone: Optional[StrictStr] = Field(default=None, alias="mobilePhone")
    notes: Optional[StrictStr] = None
    office_email: Optional[StrictStr] = Field(default=None, alias="officeEmail")
    office_extension: Optional[StrictStr] = Field(default=None, alias="officeExtension")
    office_phone: Optional[StrictStr] = Field(default=None, alias="officePhone")
    password: Optional[StrictStr] = Field(default=None, description="ConditionallyRequired. API Member will get random password generated")
    photo: Optional[DocumentReference] = None
    project_default_board: Optional[ProjectBoardReference] = Field(default=None, alias="projectDefaultBoard")
    project_default_department: Optional[SystemDepartmentReference] = Field(default=None, alias="projectDefaultDepartment")
    project_default_location: Optional[SystemLocationReference] = Field(default=None, alias="projectDefaultLocation")
    report_card: Optional[ReportCardReference] = Field(default=None, alias="reportCard")
    reports_to: Optional[MemberReference] = Field(default=None, alias="reportsTo")
    require_expense_entry_flag: Optional[StrictBool] = Field(default=None, alias="requireExpenseEntryFlag")
    require_start_and_end_time_on_time_entry_flag: Optional[StrictBool] = Field(default=None, alias="requireStartAndEndTimeOnTimeEntryFlag")
    require_time_sheet_entry_flag: Optional[StrictBool] = Field(default=None, alias="requireTimeSheetEntryFlag")
    restrict_default_sales_territory_flag: Optional[StrictBool] = Field(default=None, alias="restrictDefaultSalesTerritoryFlag")
    restrict_default_warehouse_bin_flag: Optional[StrictBool] = Field(default=None, alias="restrictDefaultWarehouseBinFlag")
    restrict_default_warehouse_flag: Optional[StrictBool] = Field(default=None, alias="restrictDefaultWarehouseFlag")
    restrict_department_flag: Optional[StrictBool] = Field(default=None, alias="restrictDepartmentFlag")
    restrict_location_flag: Optional[StrictBool] = Field(default=None, alias="restrictLocationFlag")
    restrict_project_default_department_flag: Optional[StrictBool] = Field(default=None, alias="restrictProjectDefaultDepartmentFlag")
    restrict_project_default_location_flag: Optional[StrictBool] = Field(default=None, alias="restrictProjectDefaultLocationFlag")
    restrict_schedule_flag: Optional[StrictBool] = Field(default=None, alias="restrictScheduleFlag")
    restrict_service_default_department_flag: Optional[StrictBool] = Field(default=None, alias="restrictServiceDefaultDepartmentFlag")
    restrict_service_default_location_flag: Optional[StrictBool] = Field(default=None, alias="restrictServiceDefaultLocationFlag")
    sales_default_location: Optional[SystemLocationReference] = Field(default=None, alias="salesDefaultLocation")
    schedule_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="scheduleCapacity")
    schedule_default_department: Optional[SystemDepartmentReference] = Field(default=None, alias="scheduleDefaultDepartment")
    schedule_default_location: Optional[SystemLocationReference] = Field(default=None, alias="scheduleDefaultLocation")
    security_location: Optional[SystemLocationReference] = Field(default=None, alias="securityLocation")
    security_role: Optional[SecurityRoleReference] = Field(default=None, alias="securityRole")
    service_board_team_ids: Optional[List[StrictInt]] = Field(default=None, alias="serviceBoardTeamIds")
    service_default_board: Optional[BoardReference] = Field(default=None, alias="serviceDefaultBoard")
    service_default_department: Optional[SystemDepartmentReference] = Field(default=None, alias="serviceDefaultDepartment")
    service_default_location: Optional[SystemLocationReference] = Field(default=None, alias="serviceDefaultLocation")
    service_location: Optional[ServiceLocationReference] = Field(default=None, alias="serviceLocation")
    sso_client_id: Optional[StrictStr] = Field(default=None, alias="ssoClientId")
    sso_session_flag: Optional[StrictBool] = Field(default=None, alias="ssoSessionFlag")
    structure_level: Optional[StructureReference] = Field(default=None, alias="structureLevel")
    time_approver: Optional[MemberReference] = Field(default=None, alias="timeApprover")
    time_reminder_email_flag: Optional[StrictBool] = Field(default=None, alias="timeReminderEmailFlag")
    time_sheet_start_date: Optional[StrictStr] = Field(default=None, alias="timeSheetStartDate")
    time_zone: Optional[TimeZoneSetupReference] = Field(default=None, alias="timeZone")
    timebased_one_time_password_activated: Optional[StrictBool] = Field(default=None, alias="timebasedOneTimePasswordActivated")
    title: Optional[StrictStr] = None
    toast_notification_flag: Optional[StrictBool] = Field(default=None, alias="toastNotificationFlag")
    type: Optional[MemberTypeReference] = None
    vendor_number: Optional[StrictStr] = Field(default=None, alias="vendorNumber")
    warehouse: Optional[WarehouseReference] = None
    warehouse_bin: Optional[WarehouseBinReference] = Field(default=None, alias="warehouseBin")
    work_role: Optional[WorkRoleReference] = Field(default=None, alias="workRole")
    work_type: Optional[WorkTypeReference] = Field(default=None, alias="workType")
    __properties: ClassVar[List[str]] = ["_info", "adminFlag", "agreementInvoicingDisplayOptions", "allowExpensesEnteredAgainstCompaniesFlag", "allowInCellEntryOnTimeSheet", "authenticationServiceType", "billableForecast", "calendar", "calendarSyncIntegrationFlag", "companyActivityTabFormat", "corelyticsPassword", "corelyticsUsername", "country", "dailyCapacity", "daysTolerance", "defaultDepartment", "defaultEmail", "defaultLocation", "defaultPhone", "directionalSync", "disableOnlineFlag", "employeeIdentifer", "enableLdapAuthenticationFlag", "enableMobileFlag", "enableMobileGpsFlag", "enterTimeAgainstCompanyFlag", "excludedProjectBoardIds", "excludedServiceBoardIds", "expenseApprover", "firstName", "hideMemberInDispatchPortalFlag", "hireDate", "homeEmail", "homeExtension", "homePhone", "hourlyCost", "hourlyRate", "id", "identifier", "inactiveDate", "inactiveFlag", "includeInUtilizationReportingFlag", "invoiceScreenDefaultTabFormat", "invoiceTimeTabFormat", "invoicingDisplayOptions", "lastLogin", "lastName", "ldapConfiguration", "ldapUserName", "licenseClass", "mapiName", "middleInitial", "minimumHours", "mobileEmail", "mobileExtension", "mobilePhone", "notes", "officeEmail", "officeExtension", "officePhone", "password", "photo", "projectDefaultBoard", "projectDefaultDepartment", "projectDefaultLocation", "reportCard", "reportsTo", "requireExpenseEntryFlag", "requireStartAndEndTimeOnTimeEntryFlag", "requireTimeSheetEntryFlag", "restrictDefaultSalesTerritoryFlag", "restrictDefaultWarehouseBinFlag", "restrictDefaultWarehouseFlag", "restrictDepartmentFlag", "restrictLocationFlag", "restrictProjectDefaultDepartmentFlag", "restrictProjectDefaultLocationFlag", "restrictScheduleFlag", "restrictServiceDefaultDepartmentFlag", "restrictServiceDefaultLocationFlag", "salesDefaultLocation", "scheduleCapacity", "scheduleDefaultDepartment", "scheduleDefaultLocation", "securityLocation", "securityRole", "serviceBoardTeamIds", "serviceDefaultBoard", "serviceDefaultDepartment", "serviceDefaultLocation", "serviceLocation", "ssoClientId", "ssoSessionFlag", "structureLevel", "timeApprover", "timeReminderEmailFlag", "timeSheetStartDate", "timeZone", "timebasedOneTimePasswordActivated", "title", "toastNotificationFlag", "type", "vendorNumber", "warehouse", "warehouseBin", "workRole", "workType"]

    @field_validator('agreement_invoicing_display_options')
    def agreement_invoicing_display_options_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('RemainOnInvoicingScreen', 'ShowRecentInvoices'):
            raise ValueError("must be one of enum values ('RemainOnInvoicingScreen', 'ShowRecentInvoices')")
        return value

    @field_validator('authentication_service_type')
    def authentication_service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AuthAnvil', 'GoogleAuthenticator', 'Email'):
            raise ValueError("must be one of enum values ('AuthAnvil', 'GoogleAuthenticator', 'Email')")
        return value

    @field_validator('company_activity_tab_format')
    def company_activity_tab_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SummaryList', 'DetailList'):
            raise ValueError("must be one of enum values ('SummaryList', 'DetailList')")
        return value

    @field_validator('default_email')
    def default_email_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Office', 'Mobile', 'Home'):
            raise ValueError("must be one of enum values ('Office', 'Mobile', 'Home')")
        return value

    @field_validator('default_phone')
    def default_phone_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Office', 'Mobile', 'Home'):
            raise ValueError("must be one of enum values ('Office', 'Mobile', 'Home')")
        return value

    @field_validator('invoice_screen_default_tab_format')
    def invoice_screen_default_tab_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ShowInvoicingTab', 'ShowAgreementInvoicingTab'):
            raise ValueError("must be one of enum values ('ShowInvoicingTab', 'ShowAgreementInvoicingTab')")
        return value

    @field_validator('invoice_time_tab_format')
    def invoice_time_tab_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SummaryList', 'DetailList'):
            raise ValueError("must be one of enum values ('SummaryList', 'DetailList')")
        return value

    @field_validator('invoicing_display_options')
    def invoicing_display_options_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('RemainOnInvoicingScreen', 'ShowRecentInvoices'):
            raise ValueError("must be one of enum values ('RemainOnInvoicingScreen', 'ShowRecentInvoices')")
        return value

    @field_validator('license_class')
    def license_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('A', 'C', 'F', 'X'):
            raise ValueError("must be one of enum values ('A', 'C', 'F', 'X')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MyMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calendar
        if self.calendar:
            _dict['calendar'] = self.calendar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_department
        if self.default_department:
            _dict['defaultDepartment'] = self.default_department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_location
        if self.default_location:
            _dict['defaultLocation'] = self.default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of directional_sync
        if self.directional_sync:
            _dict['directionalSync'] = self.directional_sync.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expense_approver
        if self.expense_approver:
            _dict['expenseApprover'] = self.expense_approver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldap_configuration
        if self.ldap_configuration:
            _dict['ldapConfiguration'] = self.ldap_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of photo
        if self.photo:
            _dict['photo'] = self.photo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_default_board
        if self.project_default_board:
            _dict['projectDefaultBoard'] = self.project_default_board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_default_department
        if self.project_default_department:
            _dict['projectDefaultDepartment'] = self.project_default_department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_default_location
        if self.project_default_location:
            _dict['projectDefaultLocation'] = self.project_default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of report_card
        if self.report_card:
            _dict['reportCard'] = self.report_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reports_to
        if self.reports_to:
            _dict['reportsTo'] = self.reports_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sales_default_location
        if self.sales_default_location:
            _dict['salesDefaultLocation'] = self.sales_default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_default_department
        if self.schedule_default_department:
            _dict['scheduleDefaultDepartment'] = self.schedule_default_department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_default_location
        if self.schedule_default_location:
            _dict['scheduleDefaultLocation'] = self.schedule_default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_location
        if self.security_location:
            _dict['securityLocation'] = self.security_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_role
        if self.security_role:
            _dict['securityRole'] = self.security_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_default_board
        if self.service_default_board:
            _dict['serviceDefaultBoard'] = self.service_default_board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_default_department
        if self.service_default_department:
            _dict['serviceDefaultDepartment'] = self.service_default_department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_default_location
        if self.service_default_location:
            _dict['serviceDefaultLocation'] = self.service_default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_location
        if self.service_location:
            _dict['serviceLocation'] = self.service_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of structure_level
        if self.structure_level:
            _dict['structureLevel'] = self.structure_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_approver
        if self.time_approver:
            _dict['timeApprover'] = self.time_approver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_zone
        if self.time_zone:
            _dict['timeZone'] = self.time_zone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse
        if self.warehouse:
            _dict['warehouse'] = self.warehouse.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse_bin
        if self.warehouse_bin:
            _dict['warehouseBin'] = self.warehouse_bin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_role
        if self.work_role:
            _dict['workRole'] = self.work_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_type
        if self.work_type:
            _dict['workType'] = self.work_type.to_dict()
        # set to None if admin_flag (nullable) is None
        # and model_fields_set contains the field
        if self.admin_flag is None and "admin_flag" in self.model_fields_set:
            _dict['adminFlag'] = None

        # set to None if agreement_invoicing_display_options (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_invoicing_display_options is None and "agreement_invoicing_display_options" in self.model_fields_set:
            _dict['agreementInvoicingDisplayOptions'] = None

        # set to None if allow_expenses_entered_against_companies_flag (nullable) is None
        # and model_fields_set contains the field
        if self.allow_expenses_entered_against_companies_flag is None and "allow_expenses_entered_against_companies_flag" in self.model_fields_set:
            _dict['allowExpensesEnteredAgainstCompaniesFlag'] = None

        # set to None if allow_in_cell_entry_on_time_sheet (nullable) is None
        # and model_fields_set contains the field
        if self.allow_in_cell_entry_on_time_sheet is None and "allow_in_cell_entry_on_time_sheet" in self.model_fields_set:
            _dict['allowInCellEntryOnTimeSheet'] = None

        # set to None if authentication_service_type (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_service_type is None and "authentication_service_type" in self.model_fields_set:
            _dict['authenticationServiceType'] = None

        # set to None if billable_forecast (nullable) is None
        # and model_fields_set contains the field
        if self.billable_forecast is None and "billable_forecast" in self.model_fields_set:
            _dict['billableForecast'] = None

        # set to None if calendar_sync_integration_flag (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_sync_integration_flag is None and "calendar_sync_integration_flag" in self.model_fields_set:
            _dict['calendarSyncIntegrationFlag'] = None

        # set to None if company_activity_tab_format (nullable) is None
        # and model_fields_set contains the field
        if self.company_activity_tab_format is None and "company_activity_tab_format" in self.model_fields_set:
            _dict['companyActivityTabFormat'] = None

        # set to None if daily_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.daily_capacity is None and "daily_capacity" in self.model_fields_set:
            _dict['dailyCapacity'] = None

        # set to None if days_tolerance (nullable) is None
        # and model_fields_set contains the field
        if self.days_tolerance is None and "days_tolerance" in self.model_fields_set:
            _dict['daysTolerance'] = None

        # set to None if default_email (nullable) is None
        # and model_fields_set contains the field
        if self.default_email is None and "default_email" in self.model_fields_set:
            _dict['defaultEmail'] = None

        # set to None if default_phone (nullable) is None
        # and model_fields_set contains the field
        if self.default_phone is None and "default_phone" in self.model_fields_set:
            _dict['defaultPhone'] = None

        # set to None if disable_online_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disable_online_flag is None and "disable_online_flag" in self.model_fields_set:
            _dict['disableOnlineFlag'] = None

        # set to None if enable_ldap_authentication_flag (nullable) is None
        # and model_fields_set contains the field
        if self.enable_ldap_authentication_flag is None and "enable_ldap_authentication_flag" in self.model_fields_set:
            _dict['enableLdapAuthenticationFlag'] = None

        # set to None if enable_mobile_flag (nullable) is None
        # and model_fields_set contains the field
        if self.enable_mobile_flag is None and "enable_mobile_flag" in self.model_fields_set:
            _dict['enableMobileFlag'] = None

        # set to None if enable_mobile_gps_flag (nullable) is None
        # and model_fields_set contains the field
        if self.enable_mobile_gps_flag is None and "enable_mobile_gps_flag" in self.model_fields_set:
            _dict['enableMobileGpsFlag'] = None

        # set to None if enter_time_against_company_flag (nullable) is None
        # and model_fields_set contains the field
        if self.enter_time_against_company_flag is None and "enter_time_against_company_flag" in self.model_fields_set:
            _dict['enterTimeAgainstCompanyFlag'] = None

        # set to None if hide_member_in_dispatch_portal_flag (nullable) is None
        # and model_fields_set contains the field
        if self.hide_member_in_dispatch_portal_flag is None and "hide_member_in_dispatch_portal_flag" in self.model_fields_set:
            _dict['hideMemberInDispatchPortalFlag'] = None

        # set to None if hourly_cost (nullable) is None
        # and model_fields_set contains the field
        if self.hourly_cost is None and "hourly_cost" in self.model_fields_set:
            _dict['hourlyCost'] = None

        # set to None if hourly_rate (nullable) is None
        # and model_fields_set contains the field
        if self.hourly_rate is None and "hourly_rate" in self.model_fields_set:
            _dict['hourlyRate'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if include_in_utilization_reporting_flag (nullable) is None
        # and model_fields_set contains the field
        if self.include_in_utilization_reporting_flag is None and "include_in_utilization_reporting_flag" in self.model_fields_set:
            _dict['includeInUtilizationReportingFlag'] = None

        # set to None if invoice_screen_default_tab_format (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_screen_default_tab_format is None and "invoice_screen_default_tab_format" in self.model_fields_set:
            _dict['invoiceScreenDefaultTabFormat'] = None

        # set to None if invoice_time_tab_format (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_time_tab_format is None and "invoice_time_tab_format" in self.model_fields_set:
            _dict['invoiceTimeTabFormat'] = None

        # set to None if invoicing_display_options (nullable) is None
        # and model_fields_set contains the field
        if self.invoicing_display_options is None and "invoicing_display_options" in self.model_fields_set:
            _dict['invoicingDisplayOptions'] = None

        # set to None if license_class (nullable) is None
        # and model_fields_set contains the field
        if self.license_class is None and "license_class" in self.model_fields_set:
            _dict['licenseClass'] = None

        # set to None if minimum_hours (nullable) is None
        # and model_fields_set contains the field
        if self.minimum_hours is None and "minimum_hours" in self.model_fields_set:
            _dict['minimumHours'] = None

        # set to None if require_expense_entry_flag (nullable) is None
        # and model_fields_set contains the field
        if self.require_expense_entry_flag is None and "require_expense_entry_flag" in self.model_fields_set:
            _dict['requireExpenseEntryFlag'] = None

        # set to None if require_start_and_end_time_on_time_entry_flag (nullable) is None
        # and model_fields_set contains the field
        if self.require_start_and_end_time_on_time_entry_flag is None and "require_start_and_end_time_on_time_entry_flag" in self.model_fields_set:
            _dict['requireStartAndEndTimeOnTimeEntryFlag'] = None

        # set to None if require_time_sheet_entry_flag (nullable) is None
        # and model_fields_set contains the field
        if self.require_time_sheet_entry_flag is None and "require_time_sheet_entry_flag" in self.model_fields_set:
            _dict['requireTimeSheetEntryFlag'] = None

        # set to None if restrict_default_sales_territory_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_default_sales_territory_flag is None and "restrict_default_sales_territory_flag" in self.model_fields_set:
            _dict['restrictDefaultSalesTerritoryFlag'] = None

        # set to None if restrict_default_warehouse_bin_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_default_warehouse_bin_flag is None and "restrict_default_warehouse_bin_flag" in self.model_fields_set:
            _dict['restrictDefaultWarehouseBinFlag'] = None

        # set to None if restrict_default_warehouse_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_default_warehouse_flag is None and "restrict_default_warehouse_flag" in self.model_fields_set:
            _dict['restrictDefaultWarehouseFlag'] = None

        # set to None if restrict_department_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_department_flag is None and "restrict_department_flag" in self.model_fields_set:
            _dict['restrictDepartmentFlag'] = None

        # set to None if restrict_location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_location_flag is None and "restrict_location_flag" in self.model_fields_set:
            _dict['restrictLocationFlag'] = None

        # set to None if restrict_project_default_department_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_project_default_department_flag is None and "restrict_project_default_department_flag" in self.model_fields_set:
            _dict['restrictProjectDefaultDepartmentFlag'] = None

        # set to None if restrict_project_default_location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_project_default_location_flag is None and "restrict_project_default_location_flag" in self.model_fields_set:
            _dict['restrictProjectDefaultLocationFlag'] = None

        # set to None if restrict_schedule_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_schedule_flag is None and "restrict_schedule_flag" in self.model_fields_set:
            _dict['restrictScheduleFlag'] = None

        # set to None if restrict_service_default_department_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_service_default_department_flag is None and "restrict_service_default_department_flag" in self.model_fields_set:
            _dict['restrictServiceDefaultDepartmentFlag'] = None

        # set to None if restrict_service_default_location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_service_default_location_flag is None and "restrict_service_default_location_flag" in self.model_fields_set:
            _dict['restrictServiceDefaultLocationFlag'] = None

        # set to None if schedule_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_capacity is None and "schedule_capacity" in self.model_fields_set:
            _dict['scheduleCapacity'] = None

        # set to None if sso_session_flag (nullable) is None
        # and model_fields_set contains the field
        if self.sso_session_flag is None and "sso_session_flag" in self.model_fields_set:
            _dict['ssoSessionFlag'] = None

        # set to None if time_reminder_email_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_reminder_email_flag is None and "time_reminder_email_flag" in self.model_fields_set:
            _dict['timeReminderEmailFlag'] = None

        # set to None if timebased_one_time_password_activated (nullable) is None
        # and model_fields_set contains the field
        if self.timebased_one_time_password_activated is None and "timebased_one_time_password_activated" in self.model_fields_set:
            _dict['timebasedOneTimePasswordActivated'] = None

        # set to None if toast_notification_flag (nullable) is None
        # and model_fields_set contains the field
        if self.toast_notification_flag is None and "toast_notification_flag" in self.model_fields_set:
            _dict['toastNotificationFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MyMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in MyMember) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "adminFlag": obj.get("adminFlag"),
            "agreementInvoicingDisplayOptions": obj.get("agreementInvoicingDisplayOptions"),
            "allowExpensesEnteredAgainstCompaniesFlag": obj.get("allowExpensesEnteredAgainstCompaniesFlag"),
            "allowInCellEntryOnTimeSheet": obj.get("allowInCellEntryOnTimeSheet"),
            "authenticationServiceType": obj.get("authenticationServiceType"),
            "billableForecast": obj.get("billableForecast"),
            "calendar": CalendarReference.from_dict(obj.get("calendar")) if obj.get("calendar") is not None else None,
            "calendarSyncIntegrationFlag": obj.get("calendarSyncIntegrationFlag"),
            "companyActivityTabFormat": obj.get("companyActivityTabFormat"),
            "corelyticsPassword": obj.get("corelyticsPassword"),
            "corelyticsUsername": obj.get("corelyticsUsername"),
            "country": CountryReference.from_dict(obj.get("country")) if obj.get("country") is not None else None,
            "dailyCapacity": obj.get("dailyCapacity"),
            "daysTolerance": obj.get("daysTolerance"),
            "defaultDepartment": SystemDepartmentReference.from_dict(obj.get("defaultDepartment")) if obj.get("defaultDepartment") is not None else None,
            "defaultEmail": obj.get("defaultEmail"),
            "defaultLocation": SystemLocationReference.from_dict(obj.get("defaultLocation")) if obj.get("defaultLocation") is not None else None,
            "defaultPhone": obj.get("defaultPhone"),
            "directionalSync": DirectionalSyncReference.from_dict(obj.get("directionalSync")) if obj.get("directionalSync") is not None else None,
            "disableOnlineFlag": obj.get("disableOnlineFlag"),
            "employeeIdentifer": obj.get("employeeIdentifer"),
            "enableLdapAuthenticationFlag": obj.get("enableLdapAuthenticationFlag"),
            "enableMobileFlag": obj.get("enableMobileFlag"),
            "enableMobileGpsFlag": obj.get("enableMobileGpsFlag"),
            "enterTimeAgainstCompanyFlag": obj.get("enterTimeAgainstCompanyFlag"),
            "excludedProjectBoardIds": obj.get("excludedProjectBoardIds"),
            "excludedServiceBoardIds": obj.get("excludedServiceBoardIds"),
            "expenseApprover": MemberReference.from_dict(obj.get("expenseApprover")) if obj.get("expenseApprover") is not None else None,
            "firstName": obj.get("firstName"),
            "hideMemberInDispatchPortalFlag": obj.get("hideMemberInDispatchPortalFlag"),
            "hireDate": obj.get("hireDate"),
            "homeEmail": obj.get("homeEmail"),
            "homeExtension": obj.get("homeExtension"),
            "homePhone": obj.get("homePhone"),
            "hourlyCost": obj.get("hourlyCost"),
            "hourlyRate": obj.get("hourlyRate"),
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "inactiveDate": obj.get("inactiveDate"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "includeInUtilizationReportingFlag": obj.get("includeInUtilizationReportingFlag"),
            "invoiceScreenDefaultTabFormat": obj.get("invoiceScreenDefaultTabFormat"),
            "invoiceTimeTabFormat": obj.get("invoiceTimeTabFormat"),
            "invoicingDisplayOptions": obj.get("invoicingDisplayOptions"),
            "lastLogin": obj.get("lastLogin"),
            "lastName": obj.get("lastName"),
            "ldapConfiguration": LdapConfigurationReference.from_dict(obj.get("ldapConfiguration")) if obj.get("ldapConfiguration") is not None else None,
            "ldapUserName": obj.get("ldapUserName"),
            "licenseClass": obj.get("licenseClass"),
            "mapiName": obj.get("mapiName"),
            "middleInitial": obj.get("middleInitial"),
            "minimumHours": obj.get("minimumHours"),
            "mobileEmail": obj.get("mobileEmail"),
            "mobileExtension": obj.get("mobileExtension"),
            "mobilePhone": obj.get("mobilePhone"),
            "notes": obj.get("notes"),
            "officeEmail": obj.get("officeEmail"),
            "officeExtension": obj.get("officeExtension"),
            "officePhone": obj.get("officePhone"),
            "password": obj.get("password"),
            "photo": DocumentReference.from_dict(obj.get("photo")) if obj.get("photo") is not None else None,
            "projectDefaultBoard": ProjectBoardReference.from_dict(obj.get("projectDefaultBoard")) if obj.get("projectDefaultBoard") is not None else None,
            "projectDefaultDepartment": SystemDepartmentReference.from_dict(obj.get("projectDefaultDepartment")) if obj.get("projectDefaultDepartment") is not None else None,
            "projectDefaultLocation": SystemLocationReference.from_dict(obj.get("projectDefaultLocation")) if obj.get("projectDefaultLocation") is not None else None,
            "reportCard": ReportCardReference.from_dict(obj.get("reportCard")) if obj.get("reportCard") is not None else None,
            "reportsTo": MemberReference.from_dict(obj.get("reportsTo")) if obj.get("reportsTo") is not None else None,
            "requireExpenseEntryFlag": obj.get("requireExpenseEntryFlag"),
            "requireStartAndEndTimeOnTimeEntryFlag": obj.get("requireStartAndEndTimeOnTimeEntryFlag"),
            "requireTimeSheetEntryFlag": obj.get("requireTimeSheetEntryFlag"),
            "restrictDefaultSalesTerritoryFlag": obj.get("restrictDefaultSalesTerritoryFlag"),
            "restrictDefaultWarehouseBinFlag": obj.get("restrictDefaultWarehouseBinFlag"),
            "restrictDefaultWarehouseFlag": obj.get("restrictDefaultWarehouseFlag"),
            "restrictDepartmentFlag": obj.get("restrictDepartmentFlag"),
            "restrictLocationFlag": obj.get("restrictLocationFlag"),
            "restrictProjectDefaultDepartmentFlag": obj.get("restrictProjectDefaultDepartmentFlag"),
            "restrictProjectDefaultLocationFlag": obj.get("restrictProjectDefaultLocationFlag"),
            "restrictScheduleFlag": obj.get("restrictScheduleFlag"),
            "restrictServiceDefaultDepartmentFlag": obj.get("restrictServiceDefaultDepartmentFlag"),
            "restrictServiceDefaultLocationFlag": obj.get("restrictServiceDefaultLocationFlag"),
            "salesDefaultLocation": SystemLocationReference.from_dict(obj.get("salesDefaultLocation")) if obj.get("salesDefaultLocation") is not None else None,
            "scheduleCapacity": obj.get("scheduleCapacity"),
            "scheduleDefaultDepartment": SystemDepartmentReference.from_dict(obj.get("scheduleDefaultDepartment")) if obj.get("scheduleDefaultDepartment") is not None else None,
            "scheduleDefaultLocation": SystemLocationReference.from_dict(obj.get("scheduleDefaultLocation")) if obj.get("scheduleDefaultLocation") is not None else None,
            "securityLocation": SystemLocationReference.from_dict(obj.get("securityLocation")) if obj.get("securityLocation") is not None else None,
            "securityRole": SecurityRoleReference.from_dict(obj.get("securityRole")) if obj.get("securityRole") is not None else None,
            "serviceBoardTeamIds": obj.get("serviceBoardTeamIds"),
            "serviceDefaultBoard": BoardReference.from_dict(obj.get("serviceDefaultBoard")) if obj.get("serviceDefaultBoard") is not None else None,
            "serviceDefaultDepartment": SystemDepartmentReference.from_dict(obj.get("serviceDefaultDepartment")) if obj.get("serviceDefaultDepartment") is not None else None,
            "serviceDefaultLocation": SystemLocationReference.from_dict(obj.get("serviceDefaultLocation")) if obj.get("serviceDefaultLocation") is not None else None,
            "serviceLocation": ServiceLocationReference.from_dict(obj.get("serviceLocation")) if obj.get("serviceLocation") is not None else None,
            "ssoClientId": obj.get("ssoClientId"),
            "ssoSessionFlag": obj.get("ssoSessionFlag"),
            "structureLevel": StructureReference.from_dict(obj.get("structureLevel")) if obj.get("structureLevel") is not None else None,
            "timeApprover": MemberReference.from_dict(obj.get("timeApprover")) if obj.get("timeApprover") is not None else None,
            "timeReminderEmailFlag": obj.get("timeReminderEmailFlag"),
            "timeSheetStartDate": obj.get("timeSheetStartDate"),
            "timeZone": TimeZoneSetupReference.from_dict(obj.get("timeZone")) if obj.get("timeZone") is not None else None,
            "timebasedOneTimePasswordActivated": obj.get("timebasedOneTimePasswordActivated"),
            "title": obj.get("title"),
            "toastNotificationFlag": obj.get("toastNotificationFlag"),
            "type": MemberTypeReference.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "vendorNumber": obj.get("vendorNumber"),
            "warehouse": WarehouseReference.from_dict(obj.get("warehouse")) if obj.get("warehouse") is not None else None,
            "warehouseBin": WarehouseBinReference.from_dict(obj.get("warehouseBin")) if obj.get("warehouseBin") is not None else None,
            "workRole": WorkRoleReference.from_dict(obj.get("workRole")) if obj.get("workRole") is not None else None,
            "workType": WorkTypeReference.from_dict(obj.get("workType")) if obj.get("workType") is not None else None
        })
        return _obj


