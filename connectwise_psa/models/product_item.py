# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.agreement_reference import AgreementReference
from connectwise_psa.models.billing_unit_reference import BillingUnitReference
from connectwise_psa.models.catalog_item_reference import CatalogItemReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.entity_type_reference import EntityTypeReference
from connectwise_psa.models.invoice_grouping_reference import InvoiceGroupingReference
from connectwise_psa.models.invoice_reference import InvoiceReference
from connectwise_psa.models.opportunity_reference import OpportunityReference
from connectwise_psa.models.opportunity_status_reference import OpportunityStatusReference
from connectwise_psa.models.product_recurring import ProductRecurring
from connectwise_psa.models.project_phase_reference import ProjectPhaseReference
from connectwise_psa.models.project_reference import ProjectReference
from connectwise_psa.models.sales_order_reference import SalesOrderReference
from connectwise_psa.models.sla_reference import SLAReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.ticket_reference import TicketReference
from connectwise_psa.models.warehouse_bin_reference import WarehouseBinReference
from connectwise_psa.models.warehouse_reference import WarehouseReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProductItem(BaseModel):
    """
    ProductItem
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    add_components_flag: Optional[StrictBool] = Field(default=None, alias="addComponentsFlag")
    agreement: Optional[AgreementReference] = None
    agreement_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="agreementAmount")
    billable_option: Optional[StrictStr] = Field(alias="billableOption")
    business_unit: Optional[BillingUnitReference] = Field(default=None, alias="businessUnit")
    business_unit_id: Optional[StrictInt] = Field(default=None, description=" Required On Updates;", alias="businessUnitId")
    bypass_forecast_update: Optional[StrictBool] = Field(default=None, alias="bypassForecastUpdate")
    calculated_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="calculatedCost")
    calculated_cost_flag: Optional[StrictBool] = Field(default=None, alias="calculatedCostFlag")
    calculated_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="calculatedPrice")
    calculated_price_flag: Optional[StrictBool] = Field(default=None, alias="calculatedPriceFlag")
    cancelled_by: Optional[StrictInt] = Field(default=None, alias="cancelledBy")
    cancelled_date: Optional[datetime] = Field(default=None, alias="cancelledDate")
    cancelled_flag: Optional[StrictBool] = Field(default=None, alias="cancelledFlag")
    cancelled_reason: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="cancelledReason")
    catalog_item: Optional[CatalogItemReference] = Field(default=None, alias="catalogItem")
    company: Optional[CompanyReference] = None
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    customer_description: Optional[StrictStr] = Field(default=None, description=" Max length: 6000; Required On Updates;", alias="customerDescription")
    description: Optional[StrictStr] = Field(default=None, description=" Max length: 2000;")
    discount: Optional[Union[StrictFloat, StrictInt]] = None
    dropship_flag: Optional[StrictBool] = Field(default=None, alias="dropshipFlag")
    entity_type: Optional[EntityTypeReference] = Field(default=None, alias="entityType")
    forecast_detail_id: Optional[StrictInt] = Field(default=None, alias="forecastDetailId")
    forecast_status: Optional[OpportunityStatusReference] = Field(default=None, alias="forecastStatus")
    id: Optional[StrictInt] = None
    ignore_pricing_schedules_flag: Optional[StrictBool] = Field(default=None, alias="ignorePricingSchedulesFlag")
    integration_x_ref: Optional[StrictStr] = Field(default=None, alias="integrationXRef")
    internal_notes: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="internalNotes")
    invoice: Optional[InvoiceReference] = None
    invoice_grouping: Optional[InvoiceGroupingReference] = Field(default=None, alias="invoiceGrouping")
    list_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="listPrice")
    location: Optional[SystemLocationReference] = None
    location_id: Optional[StrictInt] = Field(default=None, description=" Required On Updates;", alias="locationId")
    minimum_stock_flag: Optional[StrictBool] = Field(default=None, alias="minimumStockFlag")
    need_to_order_quantity: Optional[StrictInt] = Field(default=None, alias="needToOrderQuantity")
    need_to_purchase_flag: Optional[StrictBool] = Field(default=None, alias="needToPurchaseFlag")
    opportunity: Optional[OpportunityReference] = None
    phase: Optional[ProjectPhaseReference] = None
    phase_product_flag: Optional[StrictBool] = Field(default=None, alias="phaseProductFlag")
    po_approved_flag: Optional[StrictBool] = Field(default=None, alias="poApprovedFlag")
    price: Optional[Union[StrictFloat, StrictInt]] = None
    price_method: Optional[StrictStr] = Field(default=None, alias="priceMethod")
    product_class: Optional[StrictStr] = Field(default=None, alias="productClass")
    product_supplied_flag: Optional[StrictBool] = Field(default=None, alias="productSuppliedFlag")
    project: Optional[ProjectReference] = None
    purchase_date: Optional[datetime] = Field(default=None, alias="purchaseDate")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    quantity_cancelled: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="quantityCancelled")
    recurring: Optional[ProductRecurring] = None
    sales_order: Optional[SalesOrderReference] = Field(default=None, alias="salesOrder")
    sequence_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sequenceNumber")
    serial_number_ids: Optional[List[StrictInt]] = Field(default=None, alias="serialNumberIds")
    serial_numbers: Optional[List[StrictStr]] = Field(default=None, alias="serialNumbers")
    ship_set: Optional[StrictStr] = Field(default=None, description=" Max length: 10;", alias="shipSet")
    sla: Optional[SLAReference] = None
    special_order_flag: Optional[StrictBool] = Field(default=None, alias="specialOrderFlag")
    sub_contractor_amount_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="subContractorAmountLimit")
    sub_contractor_ship_to_id: Optional[StrictInt] = Field(default=None, alias="subContractorShipToId")
    taxable_flag: Optional[StrictBool] = Field(default=None, alias="taxableFlag")
    ticket: Optional[TicketReference] = None
    vendor: Optional[CompanyReference] = None
    vendor_sku: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="vendorSku")
    warehouse: Optional[StrictStr] = None
    warehouse_bin: Optional[StrictStr] = Field(default=None, alias="warehouseBin")
    warehouse_bin_id: Optional[StrictInt] = Field(default=None, alias="warehouseBinId")
    warehouse_bin_id_object: Optional[WarehouseBinReference] = Field(default=None, alias="warehouseBinIdObject")
    warehouse_id: Optional[StrictInt] = Field(default=None, alias="warehouseId")
    warehouse_id_object: Optional[WarehouseReference] = Field(default=None, alias="warehouseIdObject")
    __properties: ClassVar[List[str]] = ["_info", "addComponentsFlag", "agreement", "agreementAmount", "billableOption", "businessUnit", "businessUnitId", "bypassForecastUpdate", "calculatedCost", "calculatedCostFlag", "calculatedPrice", "calculatedPriceFlag", "cancelledBy", "cancelledDate", "cancelledFlag", "cancelledReason", "catalogItem", "company", "cost", "customFields", "customerDescription", "description", "discount", "dropshipFlag", "entityType", "forecastDetailId", "forecastStatus", "id", "ignorePricingSchedulesFlag", "integrationXRef", "internalNotes", "invoice", "invoiceGrouping", "listPrice", "location", "locationId", "minimumStockFlag", "needToOrderQuantity", "needToPurchaseFlag", "opportunity", "phase", "phaseProductFlag", "poApprovedFlag", "price", "priceMethod", "productClass", "productSuppliedFlag", "project", "purchaseDate", "quantity", "quantityCancelled", "recurring", "salesOrder", "sequenceNumber", "serialNumberIds", "serialNumbers", "shipSet", "sla", "specialOrderFlag", "subContractorAmountLimit", "subContractorShipToId", "taxableFlag", "ticket", "vendor", "vendorSku", "warehouse", "warehouseBin", "warehouseBinId", "warehouseBinIdObject", "warehouseId", "warehouseIdObject"]

    @field_validator('billable_option')
    def billable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge')")
        return value

    @field_validator('price_method')
    def price_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FlatRateForRange', 'PercentMarkupFromCost', 'PercentMarkdownFromPrice', 'PricePerUnit'):
            raise ValueError("must be one of enum values ('FlatRateForRange', 'PercentMarkupFromCost', 'PercentMarkdownFromPrice', 'PricePerUnit')")
        return value

    @field_validator('product_class')
    def product_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service'):
            raise ValueError("must be one of enum values ('Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProductItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement
        if self.agreement:
            _dict['agreement'] = self.agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business_unit
        if self.business_unit:
            _dict['businessUnit'] = self.business_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of catalog_item
        if self.catalog_item:
            _dict['catalogItem'] = self.catalog_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of entity_type
        if self.entity_type:
            _dict['entityType'] = self.entity_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forecast_status
        if self.forecast_status:
            _dict['forecastStatus'] = self.forecast_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_grouping
        if self.invoice_grouping:
            _dict['invoiceGrouping'] = self.invoice_grouping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opportunity
        if self.opportunity:
            _dict['opportunity'] = self.opportunity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phase
        if self.phase:
            _dict['phase'] = self.phase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring
        if self.recurring:
            _dict['recurring'] = self.recurring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sales_order
        if self.sales_order:
            _dict['salesOrder'] = self.sales_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sla
        if self.sla:
            _dict['sla'] = self.sla.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket
        if self.ticket:
            _dict['ticket'] = self.ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse_bin_id_object
        if self.warehouse_bin_id_object:
            _dict['warehouseBinIdObject'] = self.warehouse_bin_id_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse_id_object
        if self.warehouse_id_object:
            _dict['warehouseIdObject'] = self.warehouse_id_object.to_dict()
        # set to None if add_components_flag (nullable) is None
        # and model_fields_set contains the field
        if self.add_components_flag is None and "add_components_flag" in self.model_fields_set:
            _dict['addComponentsFlag'] = None

        # set to None if agreement_amount (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_amount is None and "agreement_amount" in self.model_fields_set:
            _dict['agreementAmount'] = None

        # set to None if billable_option (nullable) is None
        # and model_fields_set contains the field
        if self.billable_option is None and "billable_option" in self.model_fields_set:
            _dict['billableOption'] = None

        # set to None if business_unit_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_unit_id is None and "business_unit_id" in self.model_fields_set:
            _dict['businessUnitId'] = None

        # set to None if bypass_forecast_update (nullable) is None
        # and model_fields_set contains the field
        if self.bypass_forecast_update is None and "bypass_forecast_update" in self.model_fields_set:
            _dict['bypassForecastUpdate'] = None

        # set to None if calculated_cost (nullable) is None
        # and model_fields_set contains the field
        if self.calculated_cost is None and "calculated_cost" in self.model_fields_set:
            _dict['calculatedCost'] = None

        # set to None if calculated_cost_flag (nullable) is None
        # and model_fields_set contains the field
        if self.calculated_cost_flag is None and "calculated_cost_flag" in self.model_fields_set:
            _dict['calculatedCostFlag'] = None

        # set to None if calculated_price (nullable) is None
        # and model_fields_set contains the field
        if self.calculated_price is None and "calculated_price" in self.model_fields_set:
            _dict['calculatedPrice'] = None

        # set to None if calculated_price_flag (nullable) is None
        # and model_fields_set contains the field
        if self.calculated_price_flag is None and "calculated_price_flag" in self.model_fields_set:
            _dict['calculatedPriceFlag'] = None

        # set to None if cancelled_by (nullable) is None
        # and model_fields_set contains the field
        if self.cancelled_by is None and "cancelled_by" in self.model_fields_set:
            _dict['cancelledBy'] = None

        # set to None if cancelled_flag (nullable) is None
        # and model_fields_set contains the field
        if self.cancelled_flag is None and "cancelled_flag" in self.model_fields_set:
            _dict['cancelledFlag'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if discount (nullable) is None
        # and model_fields_set contains the field
        if self.discount is None and "discount" in self.model_fields_set:
            _dict['discount'] = None

        # set to None if dropship_flag (nullable) is None
        # and model_fields_set contains the field
        if self.dropship_flag is None and "dropship_flag" in self.model_fields_set:
            _dict['dropshipFlag'] = None

        # set to None if forecast_detail_id (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_detail_id is None and "forecast_detail_id" in self.model_fields_set:
            _dict['forecastDetailId'] = None

        # set to None if ignore_pricing_schedules_flag (nullable) is None
        # and model_fields_set contains the field
        if self.ignore_pricing_schedules_flag is None and "ignore_pricing_schedules_flag" in self.model_fields_set:
            _dict['ignorePricingSchedulesFlag'] = None

        # set to None if list_price (nullable) is None
        # and model_fields_set contains the field
        if self.list_price is None and "list_price" in self.model_fields_set:
            _dict['listPrice'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if minimum_stock_flag (nullable) is None
        # and model_fields_set contains the field
        if self.minimum_stock_flag is None and "minimum_stock_flag" in self.model_fields_set:
            _dict['minimumStockFlag'] = None

        # set to None if need_to_order_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.need_to_order_quantity is None and "need_to_order_quantity" in self.model_fields_set:
            _dict['needToOrderQuantity'] = None

        # set to None if need_to_purchase_flag (nullable) is None
        # and model_fields_set contains the field
        if self.need_to_purchase_flag is None and "need_to_purchase_flag" in self.model_fields_set:
            _dict['needToPurchaseFlag'] = None

        # set to None if phase_product_flag (nullable) is None
        # and model_fields_set contains the field
        if self.phase_product_flag is None and "phase_product_flag" in self.model_fields_set:
            _dict['phaseProductFlag'] = None

        # set to None if po_approved_flag (nullable) is None
        # and model_fields_set contains the field
        if self.po_approved_flag is None and "po_approved_flag" in self.model_fields_set:
            _dict['poApprovedFlag'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if price_method (nullable) is None
        # and model_fields_set contains the field
        if self.price_method is None and "price_method" in self.model_fields_set:
            _dict['priceMethod'] = None

        # set to None if product_class (nullable) is None
        # and model_fields_set contains the field
        if self.product_class is None and "product_class" in self.model_fields_set:
            _dict['productClass'] = None

        # set to None if product_supplied_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_supplied_flag is None and "product_supplied_flag" in self.model_fields_set:
            _dict['productSuppliedFlag'] = None

        # set to None if quantity (nullable) is None
        # and model_fields_set contains the field
        if self.quantity is None and "quantity" in self.model_fields_set:
            _dict['quantity'] = None

        # set to None if quantity_cancelled (nullable) is None
        # and model_fields_set contains the field
        if self.quantity_cancelled is None and "quantity_cancelled" in self.model_fields_set:
            _dict['quantityCancelled'] = None

        # set to None if sequence_number (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_number is None and "sequence_number" in self.model_fields_set:
            _dict['sequenceNumber'] = None

        # set to None if special_order_flag (nullable) is None
        # and model_fields_set contains the field
        if self.special_order_flag is None and "special_order_flag" in self.model_fields_set:
            _dict['specialOrderFlag'] = None

        # set to None if sub_contractor_amount_limit (nullable) is None
        # and model_fields_set contains the field
        if self.sub_contractor_amount_limit is None and "sub_contractor_amount_limit" in self.model_fields_set:
            _dict['subContractorAmountLimit'] = None

        # set to None if sub_contractor_ship_to_id (nullable) is None
        # and model_fields_set contains the field
        if self.sub_contractor_ship_to_id is None and "sub_contractor_ship_to_id" in self.model_fields_set:
            _dict['subContractorShipToId'] = None

        # set to None if taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_flag is None and "taxable_flag" in self.model_fields_set:
            _dict['taxableFlag'] = None

        # set to None if warehouse_bin_id (nullable) is None
        # and model_fields_set contains the field
        if self.warehouse_bin_id is None and "warehouse_bin_id" in self.model_fields_set:
            _dict['warehouseBinId'] = None

        # set to None if warehouse_id (nullable) is None
        # and model_fields_set contains the field
        if self.warehouse_id is None and "warehouse_id" in self.model_fields_set:
            _dict['warehouseId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProductItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ProductItem) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "addComponentsFlag": obj.get("addComponentsFlag"),
            "agreement": AgreementReference.from_dict(obj.get("agreement")) if obj.get("agreement") is not None else None,
            "agreementAmount": obj.get("agreementAmount"),
            "billableOption": obj.get("billableOption"),
            "businessUnit": BillingUnitReference.from_dict(obj.get("businessUnit")) if obj.get("businessUnit") is not None else None,
            "businessUnitId": obj.get("businessUnitId"),
            "bypassForecastUpdate": obj.get("bypassForecastUpdate"),
            "calculatedCost": obj.get("calculatedCost"),
            "calculatedCostFlag": obj.get("calculatedCostFlag"),
            "calculatedPrice": obj.get("calculatedPrice"),
            "calculatedPriceFlag": obj.get("calculatedPriceFlag"),
            "cancelledBy": obj.get("cancelledBy"),
            "cancelledDate": obj.get("cancelledDate"),
            "cancelledFlag": obj.get("cancelledFlag"),
            "cancelledReason": obj.get("cancelledReason"),
            "catalogItem": CatalogItemReference.from_dict(obj.get("catalogItem")) if obj.get("catalogItem") is not None else None,
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "cost": obj.get("cost"),
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "customerDescription": obj.get("customerDescription"),
            "description": obj.get("description"),
            "discount": obj.get("discount"),
            "dropshipFlag": obj.get("dropshipFlag"),
            "entityType": EntityTypeReference.from_dict(obj.get("entityType")) if obj.get("entityType") is not None else None,
            "forecastDetailId": obj.get("forecastDetailId"),
            "forecastStatus": OpportunityStatusReference.from_dict(obj.get("forecastStatus")) if obj.get("forecastStatus") is not None else None,
            "id": obj.get("id"),
            "ignorePricingSchedulesFlag": obj.get("ignorePricingSchedulesFlag"),
            "integrationXRef": obj.get("integrationXRef"),
            "internalNotes": obj.get("internalNotes"),
            "invoice": InvoiceReference.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "invoiceGrouping": InvoiceGroupingReference.from_dict(obj.get("invoiceGrouping")) if obj.get("invoiceGrouping") is not None else None,
            "listPrice": obj.get("listPrice"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "locationId": obj.get("locationId"),
            "minimumStockFlag": obj.get("minimumStockFlag"),
            "needToOrderQuantity": obj.get("needToOrderQuantity"),
            "needToPurchaseFlag": obj.get("needToPurchaseFlag"),
            "opportunity": OpportunityReference.from_dict(obj.get("opportunity")) if obj.get("opportunity") is not None else None,
            "phase": ProjectPhaseReference.from_dict(obj.get("phase")) if obj.get("phase") is not None else None,
            "phaseProductFlag": obj.get("phaseProductFlag"),
            "poApprovedFlag": obj.get("poApprovedFlag"),
            "price": obj.get("price"),
            "priceMethod": obj.get("priceMethod"),
            "productClass": obj.get("productClass"),
            "productSuppliedFlag": obj.get("productSuppliedFlag"),
            "project": ProjectReference.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "purchaseDate": obj.get("purchaseDate"),
            "quantity": obj.get("quantity"),
            "quantityCancelled": obj.get("quantityCancelled"),
            "recurring": ProductRecurring.from_dict(obj.get("recurring")) if obj.get("recurring") is not None else None,
            "salesOrder": SalesOrderReference.from_dict(obj.get("salesOrder")) if obj.get("salesOrder") is not None else None,
            "sequenceNumber": obj.get("sequenceNumber"),
            "serialNumberIds": obj.get("serialNumberIds"),
            "serialNumbers": obj.get("serialNumbers"),
            "shipSet": obj.get("shipSet"),
            "sla": SLAReference.from_dict(obj.get("sla")) if obj.get("sla") is not None else None,
            "specialOrderFlag": obj.get("specialOrderFlag"),
            "subContractorAmountLimit": obj.get("subContractorAmountLimit"),
            "subContractorShipToId": obj.get("subContractorShipToId"),
            "taxableFlag": obj.get("taxableFlag"),
            "ticket": TicketReference.from_dict(obj.get("ticket")) if obj.get("ticket") is not None else None,
            "vendor": CompanyReference.from_dict(obj.get("vendor")) if obj.get("vendor") is not None else None,
            "vendorSku": obj.get("vendorSku"),
            "warehouse": obj.get("warehouse"),
            "warehouseBin": obj.get("warehouseBin"),
            "warehouseBinId": obj.get("warehouseBinId"),
            "warehouseBinIdObject": WarehouseBinReference.from_dict(obj.get("warehouseBinIdObject")) if obj.get("warehouseBinIdObject") is not None else None,
            "warehouseId": obj.get("warehouseId"),
            "warehouseIdObject": WarehouseReference.from_dict(obj.get("warehouseIdObject")) if obj.get("warehouseIdObject") is not None else None
        })
        return _obj


