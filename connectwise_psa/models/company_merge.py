# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompanyMerge(BaseModel):
    """
    CompanyMerge
    """ # noqa: E501
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    activities: Optional[StrictStr] = None
    billing_address: Optional[StrictStr] = Field(default=None, alias="billingAddress")
    billing_contact: Optional[StrictStr] = Field(default=None, alias="billingContact")
    billing_terms: Optional[StrictStr] = Field(default=None, alias="billingTerms")
    contacts: Optional[StrictStr] = None
    date_acquired: Optional[StrictStr] = Field(default=None, alias="dateAcquired")
    documents: Optional[StrictStr] = None
    fax: Optional[StrictStr] = None
    identifier: Optional[StrictStr] = None
    market: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    number_of_employees: Optional[StrictStr] = Field(default=None, alias="numberOfEmployees")
    opportunities: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    primary_address: Optional[StrictStr] = Field(default=None, alias="primaryAddress")
    primary_contact: Optional[StrictStr] = Field(default=None, alias="primaryContact")
    projects: Optional[StrictStr] = None
    revenue: Optional[StrictStr] = None
    revenue_year: Optional[StrictStr] = Field(default=None, alias="revenueYear")
    services: Optional[StrictStr] = None
    sic_code: Optional[StrictStr] = Field(default=None, alias="sicCode")
    sites: Optional[StrictStr] = None
    source_list: Optional[StrictStr] = Field(default=None, alias="sourceList")
    status: Optional[StrictStr] = None
    tax_code: Optional[StrictStr] = Field(default=None, alias="taxCode")
    territory: Optional[StrictStr] = None
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    to_company_id: StrictInt = Field(alias="toCompanyId")
    type: Optional[StrictStr] = None
    user_defined_field1: Optional[StrictStr] = Field(default=None, alias="userDefinedField1")
    user_defined_field10: Optional[StrictStr] = Field(default=None, alias="userDefinedField10")
    user_defined_field2: Optional[StrictStr] = Field(default=None, alias="userDefinedField2")
    user_defined_field3: Optional[StrictStr] = Field(default=None, alias="userDefinedField3")
    user_defined_field4: Optional[StrictStr] = Field(default=None, alias="userDefinedField4")
    user_defined_field5: Optional[StrictStr] = Field(default=None, alias="userDefinedField5")
    user_defined_field6: Optional[StrictStr] = Field(default=None, alias="userDefinedField6")
    user_defined_field7: Optional[StrictStr] = Field(default=None, alias="userDefinedField7")
    user_defined_field8: Optional[StrictStr] = Field(default=None, alias="userDefinedField8")
    user_defined_field9: Optional[StrictStr] = Field(default=None, alias="userDefinedField9")
    website: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["accountNumber", "activities", "billingAddress", "billingContact", "billingTerms", "contacts", "dateAcquired", "documents", "fax", "identifier", "market", "name", "notes", "numberOfEmployees", "opportunities", "phone", "primaryAddress", "primaryContact", "projects", "revenue", "revenueYear", "services", "sicCode", "sites", "sourceList", "status", "taxCode", "territory", "timeZone", "toCompanyId", "type", "userDefinedField1", "userDefinedField10", "userDefinedField2", "userDefinedField3", "userDefinedField4", "userDefinedField5", "userDefinedField6", "userDefinedField7", "userDefinedField8", "userDefinedField9", "website"]

    @field_validator('account_number')
    def account_number_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('activities')
    def activities_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Discard', 'Merge'):
            raise ValueError("must be one of enum values ('Discard', 'Merge')")
        return value

    @field_validator('billing_address')
    def billing_address_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('billing_contact')
    def billing_contact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('billing_terms')
    def billing_terms_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('contacts')
    def contacts_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Discard', 'Merge'):
            raise ValueError("must be one of enum values ('Discard', 'Merge')")
        return value

    @field_validator('date_acquired')
    def date_acquired_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('documents')
    def documents_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Discard', 'Merge'):
            raise ValueError("must be one of enum values ('Discard', 'Merge')")
        return value

    @field_validator('fax')
    def fax_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('identifier')
    def identifier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('market')
    def market_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('name')
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('notes')
    def notes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Discard', 'Merge'):
            raise ValueError("must be one of enum values ('Discard', 'Merge')")
        return value

    @field_validator('number_of_employees')
    def number_of_employees_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('opportunities')
    def opportunities_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Discard', 'Merge'):
            raise ValueError("must be one of enum values ('Discard', 'Merge')")
        return value

    @field_validator('phone')
    def phone_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('primary_address')
    def primary_address_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('primary_contact')
    def primary_contact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('projects')
    def projects_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Discard', 'Merge'):
            raise ValueError("must be one of enum values ('Discard', 'Merge')")
        return value

    @field_validator('revenue')
    def revenue_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('revenue_year')
    def revenue_year_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('services')
    def services_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Discard', 'Merge'):
            raise ValueError("must be one of enum values ('Discard', 'Merge')")
        return value

    @field_validator('sic_code')
    def sic_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('sites')
    def sites_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Discard', 'Merge'):
            raise ValueError("must be one of enum values ('Discard', 'Merge')")
        return value

    @field_validator('source_list')
    def source_list_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('tax_code')
    def tax_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('territory')
    def territory_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('time_zone')
    def time_zone_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field1')
    def user_defined_field1_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field10')
    def user_defined_field10_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field2')
    def user_defined_field2_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field3')
    def user_defined_field3_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field4')
    def user_defined_field4_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field5')
    def user_defined_field5_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field6')
    def user_defined_field6_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field7')
    def user_defined_field7_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field8')
    def user_defined_field8_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('user_defined_field9')
    def user_defined_field9_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    @field_validator('website')
    def website_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('From', 'To'):
            raise ValueError("must be one of enum values ('From', 'To')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompanyMerge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if account_number (nullable) is None
        # and model_fields_set contains the field
        if self.account_number is None and "account_number" in self.model_fields_set:
            _dict['accountNumber'] = None

        # set to None if activities (nullable) is None
        # and model_fields_set contains the field
        if self.activities is None and "activities" in self.model_fields_set:
            _dict['activities'] = None

        # set to None if billing_address (nullable) is None
        # and model_fields_set contains the field
        if self.billing_address is None and "billing_address" in self.model_fields_set:
            _dict['billingAddress'] = None

        # set to None if billing_contact (nullable) is None
        # and model_fields_set contains the field
        if self.billing_contact is None and "billing_contact" in self.model_fields_set:
            _dict['billingContact'] = None

        # set to None if billing_terms (nullable) is None
        # and model_fields_set contains the field
        if self.billing_terms is None and "billing_terms" in self.model_fields_set:
            _dict['billingTerms'] = None

        # set to None if contacts (nullable) is None
        # and model_fields_set contains the field
        if self.contacts is None and "contacts" in self.model_fields_set:
            _dict['contacts'] = None

        # set to None if date_acquired (nullable) is None
        # and model_fields_set contains the field
        if self.date_acquired is None and "date_acquired" in self.model_fields_set:
            _dict['dateAcquired'] = None

        # set to None if documents (nullable) is None
        # and model_fields_set contains the field
        if self.documents is None and "documents" in self.model_fields_set:
            _dict['documents'] = None

        # set to None if fax (nullable) is None
        # and model_fields_set contains the field
        if self.fax is None and "fax" in self.model_fields_set:
            _dict['fax'] = None

        # set to None if identifier (nullable) is None
        # and model_fields_set contains the field
        if self.identifier is None and "identifier" in self.model_fields_set:
            _dict['identifier'] = None

        # set to None if market (nullable) is None
        # and model_fields_set contains the field
        if self.market is None and "market" in self.model_fields_set:
            _dict['market'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if number_of_employees (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_employees is None and "number_of_employees" in self.model_fields_set:
            _dict['numberOfEmployees'] = None

        # set to None if opportunities (nullable) is None
        # and model_fields_set contains the field
        if self.opportunities is None and "opportunities" in self.model_fields_set:
            _dict['opportunities'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if primary_address (nullable) is None
        # and model_fields_set contains the field
        if self.primary_address is None and "primary_address" in self.model_fields_set:
            _dict['primaryAddress'] = None

        # set to None if primary_contact (nullable) is None
        # and model_fields_set contains the field
        if self.primary_contact is None and "primary_contact" in self.model_fields_set:
            _dict['primaryContact'] = None

        # set to None if projects (nullable) is None
        # and model_fields_set contains the field
        if self.projects is None and "projects" in self.model_fields_set:
            _dict['projects'] = None

        # set to None if revenue (nullable) is None
        # and model_fields_set contains the field
        if self.revenue is None and "revenue" in self.model_fields_set:
            _dict['revenue'] = None

        # set to None if revenue_year (nullable) is None
        # and model_fields_set contains the field
        if self.revenue_year is None and "revenue_year" in self.model_fields_set:
            _dict['revenueYear'] = None

        # set to None if services (nullable) is None
        # and model_fields_set contains the field
        if self.services is None and "services" in self.model_fields_set:
            _dict['services'] = None

        # set to None if sic_code (nullable) is None
        # and model_fields_set contains the field
        if self.sic_code is None and "sic_code" in self.model_fields_set:
            _dict['sicCode'] = None

        # set to None if sites (nullable) is None
        # and model_fields_set contains the field
        if self.sites is None and "sites" in self.model_fields_set:
            _dict['sites'] = None

        # set to None if source_list (nullable) is None
        # and model_fields_set contains the field
        if self.source_list is None and "source_list" in self.model_fields_set:
            _dict['sourceList'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if tax_code (nullable) is None
        # and model_fields_set contains the field
        if self.tax_code is None and "tax_code" in self.model_fields_set:
            _dict['taxCode'] = None

        # set to None if territory (nullable) is None
        # and model_fields_set contains the field
        if self.territory is None and "territory" in self.model_fields_set:
            _dict['territory'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if user_defined_field1 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field1 is None and "user_defined_field1" in self.model_fields_set:
            _dict['userDefinedField1'] = None

        # set to None if user_defined_field10 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field10 is None and "user_defined_field10" in self.model_fields_set:
            _dict['userDefinedField10'] = None

        # set to None if user_defined_field2 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field2 is None and "user_defined_field2" in self.model_fields_set:
            _dict['userDefinedField2'] = None

        # set to None if user_defined_field3 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field3 is None and "user_defined_field3" in self.model_fields_set:
            _dict['userDefinedField3'] = None

        # set to None if user_defined_field4 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field4 is None and "user_defined_field4" in self.model_fields_set:
            _dict['userDefinedField4'] = None

        # set to None if user_defined_field5 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field5 is None and "user_defined_field5" in self.model_fields_set:
            _dict['userDefinedField5'] = None

        # set to None if user_defined_field6 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field6 is None and "user_defined_field6" in self.model_fields_set:
            _dict['userDefinedField6'] = None

        # set to None if user_defined_field7 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field7 is None and "user_defined_field7" in self.model_fields_set:
            _dict['userDefinedField7'] = None

        # set to None if user_defined_field8 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field8 is None and "user_defined_field8" in self.model_fields_set:
            _dict['userDefinedField8'] = None

        # set to None if user_defined_field9 (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_field9 is None and "user_defined_field9" in self.model_fields_set:
            _dict['userDefinedField9'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompanyMerge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CompanyMerge) in the input: " + _key)

        _obj = cls.model_validate({
            "accountNumber": obj.get("accountNumber"),
            "activities": obj.get("activities"),
            "billingAddress": obj.get("billingAddress"),
            "billingContact": obj.get("billingContact"),
            "billingTerms": obj.get("billingTerms"),
            "contacts": obj.get("contacts"),
            "dateAcquired": obj.get("dateAcquired"),
            "documents": obj.get("documents"),
            "fax": obj.get("fax"),
            "identifier": obj.get("identifier"),
            "market": obj.get("market"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "numberOfEmployees": obj.get("numberOfEmployees"),
            "opportunities": obj.get("opportunities"),
            "phone": obj.get("phone"),
            "primaryAddress": obj.get("primaryAddress"),
            "primaryContact": obj.get("primaryContact"),
            "projects": obj.get("projects"),
            "revenue": obj.get("revenue"),
            "revenueYear": obj.get("revenueYear"),
            "services": obj.get("services"),
            "sicCode": obj.get("sicCode"),
            "sites": obj.get("sites"),
            "sourceList": obj.get("sourceList"),
            "status": obj.get("status"),
            "taxCode": obj.get("taxCode"),
            "territory": obj.get("territory"),
            "timeZone": obj.get("timeZone"),
            "toCompanyId": obj.get("toCompanyId"),
            "type": obj.get("type"),
            "userDefinedField1": obj.get("userDefinedField1"),
            "userDefinedField10": obj.get("userDefinedField10"),
            "userDefinedField2": obj.get("userDefinedField2"),
            "userDefinedField3": obj.get("userDefinedField3"),
            "userDefinedField4": obj.get("userDefinedField4"),
            "userDefinedField5": obj.get("userDefinedField5"),
            "userDefinedField6": obj.get("userDefinedField6"),
            "userDefinedField7": obj.get("userDefinedField7"),
            "userDefinedField8": obj.get("userDefinedField8"),
            "userDefinedField9": obj.get("userDefinedField9"),
            "website": obj.get("website")
        })
        return _obj


