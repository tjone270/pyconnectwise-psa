# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.campaign_status_reference import CampaignStatusReference
from connectwise_psa.models.campaign_sub_type_reference import CampaignSubTypeReference
from connectwise_psa.models.campaign_type_reference import CampaignTypeReference
from connectwise_psa.models.group_reference import GroupReference
from connectwise_psa.models.member_reference import MemberReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Campaign(BaseModel):
    """
    Campaign
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    actual_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualCost")
    actual_gross_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualGrossMargin")
    actual_roi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualROI")
    actual_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualRevenue")
    budget_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="budgetCost")
    budget_gross_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="budgetGrossMargin")
    budget_roi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="budgetROI")
    budget_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="budgetRevenue")
    default_group: Optional[GroupReference] = Field(default=None, alias="defaultGroup")
    emails_sent: Optional[StrictInt] = Field(default=None, alias="emailsSent")
    end_date: Optional[datetime] = Field(default=None, alias="endDate")
    id: Optional[StrictInt] = None
    impressions: Optional[StrictInt] = None
    inactive: Optional[StrictBool] = None
    inactive_days_after_end: Optional[StrictInt] = Field(default=None, alias="inactiveDaysAfterEnd")
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    marketing_manager_default_track_id: Optional[StrictInt] = Field(default=None, alias="marketingManagerDefaultTrackId")
    member: Optional[MemberReference] = None
    name: StrictStr = Field(description=" Max length: 50;")
    notes: Optional[StrictStr] = None
    opportunity_default_track_id: Optional[StrictInt] = Field(default=None, alias="opportunityDefaultTrackId")
    start_date: datetime = Field(alias="startDate")
    status: Optional[CampaignStatusReference] = None
    sub_type: Optional[CampaignSubTypeReference] = Field(default=None, alias="subType")
    type: Optional[CampaignTypeReference] = None
    __properties: ClassVar[List[str]] = ["_info", "actualCost", "actualGrossMargin", "actualROI", "actualRevenue", "budgetCost", "budgetGrossMargin", "budgetROI", "budgetRevenue", "defaultGroup", "emailsSent", "endDate", "id", "impressions", "inactive", "inactiveDaysAfterEnd", "locationId", "marketingManagerDefaultTrackId", "member", "name", "notes", "opportunityDefaultTrackId", "startDate", "status", "subType", "type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Campaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_group
        if self.default_group:
            _dict['defaultGroup'] = self.default_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_type
        if self.sub_type:
            _dict['subType'] = self.sub_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # set to None if actual_cost (nullable) is None
        # and model_fields_set contains the field
        if self.actual_cost is None and "actual_cost" in self.model_fields_set:
            _dict['actualCost'] = None

        # set to None if actual_gross_margin (nullable) is None
        # and model_fields_set contains the field
        if self.actual_gross_margin is None and "actual_gross_margin" in self.model_fields_set:
            _dict['actualGrossMargin'] = None

        # set to None if actual_roi (nullable) is None
        # and model_fields_set contains the field
        if self.actual_roi is None and "actual_roi" in self.model_fields_set:
            _dict['actualROI'] = None

        # set to None if actual_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.actual_revenue is None and "actual_revenue" in self.model_fields_set:
            _dict['actualRevenue'] = None

        # set to None if budget_cost (nullable) is None
        # and model_fields_set contains the field
        if self.budget_cost is None and "budget_cost" in self.model_fields_set:
            _dict['budgetCost'] = None

        # set to None if budget_gross_margin (nullable) is None
        # and model_fields_set contains the field
        if self.budget_gross_margin is None and "budget_gross_margin" in self.model_fields_set:
            _dict['budgetGrossMargin'] = None

        # set to None if budget_roi (nullable) is None
        # and model_fields_set contains the field
        if self.budget_roi is None and "budget_roi" in self.model_fields_set:
            _dict['budgetROI'] = None

        # set to None if budget_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.budget_revenue is None and "budget_revenue" in self.model_fields_set:
            _dict['budgetRevenue'] = None

        # set to None if emails_sent (nullable) is None
        # and model_fields_set contains the field
        if self.emails_sent is None and "emails_sent" in self.model_fields_set:
            _dict['emailsSent'] = None

        # set to None if impressions (nullable) is None
        # and model_fields_set contains the field
        if self.impressions is None and "impressions" in self.model_fields_set:
            _dict['impressions'] = None

        # set to None if inactive (nullable) is None
        # and model_fields_set contains the field
        if self.inactive is None and "inactive" in self.model_fields_set:
            _dict['inactive'] = None

        # set to None if inactive_days_after_end (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_days_after_end is None and "inactive_days_after_end" in self.model_fields_set:
            _dict['inactiveDaysAfterEnd'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if marketing_manager_default_track_id (nullable) is None
        # and model_fields_set contains the field
        if self.marketing_manager_default_track_id is None and "marketing_manager_default_track_id" in self.model_fields_set:
            _dict['marketingManagerDefaultTrackId'] = None

        # set to None if opportunity_default_track_id (nullable) is None
        # and model_fields_set contains the field
        if self.opportunity_default_track_id is None and "opportunity_default_track_id" in self.model_fields_set:
            _dict['opportunityDefaultTrackId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Campaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Campaign) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "actualCost": obj.get("actualCost"),
            "actualGrossMargin": obj.get("actualGrossMargin"),
            "actualROI": obj.get("actualROI"),
            "actualRevenue": obj.get("actualRevenue"),
            "budgetCost": obj.get("budgetCost"),
            "budgetGrossMargin": obj.get("budgetGrossMargin"),
            "budgetROI": obj.get("budgetROI"),
            "budgetRevenue": obj.get("budgetRevenue"),
            "defaultGroup": GroupReference.from_dict(obj.get("defaultGroup")) if obj.get("defaultGroup") is not None else None,
            "emailsSent": obj.get("emailsSent"),
            "endDate": obj.get("endDate"),
            "id": obj.get("id"),
            "impressions": obj.get("impressions"),
            "inactive": obj.get("inactive"),
            "inactiveDaysAfterEnd": obj.get("inactiveDaysAfterEnd"),
            "locationId": obj.get("locationId"),
            "marketingManagerDefaultTrackId": obj.get("marketingManagerDefaultTrackId"),
            "member": MemberReference.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "opportunityDefaultTrackId": obj.get("opportunityDefaultTrackId"),
            "startDate": obj.get("startDate"),
            "status": CampaignStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "subType": CampaignSubTypeReference.from_dict(obj.get("subType")) if obj.get("subType") is not None else None,
            "type": CampaignTypeReference.from_dict(obj.get("type")) if obj.get("type") is not None else None
        })
        return _obj


