# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WorkType(BaseModel):
    """
    WorkType
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    accrual_type: Optional[StrictStr] = Field(default=None, alias="accrualType")
    activity_default_flag: Optional[StrictBool] = Field(default=None, alias="activityDefaultFlag")
    add_all_agreement_exclusions: Optional[StrictBool] = Field(default=None, description="Used only on create to add the work type to all agreement and agreement type exclusion lists", alias="addAllAgreementExclusions")
    bill_time: Optional[StrictStr] = Field(alias="billTime")
    cost_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="costMultiplier")
    hours_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="hoursMax")
    hours_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="hoursMin")
    id: Optional[StrictInt] = None
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    integration_x_ref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="integrationXRef")
    name: StrictStr = Field(description=" Max length: 50;")
    overall_default_flag: Optional[StrictBool] = Field(default=None, alias="overallDefaultFlag")
    rate: Optional[Union[StrictFloat, StrictInt]]
    rate_type: Optional[StrictStr] = Field(alias="rateType")
    round_bill_hours_to: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="roundBillHoursTo")
    utilization_flag: Optional[StrictBool] = Field(default=None, alias="utilizationFlag")
    __properties: ClassVar[List[str]] = ["_info", "accrualType", "activityDefaultFlag", "addAllAgreementExclusions", "billTime", "costMultiplier", "hoursMax", "hoursMin", "id", "inactiveFlag", "integrationXRef", "name", "overallDefaultFlag", "rate", "rateType", "roundBillHoursTo", "utilizationFlag"]

    @field_validator('accrual_type')
    def accrual_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Holiday', 'PTO', 'Sick', 'Vacation'):
            raise ValueError("must be one of enum values ('Holiday', 'PTO', 'Sick', 'Vacation')")
        return value

    @field_validator('bill_time')
    def bill_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge')")
        return value

    @field_validator('rate_type')
    def rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AdjAmount', 'Custom', 'Multiplier'):
            raise ValueError("must be one of enum values ('AdjAmount', 'Custom', 'Multiplier')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WorkType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if accrual_type (nullable) is None
        # and model_fields_set contains the field
        if self.accrual_type is None and "accrual_type" in self.model_fields_set:
            _dict['accrualType'] = None

        # set to None if activity_default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.activity_default_flag is None and "activity_default_flag" in self.model_fields_set:
            _dict['activityDefaultFlag'] = None

        # set to None if add_all_agreement_exclusions (nullable) is None
        # and model_fields_set contains the field
        if self.add_all_agreement_exclusions is None and "add_all_agreement_exclusions" in self.model_fields_set:
            _dict['addAllAgreementExclusions'] = None

        # set to None if bill_time (nullable) is None
        # and model_fields_set contains the field
        if self.bill_time is None and "bill_time" in self.model_fields_set:
            _dict['billTime'] = None

        # set to None if cost_multiplier (nullable) is None
        # and model_fields_set contains the field
        if self.cost_multiplier is None and "cost_multiplier" in self.model_fields_set:
            _dict['costMultiplier'] = None

        # set to None if hours_max (nullable) is None
        # and model_fields_set contains the field
        if self.hours_max is None and "hours_max" in self.model_fields_set:
            _dict['hoursMax'] = None

        # set to None if hours_min (nullable) is None
        # and model_fields_set contains the field
        if self.hours_min is None and "hours_min" in self.model_fields_set:
            _dict['hoursMin'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if overall_default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.overall_default_flag is None and "overall_default_flag" in self.model_fields_set:
            _dict['overallDefaultFlag'] = None

        # set to None if rate (nullable) is None
        # and model_fields_set contains the field
        if self.rate is None and "rate" in self.model_fields_set:
            _dict['rate'] = None

        # set to None if rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.rate_type is None and "rate_type" in self.model_fields_set:
            _dict['rateType'] = None

        # set to None if round_bill_hours_to (nullable) is None
        # and model_fields_set contains the field
        if self.round_bill_hours_to is None and "round_bill_hours_to" in self.model_fields_set:
            _dict['roundBillHoursTo'] = None

        # set to None if utilization_flag (nullable) is None
        # and model_fields_set contains the field
        if self.utilization_flag is None and "utilization_flag" in self.model_fields_set:
            _dict['utilizationFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WorkType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in WorkType) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "accrualType": obj.get("accrualType"),
            "activityDefaultFlag": obj.get("activityDefaultFlag"),
            "addAllAgreementExclusions": obj.get("addAllAgreementExclusions"),
            "billTime": obj.get("billTime"),
            "costMultiplier": obj.get("costMultiplier"),
            "hoursMax": obj.get("hoursMax"),
            "hoursMin": obj.get("hoursMin"),
            "id": obj.get("id"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "integrationXRef": obj.get("integrationXRef"),
            "name": obj.get("name"),
            "overallDefaultFlag": obj.get("overallDefaultFlag"),
            "rate": obj.get("rate"),
            "rateType": obj.get("rateType"),
            "roundBillHoursTo": obj.get("roundBillHoursTo"),
            "utilizationFlag": obj.get("utilizationFlag")
        })
        return _obj


