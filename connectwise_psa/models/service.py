# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.calendar_setup_reference import CalendarSetupReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Service(BaseModel):
    """
    Service
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    allow_cc_flag: Optional[StrictBool] = Field(default=None, alias="allowCCFlag")
    allow_to_flag: Optional[StrictBool] = Field(default=None, alias="allowTOFlag")
    calendar_setup: Optional[CalendarSetupReference] = Field(default=None, alias="calendarSetup")
    contact_color: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="contactColor")
    contact_color_disable_flag: Optional[StrictBool] = Field(default=None, alias="contactColorDisableFlag")
    header_color: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="headerColor")
    header_color_disable_flag: Optional[StrictBool] = Field(default=None, alias="headerColorDisableFlag")
    hide_delimiter_flag: Optional[StrictBool] = Field(default=None, alias="hideDelimiterFlag")
    id: Optional[StrictInt] = None
    member_color: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="memberColor")
    member_color_disable_flag: Optional[StrictBool] = Field(default=None, alias="memberColorDisableFlag")
    schedule_span: StrictStr = Field(alias="scheduleSpan")
    sr_notify: Optional[StrictStr] = Field(alias="srNotify")
    unknown_color: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="unknownColor")
    unknown_color_disable_flag: Optional[StrictBool] = Field(default=None, alias="unknownColorDisableFlag")
    __properties: ClassVar[List[str]] = ["_info", "allowCCFlag", "allowTOFlag", "calendarSetup", "contactColor", "contactColorDisableFlag", "headerColor", "headerColorDisableFlag", "hideDelimiterFlag", "id", "memberColor", "memberColorDisableFlag", "scheduleSpan", "srNotify", "unknownColor", "unknownColorDisableFlag"]

    @field_validator('schedule_span')
    def schedule_span_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Standard', 'OfficeHours', 'Overnight'):
            raise ValueError("must be one of enum values ('Standard', 'OfficeHours', 'Overnight')")
        return value

    @field_validator('sr_notify')
    def sr_notify_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('All', 'NewAndClosedRequests', 'ClosedRequestsOnly', 'NewRequestsOnly', 'None'):
            raise ValueError("must be one of enum values ('All', 'NewAndClosedRequests', 'ClosedRequestsOnly', 'NewRequestsOnly', 'None')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Service from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calendar_setup
        if self.calendar_setup:
            _dict['calendarSetup'] = self.calendar_setup.to_dict()
        # set to None if allow_cc_flag (nullable) is None
        # and model_fields_set contains the field
        if self.allow_cc_flag is None and "allow_cc_flag" in self.model_fields_set:
            _dict['allowCCFlag'] = None

        # set to None if allow_to_flag (nullable) is None
        # and model_fields_set contains the field
        if self.allow_to_flag is None and "allow_to_flag" in self.model_fields_set:
            _dict['allowTOFlag'] = None

        # set to None if contact_color_disable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.contact_color_disable_flag is None and "contact_color_disable_flag" in self.model_fields_set:
            _dict['contactColorDisableFlag'] = None

        # set to None if header_color_disable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.header_color_disable_flag is None and "header_color_disable_flag" in self.model_fields_set:
            _dict['headerColorDisableFlag'] = None

        # set to None if hide_delimiter_flag (nullable) is None
        # and model_fields_set contains the field
        if self.hide_delimiter_flag is None and "hide_delimiter_flag" in self.model_fields_set:
            _dict['hideDelimiterFlag'] = None

        # set to None if member_color_disable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.member_color_disable_flag is None and "member_color_disable_flag" in self.model_fields_set:
            _dict['memberColorDisableFlag'] = None

        # set to None if sr_notify (nullable) is None
        # and model_fields_set contains the field
        if self.sr_notify is None and "sr_notify" in self.model_fields_set:
            _dict['srNotify'] = None

        # set to None if unknown_color_disable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.unknown_color_disable_flag is None and "unknown_color_disable_flag" in self.model_fields_set:
            _dict['unknownColorDisableFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Service from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Service) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "allowCCFlag": obj.get("allowCCFlag"),
            "allowTOFlag": obj.get("allowTOFlag"),
            "calendarSetup": CalendarSetupReference.from_dict(obj.get("calendarSetup")) if obj.get("calendarSetup") is not None else None,
            "contactColor": obj.get("contactColor"),
            "contactColorDisableFlag": obj.get("contactColorDisableFlag"),
            "headerColor": obj.get("headerColor"),
            "headerColorDisableFlag": obj.get("headerColorDisableFlag"),
            "hideDelimiterFlag": obj.get("hideDelimiterFlag"),
            "id": obj.get("id"),
            "memberColor": obj.get("memberColor"),
            "memberColorDisableFlag": obj.get("memberColorDisableFlag"),
            "scheduleSpan": obj.get("scheduleSpan"),
            "srNotify": obj.get("srNotify"),
            "unknownColor": obj.get("unknownColor"),
            "unknownColorDisableFlag": obj.get("unknownColorDisableFlag")
        })
        return _obj


