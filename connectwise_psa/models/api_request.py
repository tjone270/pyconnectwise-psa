# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.filter_values import FilterValues
from connectwise_psa.models.i_rest_identified_item import IRestIdentifiedItem
from connectwise_psa.models.page_values import PageValues
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ApiRequest(BaseModel):
    """
    ApiRequest
    """ # noqa: E501
    entity: Optional[IRestIdentifiedItem] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    fields: Optional[StrictStr] = None
    filters: Optional[FilterValues] = None
    format: Optional[StrictStr] = None
    grand_parent_id: Optional[StrictInt] = Field(default=None, alias="grandParentId")
    id: Optional[StrictInt] = None
    member_context: Optional[StrictStr] = Field(default=None, alias="memberContext")
    misc_properties: Optional[Dict[str, Union[str, Any]]] = Field(default=None, alias="miscProperties")
    page: Optional[PageValues] = None
    parent_id: Optional[StrictInt] = Field(default=None, alias="parentId")
    update_only_ces_properties: Optional[StrictBool] = Field(default=None, alias="updateOnlyCesProperties")
    __properties: ClassVar[List[str]] = ["entity", "externalId", "fields", "filters", "format", "grandParentId", "id", "memberContext", "miscProperties", "page", "parentId", "updateOnlyCesProperties"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ApiRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page
        if self.page:
            _dict['page'] = self.page.to_dict()
        # set to None if grand_parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.grand_parent_id is None and "grand_parent_id" in self.model_fields_set:
            _dict['grandParentId'] = None

        # set to None if parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_id is None and "parent_id" in self.model_fields_set:
            _dict['parentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ApiRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ApiRequest) in the input: " + _key)

        _obj = cls.model_validate({
            "entity": IRestIdentifiedItem.from_dict(obj.get("entity")) if obj.get("entity") is not None else None,
            "externalId": obj.get("externalId"),
            "fields": obj.get("fields"),
            "filters": FilterValues.from_dict(obj.get("filters")) if obj.get("filters") is not None else None,
            "format": obj.get("format"),
            "grandParentId": obj.get("grandParentId"),
            "id": obj.get("id"),
            "memberContext": obj.get("memberContext"),
            "miscProperties": obj.get("miscProperties"),
            "page": PageValues.from_dict(obj.get("page")) if obj.get("page") is not None else None,
            "parentId": obj.get("parentId"),
            "updateOnlyCesProperties": obj.get("updateOnlyCesProperties")
        })
        return _obj


