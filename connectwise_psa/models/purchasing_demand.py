# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.product_demand import ProductDemand
from connectwise_psa.models.purchase_order import PurchaseOrder
from connectwise_psa.models.warehouse_reference import WarehouseReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PurchasingDemand(BaseModel):
    """
    PurchasingDemand
    """ # noqa: E501
    products: Optional[List[ProductDemand]] = None
    purchase_order: Optional[PurchaseOrder] = Field(default=None, alias="purchaseOrder")
    vendor: Optional[CompanyReference] = None
    warehouse: Optional[WarehouseReference] = None
    __properties: ClassVar[List[str]] = ["products", "purchaseOrder", "vendor", "warehouse"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PurchasingDemand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item in self.products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of purchase_order
        if self.purchase_order:
            _dict['purchaseOrder'] = self.purchase_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse
        if self.warehouse:
            _dict['warehouse'] = self.warehouse.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PurchasingDemand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PurchasingDemand) in the input: " + _key)

        _obj = cls.model_validate({
            "products": [ProductDemand.from_dict(_item) for _item in obj.get("products")] if obj.get("products") is not None else None,
            "purchaseOrder": PurchaseOrder.from_dict(obj.get("purchaseOrder")) if obj.get("purchaseOrder") is not None else None,
            "vendor": CompanyReference.from_dict(obj.get("vendor")) if obj.get("vendor") is not None else None,
            "warehouse": WarehouseReference.from_dict(obj.get("warehouse")) if obj.get("warehouse") is not None else None
        })
        return _obj


