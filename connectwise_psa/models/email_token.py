# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EmailToken(BaseModel):
    """
    EmailToken
    """ # noqa: E501
    address_flag: Optional[StrictBool] = Field(default=None, alias="addressFlag")
    agreement_flag: Optional[StrictBool] = Field(default=None, alias="agreementFlag")
    company_flag: Optional[StrictBool] = Field(default=None, alias="companyFlag")
    config_flag: Optional[StrictBool] = Field(default=None, alias="configFlag")
    contact_flag: Optional[StrictBool] = Field(default=None, alias="contactFlag")
    description: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    invoice_flag: Optional[StrictBool] = Field(default=None, alias="invoiceFlag")
    portal_password_flag: Optional[StrictBool] = Field(default=None, alias="portalPasswordFlag")
    purchase_order_flag: Optional[StrictBool] = Field(default=None, alias="purchaseOrderFlag")
    purchase_order_status_flag: Optional[StrictBool] = Field(default=None, alias="purchaseOrderStatusFlag")
    rma_flag: Optional[StrictBool] = Field(default=None, alias="rmaFlag")
    sales_flag: Optional[StrictBool] = Field(default=None, alias="salesFlag")
    service_flag: Optional[StrictBool] = Field(default=None, alias="serviceFlag")
    token: Optional[StrictStr] = None
    tracks_flag: Optional[StrictBool] = Field(default=None, alias="tracksFlag")
    workflow_flag: Optional[StrictBool] = Field(default=None, alias="workflowFlag")
    __properties: ClassVar[List[str]] = ["addressFlag", "agreementFlag", "companyFlag", "configFlag", "contactFlag", "description", "id", "invoiceFlag", "portalPasswordFlag", "purchaseOrderFlag", "purchaseOrderStatusFlag", "rmaFlag", "salesFlag", "serviceFlag", "token", "tracksFlag", "workflowFlag"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EmailToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if address_flag (nullable) is None
        # and model_fields_set contains the field
        if self.address_flag is None and "address_flag" in self.model_fields_set:
            _dict['addressFlag'] = None

        # set to None if agreement_flag (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_flag is None and "agreement_flag" in self.model_fields_set:
            _dict['agreementFlag'] = None

        # set to None if company_flag (nullable) is None
        # and model_fields_set contains the field
        if self.company_flag is None and "company_flag" in self.model_fields_set:
            _dict['companyFlag'] = None

        # set to None if config_flag (nullable) is None
        # and model_fields_set contains the field
        if self.config_flag is None and "config_flag" in self.model_fields_set:
            _dict['configFlag'] = None

        # set to None if contact_flag (nullable) is None
        # and model_fields_set contains the field
        if self.contact_flag is None and "contact_flag" in self.model_fields_set:
            _dict['contactFlag'] = None

        # set to None if invoice_flag (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_flag is None and "invoice_flag" in self.model_fields_set:
            _dict['invoiceFlag'] = None

        # set to None if portal_password_flag (nullable) is None
        # and model_fields_set contains the field
        if self.portal_password_flag is None and "portal_password_flag" in self.model_fields_set:
            _dict['portalPasswordFlag'] = None

        # set to None if purchase_order_flag (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_order_flag is None and "purchase_order_flag" in self.model_fields_set:
            _dict['purchaseOrderFlag'] = None

        # set to None if purchase_order_status_flag (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_order_status_flag is None and "purchase_order_status_flag" in self.model_fields_set:
            _dict['purchaseOrderStatusFlag'] = None

        # set to None if rma_flag (nullable) is None
        # and model_fields_set contains the field
        if self.rma_flag is None and "rma_flag" in self.model_fields_set:
            _dict['rmaFlag'] = None

        # set to None if sales_flag (nullable) is None
        # and model_fields_set contains the field
        if self.sales_flag is None and "sales_flag" in self.model_fields_set:
            _dict['salesFlag'] = None

        # set to None if service_flag (nullable) is None
        # and model_fields_set contains the field
        if self.service_flag is None and "service_flag" in self.model_fields_set:
            _dict['serviceFlag'] = None

        # set to None if tracks_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tracks_flag is None and "tracks_flag" in self.model_fields_set:
            _dict['tracksFlag'] = None

        # set to None if workflow_flag (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_flag is None and "workflow_flag" in self.model_fields_set:
            _dict['workflowFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EmailToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in EmailToken) in the input: " + _key)

        _obj = cls.model_validate({
            "addressFlag": obj.get("addressFlag"),
            "agreementFlag": obj.get("agreementFlag"),
            "companyFlag": obj.get("companyFlag"),
            "configFlag": obj.get("configFlag"),
            "contactFlag": obj.get("contactFlag"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "invoiceFlag": obj.get("invoiceFlag"),
            "portalPasswordFlag": obj.get("portalPasswordFlag"),
            "purchaseOrderFlag": obj.get("purchaseOrderFlag"),
            "purchaseOrderStatusFlag": obj.get("purchaseOrderStatusFlag"),
            "rmaFlag": obj.get("rmaFlag"),
            "salesFlag": obj.get("salesFlag"),
            "serviceFlag": obj.get("serviceFlag"),
            "token": obj.get("token"),
            "tracksFlag": obj.get("tracksFlag"),
            "workflowFlag": obj.get("workflowFlag")
        })
        return _obj


