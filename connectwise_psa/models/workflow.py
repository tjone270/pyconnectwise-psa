# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.board_reference import BoardReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.workflow_table_type_reference import WorkflowTableTypeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Workflow(BaseModel):
    """
    Workflow
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    activate_flag: Optional[StrictBool] = Field(default=None, description="Batches can not be turned on until after the workflow is created and it has atleast one event associated with it", alias="activateFlag")
    batch_frequency_unit: Optional[StrictStr] = Field(default=None, description="If not specified, defaults to Minutes. Months is not supported as month length varies", alias="batchFrequencyUnit")
    batch_interval: Optional[StrictInt] = Field(default=None, alias="batchInterval")
    batch_last_ran: Optional[datetime] = Field(default=None, alias="batchLastRan")
    batch_schedule: Optional[StrictStr] = Field(default=None, description="If activateFlag is true, batchSchedule is required", alias="batchSchedule")
    board: Optional[BoardReference] = None
    department: Optional[SystemDepartmentReference] = None
    id: Optional[StrictInt] = None
    location: Optional[SystemLocationReference] = None
    name: StrictStr = Field(description=" Max length: 100;")
    table_type: Optional[WorkflowTableTypeReference] = Field(default=None, alias="tableType")
    __properties: ClassVar[List[str]] = ["_info", "activateFlag", "batchFrequencyUnit", "batchInterval", "batchLastRan", "batchSchedule", "board", "department", "id", "location", "name", "tableType"]

    @field_validator('batch_frequency_unit')
    def batch_frequency_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Minutes', 'Hours', 'Days'):
            raise ValueError("must be one of enum values ('Minutes', 'Hours', 'Days')")
        return value

    @field_validator('batch_schedule')
    def batch_schedule_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AnyTime', 'MyCompanyOfficeHours', 'SlaHours'):
            raise ValueError("must be one of enum values ('AnyTime', 'MyCompanyOfficeHours', 'SlaHours')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Workflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of board
        if self.board:
            _dict['board'] = self.board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_type
        if self.table_type:
            _dict['tableType'] = self.table_type.to_dict()
        # set to None if activate_flag (nullable) is None
        # and model_fields_set contains the field
        if self.activate_flag is None and "activate_flag" in self.model_fields_set:
            _dict['activateFlag'] = None

        # set to None if batch_frequency_unit (nullable) is None
        # and model_fields_set contains the field
        if self.batch_frequency_unit is None and "batch_frequency_unit" in self.model_fields_set:
            _dict['batchFrequencyUnit'] = None

        # set to None if batch_interval (nullable) is None
        # and model_fields_set contains the field
        if self.batch_interval is None and "batch_interval" in self.model_fields_set:
            _dict['batchInterval'] = None

        # set to None if batch_schedule (nullable) is None
        # and model_fields_set contains the field
        if self.batch_schedule is None and "batch_schedule" in self.model_fields_set:
            _dict['batchSchedule'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Workflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Workflow) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "activateFlag": obj.get("activateFlag"),
            "batchFrequencyUnit": obj.get("batchFrequencyUnit"),
            "batchInterval": obj.get("batchInterval"),
            "batchLastRan": obj.get("batchLastRan"),
            "batchSchedule": obj.get("batchSchedule"),
            "board": BoardReference.from_dict(obj.get("board")) if obj.get("board") is not None else None,
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "id": obj.get("id"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "name": obj.get("name"),
            "tableType": WorkflowTableTypeReference.from_dict(obj.get("tableType")) if obj.get("tableType") is not None else None
        })
        return _obj


