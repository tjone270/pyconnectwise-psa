# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.time_entry_detail_view_model import TimeEntryDetailViewModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TimeEntryDetail(BaseModel):
    """
    TimeEntryDetail
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    activity_rec_id: Optional[StrictInt] = Field(default=None, alias="activityRecID")
    board_rec_id: Optional[StrictInt] = Field(default=None, alias="boardRecID")
    charge_code_rec_id: Optional[StrictInt] = Field(default=None, alias="chargeCodeRecID")
    company_rec_id: Optional[StrictInt] = Field(default=None, alias="companyRecId")
    default_date: Optional[StrictStr] = Field(default=None, alias="defaultDate")
    end_time: Optional[StrictStr] = Field(default=None, alias="endTime")
    flag_type: Optional[StrictStr] = Field(default=None, alias="flagType")
    id: Optional[StrictInt] = None
    lab_start_time: Optional[StrictStr] = Field(default=None, alias="labStartTime")
    lab_start_time_active: Optional[StrictBool] = Field(default=None, alias="labStartTimeActive")
    schedule_rec_id: Optional[StrictInt] = Field(default=None, alias="scheduleRecID")
    selected_member_id: Optional[StrictStr] = Field(default=None, alias="selectedMemberID")
    service_rec_id: Optional[StrictInt] = Field(default=None, alias="serviceRecID")
    start_time: Optional[StrictStr] = Field(default=None, alias="startTime")
    stop_watch_rec_id: Optional[StrictInt] = Field(default=None, alias="stopWatchRecId")
    task_rec_id: Optional[StrictInt] = Field(default=None, alias="taskRecId")
    time_entry_view_model: Optional[TimeEntryDetailViewModel] = Field(default=None, alias="timeEntryViewModel")
    time_sheet_rec_id: Optional[StrictInt] = Field(default=None, alias="timeSheetRecID")
    time_zone_display: Optional[StrictStr] = Field(default=None, alias="timeZoneDisplay")
    __properties: ClassVar[List[str]] = ["_info", "activityRecID", "boardRecID", "chargeCodeRecID", "companyRecId", "defaultDate", "endTime", "flagType", "id", "labStartTime", "labStartTimeActive", "scheduleRecID", "selectedMemberID", "serviceRecID", "startTime", "stopWatchRecId", "taskRecId", "timeEntryViewModel", "timeSheetRecID", "timeZoneDisplay"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimeEntryDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_entry_view_model
        if self.time_entry_view_model:
            _dict['timeEntryViewModel'] = self.time_entry_view_model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TimeEntryDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TimeEntryDetail) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "activityRecID": obj.get("activityRecID"),
            "boardRecID": obj.get("boardRecID"),
            "chargeCodeRecID": obj.get("chargeCodeRecID"),
            "companyRecId": obj.get("companyRecId"),
            "defaultDate": obj.get("defaultDate"),
            "endTime": obj.get("endTime"),
            "flagType": obj.get("flagType"),
            "id": obj.get("id"),
            "labStartTime": obj.get("labStartTime"),
            "labStartTimeActive": obj.get("labStartTimeActive"),
            "scheduleRecID": obj.get("scheduleRecID"),
            "selectedMemberID": obj.get("selectedMemberID"),
            "serviceRecID": obj.get("serviceRecID"),
            "startTime": obj.get("startTime"),
            "stopWatchRecId": obj.get("stopWatchRecId"),
            "taskRecId": obj.get("taskRecId"),
            "timeEntryViewModel": TimeEntryDetailViewModel.from_dict(obj.get("timeEntryViewModel")) if obj.get("timeEntryViewModel") is not None else None,
            "timeSheetRecID": obj.get("timeSheetRecID"),
            "timeZoneDisplay": obj.get("timeZoneDisplay")
        })
        return _obj


