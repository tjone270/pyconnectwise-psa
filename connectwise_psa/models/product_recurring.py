# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProductRecurring(BaseModel):
    """
    ProductRecurring
    """ # noqa: E501
    bill_cycle_id: Optional[StrictInt] = Field(default=None, alias="billCycleId")
    cycle_type: Optional[StrictStr] = Field(default=None, alias="cycleType")
    cycles: Optional[StrictInt] = None
    end_date: Optional[StrictStr] = Field(default=None, description="The Recurring End Date is calculated based on the             start date, number of cycles, and cycle type.", alias="endDate")
    recurring_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="recurringCost")
    recurring_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="recurringRevenue")
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate")
    __properties: ClassVar[List[str]] = ["billCycleId", "cycleType", "cycles", "endDate", "recurringCost", "recurringRevenue", "startDate"]

    @field_validator('cycle_type')
    def cycle_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ContractYear', 'CalendarYear'):
            raise ValueError("must be one of enum values ('ContractYear', 'CalendarYear')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProductRecurring from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if bill_cycle_id (nullable) is None
        # and model_fields_set contains the field
        if self.bill_cycle_id is None and "bill_cycle_id" in self.model_fields_set:
            _dict['billCycleId'] = None

        # set to None if cycle_type (nullable) is None
        # and model_fields_set contains the field
        if self.cycle_type is None and "cycle_type" in self.model_fields_set:
            _dict['cycleType'] = None

        # set to None if cycles (nullable) is None
        # and model_fields_set contains the field
        if self.cycles is None and "cycles" in self.model_fields_set:
            _dict['cycles'] = None

        # set to None if recurring_cost (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_cost is None and "recurring_cost" in self.model_fields_set:
            _dict['recurringCost'] = None

        # set to None if recurring_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_revenue is None and "recurring_revenue" in self.model_fields_set:
            _dict['recurringRevenue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProductRecurring from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ProductRecurring) in the input: " + _key)

        _obj = cls.model_validate({
            "billCycleId": obj.get("billCycleId"),
            "cycleType": obj.get("cycleType"),
            "cycles": obj.get("cycles"),
            "endDate": obj.get("endDate"),
            "recurringCost": obj.get("recurringCost"),
            "recurringRevenue": obj.get("recurringRevenue"),
            "startDate": obj.get("startDate")
        })
        return _obj


