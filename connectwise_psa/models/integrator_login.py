# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.board_reference import BoardReference
from connectwise_psa.models.member_reference import MemberReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IntegratorLogin(BaseModel):
    """
    IntegratorLogin
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    activity_api_flag: Optional[StrictBool] = Field(default=None, alias="activityApiFlag")
    activity_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="activityCallbackUrl")
    activity_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="activityLegacyCallbackFlag")
    agreement_api_flag: Optional[StrictBool] = Field(default=None, alias="agreementApiFlag")
    agreement_callback_legacy_flag: Optional[StrictBool] = Field(default=None, alias="agreementCallbackLegacyFlag")
    agreement_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="agreementCallbackUrl")
    board: Optional[BoardReference] = None
    can_access_all_apis_flag: Optional[StrictBool] = Field(default=None, description="Setting this flag to true will create an integrator that can access all of the available apis in the system.             If this field is set to true, both the member and board fields are required.", alias="canAccessAllApisFlag")
    can_access_all_records_flag: Optional[StrictBool] = Field(default=None, description="This flag controls whether the integrator can access only the db records it created, or all system records.", alias="canAccessAllRecordsFlag")
    company_api_flag: Optional[StrictBool] = Field(default=None, alias="companyApiFlag")
    company_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="companyCallbackUrl")
    company_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="companyLegacyCallbackFlag")
    configuration_api_flag: Optional[StrictBool] = Field(default=None, alias="configurationApiFlag")
    configuration_auto_child_flag: Optional[StrictBool] = Field(default=None, alias="configurationAutoChildFlag")
    configuration_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="configurationCallbackUrl")
    configuration_childling_flag: Optional[StrictBool] = Field(default=None, description="True if integrator is allowed to child configurations.", alias="configurationChildlingFlag")
    configuration_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="configurationLegacyCallbackFlag")
    contact_api_flag: Optional[StrictBool] = Field(default=None, alias="contactApiFlag")
    contact_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="contactCallbackUrl")
    contact_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="contactLegacyCallbackFlag")
    date_inactivated: Optional[datetime] = Field(default=None, alias="dateInactivated")
    document_api_flag: Optional[StrictBool] = Field(default=None, alias="documentApiFlag")
    id: Optional[StrictInt] = None
    inactivated_by: Optional[MemberReference] = Field(default=None, alias="inactivatedBy")
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    invoice_api_flag: Optional[StrictBool] = Field(default=None, alias="invoiceApiFlag")
    managed_services_api_flag: Optional[StrictBool] = Field(default=None, alias="managedServicesApiFlag")
    managed_services_auto_child_flag: Optional[StrictBool] = Field(default=None, alias="managedServicesAutoChildFlag")
    managed_services_childing_flag: Optional[StrictBool] = Field(default=None, description="True if integrator is allowed to child configurations.", alias="managedServicesChildingFlag")
    marketing_api_flag: Optional[StrictBool] = Field(default=None, alias="marketingApiFlag")
    member: Optional[MemberReference] = None
    member_api_flag: Optional[StrictBool] = Field(default=None, alias="memberApiFlag")
    opportunity_api_flag: Optional[StrictBool] = Field(default=None, alias="opportunityApiFlag")
    opportunity_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="opportunityCallbackUrl")
    opportunity_conversion_api_flag: Optional[StrictBool] = Field(default=None, description="True if the member has access to the Opportunity Conversion Api.", alias="opportunityConversionApiFlag")
    opportunity_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="opportunityLegacyCallbackFlag")
    password: Optional[StrictStr] = Field(default=None, description="The password will never be returned in response. Max length: 50;")
    product_api_flag: Optional[StrictBool] = Field(default=None, alias="productApiFlag")
    product_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="productCallbackUrl")
    product_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="productLegacyCallbackFlag")
    project_api_flag: Optional[StrictBool] = Field(default=None, alias="projectApiFlag")
    project_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="projectCallbackUrl")
    project_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="projectLegacyCallbackFlag")
    purchasing_api_flag: Optional[StrictBool] = Field(default=None, alias="purchasingApiFlag")
    purchasing_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="purchasingCallbackUrl")
    purchasing_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="purchasingLegacyCallbackFlag")
    reporting_api_flag: Optional[StrictBool] = Field(default=None, alias="reportingApiFlag")
    schedule_api_flag: Optional[StrictBool] = Field(default=None, alias="scheduleApiFlag")
    schedule_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="scheduleCallbackUrl")
    schedule_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="scheduleLegacyCallbackFlag")
    service_board_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="serviceBoardCallbackUrl")
    service_board_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="serviceBoardLegacyCallbackFlag")
    service_ticket_api_flag: Optional[StrictBool] = Field(default=None, alias="serviceTicketApiFlag")
    system_api_flag: Optional[StrictBool] = Field(default=None, alias="systemApiFlag")
    time_entry_api_flag: Optional[StrictBool] = Field(default=None, alias="timeEntryApiFlag")
    time_entry_callback_url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="timeEntryCallbackUrl")
    time_entry_legacy_callback_flag: Optional[StrictBool] = Field(default=None, alias="timeEntryLegacyCallbackFlag")
    username: StrictStr = Field(description=" Max length: 50;")
    __properties: ClassVar[List[str]] = ["_info", "activityApiFlag", "activityCallbackUrl", "activityLegacyCallbackFlag", "agreementApiFlag", "agreementCallbackLegacyFlag", "agreementCallbackUrl", "board", "canAccessAllApisFlag", "canAccessAllRecordsFlag", "companyApiFlag", "companyCallbackUrl", "companyLegacyCallbackFlag", "configurationApiFlag", "configurationAutoChildFlag", "configurationCallbackUrl", "configurationChildlingFlag", "configurationLegacyCallbackFlag", "contactApiFlag", "contactCallbackUrl", "contactLegacyCallbackFlag", "dateInactivated", "documentApiFlag", "id", "inactivatedBy", "inactiveFlag", "invoiceApiFlag", "managedServicesApiFlag", "managedServicesAutoChildFlag", "managedServicesChildingFlag", "marketingApiFlag", "member", "memberApiFlag", "opportunityApiFlag", "opportunityCallbackUrl", "opportunityConversionApiFlag", "opportunityLegacyCallbackFlag", "password", "productApiFlag", "productCallbackUrl", "productLegacyCallbackFlag", "projectApiFlag", "projectCallbackUrl", "projectLegacyCallbackFlag", "purchasingApiFlag", "purchasingCallbackUrl", "purchasingLegacyCallbackFlag", "reportingApiFlag", "scheduleApiFlag", "scheduleCallbackUrl", "scheduleLegacyCallbackFlag", "serviceBoardCallbackUrl", "serviceBoardLegacyCallbackFlag", "serviceTicketApiFlag", "systemApiFlag", "timeEntryApiFlag", "timeEntryCallbackUrl", "timeEntryLegacyCallbackFlag", "username"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IntegratorLogin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of board
        if self.board:
            _dict['board'] = self.board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inactivated_by
        if self.inactivated_by:
            _dict['inactivatedBy'] = self.inactivated_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # set to None if activity_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.activity_api_flag is None and "activity_api_flag" in self.model_fields_set:
            _dict['activityApiFlag'] = None

        # set to None if activity_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.activity_legacy_callback_flag is None and "activity_legacy_callback_flag" in self.model_fields_set:
            _dict['activityLegacyCallbackFlag'] = None

        # set to None if agreement_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_api_flag is None and "agreement_api_flag" in self.model_fields_set:
            _dict['agreementApiFlag'] = None

        # set to None if agreement_callback_legacy_flag (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_callback_legacy_flag is None and "agreement_callback_legacy_flag" in self.model_fields_set:
            _dict['agreementCallbackLegacyFlag'] = None

        # set to None if can_access_all_apis_flag (nullable) is None
        # and model_fields_set contains the field
        if self.can_access_all_apis_flag is None and "can_access_all_apis_flag" in self.model_fields_set:
            _dict['canAccessAllApisFlag'] = None

        # set to None if can_access_all_records_flag (nullable) is None
        # and model_fields_set contains the field
        if self.can_access_all_records_flag is None and "can_access_all_records_flag" in self.model_fields_set:
            _dict['canAccessAllRecordsFlag'] = None

        # set to None if company_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.company_api_flag is None and "company_api_flag" in self.model_fields_set:
            _dict['companyApiFlag'] = None

        # set to None if company_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.company_legacy_callback_flag is None and "company_legacy_callback_flag" in self.model_fields_set:
            _dict['companyLegacyCallbackFlag'] = None

        # set to None if configuration_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.configuration_api_flag is None and "configuration_api_flag" in self.model_fields_set:
            _dict['configurationApiFlag'] = None

        # set to None if configuration_auto_child_flag (nullable) is None
        # and model_fields_set contains the field
        if self.configuration_auto_child_flag is None and "configuration_auto_child_flag" in self.model_fields_set:
            _dict['configurationAutoChildFlag'] = None

        # set to None if configuration_childling_flag (nullable) is None
        # and model_fields_set contains the field
        if self.configuration_childling_flag is None and "configuration_childling_flag" in self.model_fields_set:
            _dict['configurationChildlingFlag'] = None

        # set to None if configuration_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.configuration_legacy_callback_flag is None and "configuration_legacy_callback_flag" in self.model_fields_set:
            _dict['configurationLegacyCallbackFlag'] = None

        # set to None if contact_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.contact_api_flag is None and "contact_api_flag" in self.model_fields_set:
            _dict['contactApiFlag'] = None

        # set to None if contact_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.contact_legacy_callback_flag is None and "contact_legacy_callback_flag" in self.model_fields_set:
            _dict['contactLegacyCallbackFlag'] = None

        # set to None if document_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.document_api_flag is None and "document_api_flag" in self.model_fields_set:
            _dict['documentApiFlag'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if invoice_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_api_flag is None and "invoice_api_flag" in self.model_fields_set:
            _dict['invoiceApiFlag'] = None

        # set to None if managed_services_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.managed_services_api_flag is None and "managed_services_api_flag" in self.model_fields_set:
            _dict['managedServicesApiFlag'] = None

        # set to None if managed_services_auto_child_flag (nullable) is None
        # and model_fields_set contains the field
        if self.managed_services_auto_child_flag is None and "managed_services_auto_child_flag" in self.model_fields_set:
            _dict['managedServicesAutoChildFlag'] = None

        # set to None if managed_services_childing_flag (nullable) is None
        # and model_fields_set contains the field
        if self.managed_services_childing_flag is None and "managed_services_childing_flag" in self.model_fields_set:
            _dict['managedServicesChildingFlag'] = None

        # set to None if marketing_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.marketing_api_flag is None and "marketing_api_flag" in self.model_fields_set:
            _dict['marketingApiFlag'] = None

        # set to None if member_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.member_api_flag is None and "member_api_flag" in self.model_fields_set:
            _dict['memberApiFlag'] = None

        # set to None if opportunity_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.opportunity_api_flag is None and "opportunity_api_flag" in self.model_fields_set:
            _dict['opportunityApiFlag'] = None

        # set to None if opportunity_conversion_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.opportunity_conversion_api_flag is None and "opportunity_conversion_api_flag" in self.model_fields_set:
            _dict['opportunityConversionApiFlag'] = None

        # set to None if opportunity_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.opportunity_legacy_callback_flag is None and "opportunity_legacy_callback_flag" in self.model_fields_set:
            _dict['opportunityLegacyCallbackFlag'] = None

        # set to None if product_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_api_flag is None and "product_api_flag" in self.model_fields_set:
            _dict['productApiFlag'] = None

        # set to None if product_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_legacy_callback_flag is None and "product_legacy_callback_flag" in self.model_fields_set:
            _dict['productLegacyCallbackFlag'] = None

        # set to None if project_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_api_flag is None and "project_api_flag" in self.model_fields_set:
            _dict['projectApiFlag'] = None

        # set to None if project_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.project_legacy_callback_flag is None and "project_legacy_callback_flag" in self.model_fields_set:
            _dict['projectLegacyCallbackFlag'] = None

        # set to None if purchasing_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.purchasing_api_flag is None and "purchasing_api_flag" in self.model_fields_set:
            _dict['purchasingApiFlag'] = None

        # set to None if purchasing_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.purchasing_legacy_callback_flag is None and "purchasing_legacy_callback_flag" in self.model_fields_set:
            _dict['purchasingLegacyCallbackFlag'] = None

        # set to None if reporting_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.reporting_api_flag is None and "reporting_api_flag" in self.model_fields_set:
            _dict['reportingApiFlag'] = None

        # set to None if schedule_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_api_flag is None and "schedule_api_flag" in self.model_fields_set:
            _dict['scheduleApiFlag'] = None

        # set to None if schedule_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_legacy_callback_flag is None and "schedule_legacy_callback_flag" in self.model_fields_set:
            _dict['scheduleLegacyCallbackFlag'] = None

        # set to None if service_board_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.service_board_legacy_callback_flag is None and "service_board_legacy_callback_flag" in self.model_fields_set:
            _dict['serviceBoardLegacyCallbackFlag'] = None

        # set to None if service_ticket_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.service_ticket_api_flag is None and "service_ticket_api_flag" in self.model_fields_set:
            _dict['serviceTicketApiFlag'] = None

        # set to None if system_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.system_api_flag is None and "system_api_flag" in self.model_fields_set:
            _dict['systemApiFlag'] = None

        # set to None if time_entry_api_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_entry_api_flag is None and "time_entry_api_flag" in self.model_fields_set:
            _dict['timeEntryApiFlag'] = None

        # set to None if time_entry_legacy_callback_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_entry_legacy_callback_flag is None and "time_entry_legacy_callback_flag" in self.model_fields_set:
            _dict['timeEntryLegacyCallbackFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IntegratorLogin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in IntegratorLogin) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "activityApiFlag": obj.get("activityApiFlag"),
            "activityCallbackUrl": obj.get("activityCallbackUrl"),
            "activityLegacyCallbackFlag": obj.get("activityLegacyCallbackFlag"),
            "agreementApiFlag": obj.get("agreementApiFlag"),
            "agreementCallbackLegacyFlag": obj.get("agreementCallbackLegacyFlag"),
            "agreementCallbackUrl": obj.get("agreementCallbackUrl"),
            "board": BoardReference.from_dict(obj.get("board")) if obj.get("board") is not None else None,
            "canAccessAllApisFlag": obj.get("canAccessAllApisFlag"),
            "canAccessAllRecordsFlag": obj.get("canAccessAllRecordsFlag"),
            "companyApiFlag": obj.get("companyApiFlag"),
            "companyCallbackUrl": obj.get("companyCallbackUrl"),
            "companyLegacyCallbackFlag": obj.get("companyLegacyCallbackFlag"),
            "configurationApiFlag": obj.get("configurationApiFlag"),
            "configurationAutoChildFlag": obj.get("configurationAutoChildFlag"),
            "configurationCallbackUrl": obj.get("configurationCallbackUrl"),
            "configurationChildlingFlag": obj.get("configurationChildlingFlag"),
            "configurationLegacyCallbackFlag": obj.get("configurationLegacyCallbackFlag"),
            "contactApiFlag": obj.get("contactApiFlag"),
            "contactCallbackUrl": obj.get("contactCallbackUrl"),
            "contactLegacyCallbackFlag": obj.get("contactLegacyCallbackFlag"),
            "dateInactivated": obj.get("dateInactivated"),
            "documentApiFlag": obj.get("documentApiFlag"),
            "id": obj.get("id"),
            "inactivatedBy": MemberReference.from_dict(obj.get("inactivatedBy")) if obj.get("inactivatedBy") is not None else None,
            "inactiveFlag": obj.get("inactiveFlag"),
            "invoiceApiFlag": obj.get("invoiceApiFlag"),
            "managedServicesApiFlag": obj.get("managedServicesApiFlag"),
            "managedServicesAutoChildFlag": obj.get("managedServicesAutoChildFlag"),
            "managedServicesChildingFlag": obj.get("managedServicesChildingFlag"),
            "marketingApiFlag": obj.get("marketingApiFlag"),
            "member": MemberReference.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "memberApiFlag": obj.get("memberApiFlag"),
            "opportunityApiFlag": obj.get("opportunityApiFlag"),
            "opportunityCallbackUrl": obj.get("opportunityCallbackUrl"),
            "opportunityConversionApiFlag": obj.get("opportunityConversionApiFlag"),
            "opportunityLegacyCallbackFlag": obj.get("opportunityLegacyCallbackFlag"),
            "password": obj.get("password"),
            "productApiFlag": obj.get("productApiFlag"),
            "productCallbackUrl": obj.get("productCallbackUrl"),
            "productLegacyCallbackFlag": obj.get("productLegacyCallbackFlag"),
            "projectApiFlag": obj.get("projectApiFlag"),
            "projectCallbackUrl": obj.get("projectCallbackUrl"),
            "projectLegacyCallbackFlag": obj.get("projectLegacyCallbackFlag"),
            "purchasingApiFlag": obj.get("purchasingApiFlag"),
            "purchasingCallbackUrl": obj.get("purchasingCallbackUrl"),
            "purchasingLegacyCallbackFlag": obj.get("purchasingLegacyCallbackFlag"),
            "reportingApiFlag": obj.get("reportingApiFlag"),
            "scheduleApiFlag": obj.get("scheduleApiFlag"),
            "scheduleCallbackUrl": obj.get("scheduleCallbackUrl"),
            "scheduleLegacyCallbackFlag": obj.get("scheduleLegacyCallbackFlag"),
            "serviceBoardCallbackUrl": obj.get("serviceBoardCallbackUrl"),
            "serviceBoardLegacyCallbackFlag": obj.get("serviceBoardLegacyCallbackFlag"),
            "serviceTicketApiFlag": obj.get("serviceTicketApiFlag"),
            "systemApiFlag": obj.get("systemApiFlag"),
            "timeEntryApiFlag": obj.get("timeEntryApiFlag"),
            "timeEntryCallbackUrl": obj.get("timeEntryCallbackUrl"),
            "timeEntryLegacyCallbackFlag": obj.get("timeEntryLegacyCallbackFlag"),
            "username": obj.get("username")
        })
        return _obj


