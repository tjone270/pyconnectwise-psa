# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.country_reference import CountryReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TaxCode(BaseModel):
    """
    TaxCode
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    add_all_expense_types: Optional[StrictBool] = Field(default=None, alias="addAllExpenseTypes")
    add_all_product_types: Optional[StrictBool] = Field(default=None, alias="addAllProductTypes")
    add_all_work_roles: Optional[StrictBool] = Field(default=None, alias="addAllWorkRoles")
    canada_calculate_gst_flag: Optional[StrictBool] = Field(default=None, alias="canadaCalculateGSTFlag")
    cancel_date: Optional[datetime] = Field(default=None, alias="cancelDate")
    country: Optional[CountryReference] = None
    default_flag: Optional[StrictBool] = Field(default=None, alias="defaultFlag")
    description: StrictStr = Field(description=" Max length: 50;")
    display_on_invoice_flag: Optional[StrictBool] = Field(default=None, alias="displayOnInvoiceFlag")
    effective_date: datetime = Field(alias="effectiveDate")
    expense_type_ids: Optional[List[StrictInt]] = Field(default=None, description="Array of expense type exemptions for the tax code.", alias="expenseTypeIds")
    id: Optional[StrictInt] = None
    identifier: StrictStr = Field(description=" Max length: 8;")
    invoice_caption: StrictStr = Field(description=" Max length: 25;", alias="invoiceCaption")
    level_five_agency_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="levelFiveAgencyXref")
    level_five_apply_single_unit_flag: Optional[StrictBool] = Field(default=None, alias="levelFiveApplySingleUnitFlag")
    level_five_apply_single_unit_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelFiveApplySingleUnitMax")
    level_five_apply_single_unit_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelFiveApplySingleUnitMin")
    level_five_caption: Optional[StrictStr] = Field(default=None, description=" Max length: 25;", alias="levelFiveCaption")
    level_five_expenses_flag: Optional[StrictBool] = Field(default=None, alias="levelFiveExpensesFlag")
    level_five_products_flag: Optional[StrictBool] = Field(default=None, alias="levelFiveProductsFlag")
    level_five_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelFiveRate")
    level_five_rate_type: Optional[StrictStr] = Field(default=None, alias="levelFiveRateType")
    level_five_services_flag: Optional[StrictBool] = Field(default=None, alias="levelFiveServicesFlag")
    level_five_tax_code_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="levelFiveTaxCodeXref")
    level_five_taxable_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelFiveTaxableMax")
    level_four_agency_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="levelFourAgencyXref")
    level_four_apply_single_unit_flag: Optional[StrictBool] = Field(default=None, alias="levelFourApplySingleUnitFlag")
    level_four_apply_single_unit_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelFourApplySingleUnitMax")
    level_four_apply_single_unit_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelFourApplySingleUnitMin")
    level_four_caption: Optional[StrictStr] = Field(default=None, description=" Max length: 25;", alias="levelFourCaption")
    level_four_expenses_flag: Optional[StrictBool] = Field(default=None, alias="levelFourExpensesFlag")
    level_four_products_flag: Optional[StrictBool] = Field(default=None, alias="levelFourProductsFlag")
    level_four_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelFourRate")
    level_four_rate_type: Optional[StrictStr] = Field(default=None, alias="levelFourRateType")
    level_four_services_flag: Optional[StrictBool] = Field(default=None, alias="levelFourServicesFlag")
    level_four_tax_code_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="levelFourTaxCodeXref")
    level_four_taxable_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelFourTaxableMax")
    level_one_agency_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="levelOneAgencyXref")
    level_one_apply_single_unit_flag: Optional[StrictBool] = Field(default=None, alias="levelOneApplySingleUnitFlag")
    level_one_apply_single_unit_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelOneApplySingleUnitMax")
    level_one_apply_single_unit_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelOneApplySingleUnitMin")
    level_one_caption: Optional[StrictStr] = Field(default=None, description=" Max length: 25;", alias="levelOneCaption")
    level_one_expenses_flag: Optional[StrictBool] = Field(default=None, alias="levelOneExpensesFlag")
    level_one_products_flag: Optional[StrictBool] = Field(default=None, alias="levelOneProductsFlag")
    level_one_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelOneRate")
    level_one_rate_type: Optional[StrictStr] = Field(default=None, alias="levelOneRateType")
    level_one_services_flag: Optional[StrictBool] = Field(default=None, alias="levelOneServicesFlag")
    level_one_tax_code_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="levelOneTaxCodeXref")
    level_one_taxable_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelOneTaxableMax")
    level_six_agency_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="levelSixAgencyXref")
    level_six_apply_single_unit_flag: Optional[StrictBool] = Field(default=None, alias="levelSixApplySingleUnitFlag")
    level_six_apply_single_unit_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelSixApplySingleUnitMax")
    level_six_apply_single_unit_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelSixApplySingleUnitMin")
    level_six_caption: Optional[StrictStr] = Field(default=None, description=" Max length: 25;", alias="levelSixCaption")
    level_six_expenses_flag: Optional[StrictBool] = Field(default=None, alias="levelSixExpensesFlag")
    level_six_products_flag: Optional[StrictBool] = Field(default=None, alias="levelSixProductsFlag")
    level_six_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelSixRate")
    level_six_rate_type: Optional[StrictStr] = Field(default=None, alias="levelSixRateType")
    level_six_services_flag: Optional[StrictBool] = Field(default=None, alias="levelSixServicesFlag")
    level_six_tax_code_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="levelSixTaxCodeXref")
    level_six_taxable_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelSixTaxableMax")
    level_three_agency_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="levelThreeAgencyXref")
    level_three_apply_single_unit_flag: Optional[StrictBool] = Field(default=None, alias="levelThreeApplySingleUnitFlag")
    level_three_apply_single_unit_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelThreeApplySingleUnitMax")
    level_three_apply_single_unit_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelThreeApplySingleUnitMin")
    level_three_caption: Optional[StrictStr] = Field(default=None, description=" Max length: 25;", alias="levelThreeCaption")
    level_three_expenses_flag: Optional[StrictBool] = Field(default=None, alias="levelThreeExpensesFlag")
    level_three_products_flag: Optional[StrictBool] = Field(default=None, alias="levelThreeProductsFlag")
    level_three_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelThreeRate")
    level_three_rate_type: Optional[StrictStr] = Field(default=None, alias="levelThreeRateType")
    level_three_services_flag: Optional[StrictBool] = Field(default=None, alias="levelThreeServicesFlag")
    level_three_tax_code_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="levelThreeTaxCodeXref")
    level_three_taxable_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelThreeTaxableMax")
    level_two_agency_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="levelTwoAgencyXref")
    level_two_apply_single_unit_flag: Optional[StrictBool] = Field(default=None, alias="levelTwoApplySingleUnitFlag")
    level_two_apply_single_unit_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelTwoApplySingleUnitMax")
    level_two_apply_single_unit_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelTwoApplySingleUnitMin")
    level_two_caption: Optional[StrictStr] = Field(default=None, description=" Max length: 25;", alias="levelTwoCaption")
    level_two_expenses_flag: Optional[StrictBool] = Field(default=None, alias="levelTwoExpensesFlag")
    level_two_products_flag: Optional[StrictBool] = Field(default=None, alias="levelTwoProductsFlag")
    level_two_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelTwoRate")
    level_two_rate_type: Optional[StrictStr] = Field(default=None, alias="levelTwoRateType")
    level_two_services_flag: Optional[StrictBool] = Field(default=None, alias="levelTwoServicesFlag")
    level_two_tax_code_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="levelTwoTaxCodeXref")
    level_two_taxable_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelTwoTaxableMax")
    product_type_ids: Optional[List[StrictInt]] = Field(default=None, description="Array of product type exemptions for the tax code.", alias="productTypeIds")
    remove_all_expense_types: Optional[StrictBool] = Field(default=None, alias="removeAllExpenseTypes")
    remove_all_product_types: Optional[StrictBool] = Field(default=None, alias="removeAllProductTypes")
    remove_all_work_roles: Optional[StrictBool] = Field(default=None, alias="removeAllWorkRoles")
    work_role_ids: Optional[List[StrictInt]] = Field(default=None, description="Array of work role exemptions for the tax code.", alias="workRoleIds")
    __properties: ClassVar[List[str]] = ["_info", "addAllExpenseTypes", "addAllProductTypes", "addAllWorkRoles", "canadaCalculateGSTFlag", "cancelDate", "country", "defaultFlag", "description", "displayOnInvoiceFlag", "effectiveDate", "expenseTypeIds", "id", "identifier", "invoiceCaption", "levelFiveAgencyXref", "levelFiveApplySingleUnitFlag", "levelFiveApplySingleUnitMax", "levelFiveApplySingleUnitMin", "levelFiveCaption", "levelFiveExpensesFlag", "levelFiveProductsFlag", "levelFiveRate", "levelFiveRateType", "levelFiveServicesFlag", "levelFiveTaxCodeXref", "levelFiveTaxableMax", "levelFourAgencyXref", "levelFourApplySingleUnitFlag", "levelFourApplySingleUnitMax", "levelFourApplySingleUnitMin", "levelFourCaption", "levelFourExpensesFlag", "levelFourProductsFlag", "levelFourRate", "levelFourRateType", "levelFourServicesFlag", "levelFourTaxCodeXref", "levelFourTaxableMax", "levelOneAgencyXref", "levelOneApplySingleUnitFlag", "levelOneApplySingleUnitMax", "levelOneApplySingleUnitMin", "levelOneCaption", "levelOneExpensesFlag", "levelOneProductsFlag", "levelOneRate", "levelOneRateType", "levelOneServicesFlag", "levelOneTaxCodeXref", "levelOneTaxableMax", "levelSixAgencyXref", "levelSixApplySingleUnitFlag", "levelSixApplySingleUnitMax", "levelSixApplySingleUnitMin", "levelSixCaption", "levelSixExpensesFlag", "levelSixProductsFlag", "levelSixRate", "levelSixRateType", "levelSixServicesFlag", "levelSixTaxCodeXref", "levelSixTaxableMax", "levelThreeAgencyXref", "levelThreeApplySingleUnitFlag", "levelThreeApplySingleUnitMax", "levelThreeApplySingleUnitMin", "levelThreeCaption", "levelThreeExpensesFlag", "levelThreeProductsFlag", "levelThreeRate", "levelThreeRateType", "levelThreeServicesFlag", "levelThreeTaxCodeXref", "levelThreeTaxableMax", "levelTwoAgencyXref", "levelTwoApplySingleUnitFlag", "levelTwoApplySingleUnitMax", "levelTwoApplySingleUnitMin", "levelTwoCaption", "levelTwoExpensesFlag", "levelTwoProductsFlag", "levelTwoRate", "levelTwoRateType", "levelTwoServicesFlag", "levelTwoTaxCodeXref", "levelTwoTaxableMax", "productTypeIds", "removeAllExpenseTypes", "removeAllProductTypes", "removeAllWorkRoles", "workRoleIds"]

    @field_validator('level_five_rate_type')
    def level_five_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Amount', 'Percent'):
            raise ValueError("must be one of enum values ('Amount', 'Percent')")
        return value

    @field_validator('level_four_rate_type')
    def level_four_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Amount', 'Percent'):
            raise ValueError("must be one of enum values ('Amount', 'Percent')")
        return value

    @field_validator('level_one_rate_type')
    def level_one_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Amount', 'Percent'):
            raise ValueError("must be one of enum values ('Amount', 'Percent')")
        return value

    @field_validator('level_six_rate_type')
    def level_six_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Amount', 'Percent'):
            raise ValueError("must be one of enum values ('Amount', 'Percent')")
        return value

    @field_validator('level_three_rate_type')
    def level_three_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Amount', 'Percent'):
            raise ValueError("must be one of enum values ('Amount', 'Percent')")
        return value

    @field_validator('level_two_rate_type')
    def level_two_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Amount', 'Percent'):
            raise ValueError("must be one of enum values ('Amount', 'Percent')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaxCode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # set to None if add_all_expense_types (nullable) is None
        # and model_fields_set contains the field
        if self.add_all_expense_types is None and "add_all_expense_types" in self.model_fields_set:
            _dict['addAllExpenseTypes'] = None

        # set to None if add_all_product_types (nullable) is None
        # and model_fields_set contains the field
        if self.add_all_product_types is None and "add_all_product_types" in self.model_fields_set:
            _dict['addAllProductTypes'] = None

        # set to None if add_all_work_roles (nullable) is None
        # and model_fields_set contains the field
        if self.add_all_work_roles is None and "add_all_work_roles" in self.model_fields_set:
            _dict['addAllWorkRoles'] = None

        # set to None if canada_calculate_gst_flag (nullable) is None
        # and model_fields_set contains the field
        if self.canada_calculate_gst_flag is None and "canada_calculate_gst_flag" in self.model_fields_set:
            _dict['canadaCalculateGSTFlag'] = None

        # set to None if default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_flag is None and "default_flag" in self.model_fields_set:
            _dict['defaultFlag'] = None

        # set to None if display_on_invoice_flag (nullable) is None
        # and model_fields_set contains the field
        if self.display_on_invoice_flag is None and "display_on_invoice_flag" in self.model_fields_set:
            _dict['displayOnInvoiceFlag'] = None

        # set to None if level_five_apply_single_unit_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_five_apply_single_unit_flag is None and "level_five_apply_single_unit_flag" in self.model_fields_set:
            _dict['levelFiveApplySingleUnitFlag'] = None

        # set to None if level_five_apply_single_unit_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_five_apply_single_unit_max is None and "level_five_apply_single_unit_max" in self.model_fields_set:
            _dict['levelFiveApplySingleUnitMax'] = None

        # set to None if level_five_apply_single_unit_min (nullable) is None
        # and model_fields_set contains the field
        if self.level_five_apply_single_unit_min is None and "level_five_apply_single_unit_min" in self.model_fields_set:
            _dict['levelFiveApplySingleUnitMin'] = None

        # set to None if level_five_expenses_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_five_expenses_flag is None and "level_five_expenses_flag" in self.model_fields_set:
            _dict['levelFiveExpensesFlag'] = None

        # set to None if level_five_products_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_five_products_flag is None and "level_five_products_flag" in self.model_fields_set:
            _dict['levelFiveProductsFlag'] = None

        # set to None if level_five_rate (nullable) is None
        # and model_fields_set contains the field
        if self.level_five_rate is None and "level_five_rate" in self.model_fields_set:
            _dict['levelFiveRate'] = None

        # set to None if level_five_rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.level_five_rate_type is None and "level_five_rate_type" in self.model_fields_set:
            _dict['levelFiveRateType'] = None

        # set to None if level_five_services_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_five_services_flag is None and "level_five_services_flag" in self.model_fields_set:
            _dict['levelFiveServicesFlag'] = None

        # set to None if level_five_taxable_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_five_taxable_max is None and "level_five_taxable_max" in self.model_fields_set:
            _dict['levelFiveTaxableMax'] = None

        # set to None if level_four_apply_single_unit_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_four_apply_single_unit_flag is None and "level_four_apply_single_unit_flag" in self.model_fields_set:
            _dict['levelFourApplySingleUnitFlag'] = None

        # set to None if level_four_apply_single_unit_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_four_apply_single_unit_max is None and "level_four_apply_single_unit_max" in self.model_fields_set:
            _dict['levelFourApplySingleUnitMax'] = None

        # set to None if level_four_apply_single_unit_min (nullable) is None
        # and model_fields_set contains the field
        if self.level_four_apply_single_unit_min is None and "level_four_apply_single_unit_min" in self.model_fields_set:
            _dict['levelFourApplySingleUnitMin'] = None

        # set to None if level_four_expenses_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_four_expenses_flag is None and "level_four_expenses_flag" in self.model_fields_set:
            _dict['levelFourExpensesFlag'] = None

        # set to None if level_four_products_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_four_products_flag is None and "level_four_products_flag" in self.model_fields_set:
            _dict['levelFourProductsFlag'] = None

        # set to None if level_four_rate (nullable) is None
        # and model_fields_set contains the field
        if self.level_four_rate is None and "level_four_rate" in self.model_fields_set:
            _dict['levelFourRate'] = None

        # set to None if level_four_rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.level_four_rate_type is None and "level_four_rate_type" in self.model_fields_set:
            _dict['levelFourRateType'] = None

        # set to None if level_four_services_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_four_services_flag is None and "level_four_services_flag" in self.model_fields_set:
            _dict['levelFourServicesFlag'] = None

        # set to None if level_four_taxable_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_four_taxable_max is None and "level_four_taxable_max" in self.model_fields_set:
            _dict['levelFourTaxableMax'] = None

        # set to None if level_one_apply_single_unit_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_one_apply_single_unit_flag is None and "level_one_apply_single_unit_flag" in self.model_fields_set:
            _dict['levelOneApplySingleUnitFlag'] = None

        # set to None if level_one_apply_single_unit_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_one_apply_single_unit_max is None and "level_one_apply_single_unit_max" in self.model_fields_set:
            _dict['levelOneApplySingleUnitMax'] = None

        # set to None if level_one_apply_single_unit_min (nullable) is None
        # and model_fields_set contains the field
        if self.level_one_apply_single_unit_min is None and "level_one_apply_single_unit_min" in self.model_fields_set:
            _dict['levelOneApplySingleUnitMin'] = None

        # set to None if level_one_expenses_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_one_expenses_flag is None and "level_one_expenses_flag" in self.model_fields_set:
            _dict['levelOneExpensesFlag'] = None

        # set to None if level_one_products_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_one_products_flag is None and "level_one_products_flag" in self.model_fields_set:
            _dict['levelOneProductsFlag'] = None

        # set to None if level_one_rate (nullable) is None
        # and model_fields_set contains the field
        if self.level_one_rate is None and "level_one_rate" in self.model_fields_set:
            _dict['levelOneRate'] = None

        # set to None if level_one_rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.level_one_rate_type is None and "level_one_rate_type" in self.model_fields_set:
            _dict['levelOneRateType'] = None

        # set to None if level_one_services_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_one_services_flag is None and "level_one_services_flag" in self.model_fields_set:
            _dict['levelOneServicesFlag'] = None

        # set to None if level_one_taxable_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_one_taxable_max is None and "level_one_taxable_max" in self.model_fields_set:
            _dict['levelOneTaxableMax'] = None

        # set to None if level_six_apply_single_unit_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_apply_single_unit_flag is None and "level_six_apply_single_unit_flag" in self.model_fields_set:
            _dict['levelSixApplySingleUnitFlag'] = None

        # set to None if level_six_apply_single_unit_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_apply_single_unit_max is None and "level_six_apply_single_unit_max" in self.model_fields_set:
            _dict['levelSixApplySingleUnitMax'] = None

        # set to None if level_six_apply_single_unit_min (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_apply_single_unit_min is None and "level_six_apply_single_unit_min" in self.model_fields_set:
            _dict['levelSixApplySingleUnitMin'] = None

        # set to None if level_six_expenses_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_expenses_flag is None and "level_six_expenses_flag" in self.model_fields_set:
            _dict['levelSixExpensesFlag'] = None

        # set to None if level_six_products_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_products_flag is None and "level_six_products_flag" in self.model_fields_set:
            _dict['levelSixProductsFlag'] = None

        # set to None if level_six_rate (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_rate is None and "level_six_rate" in self.model_fields_set:
            _dict['levelSixRate'] = None

        # set to None if level_six_rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_rate_type is None and "level_six_rate_type" in self.model_fields_set:
            _dict['levelSixRateType'] = None

        # set to None if level_six_services_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_services_flag is None and "level_six_services_flag" in self.model_fields_set:
            _dict['levelSixServicesFlag'] = None

        # set to None if level_six_taxable_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_taxable_max is None and "level_six_taxable_max" in self.model_fields_set:
            _dict['levelSixTaxableMax'] = None

        # set to None if level_three_apply_single_unit_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_three_apply_single_unit_flag is None and "level_three_apply_single_unit_flag" in self.model_fields_set:
            _dict['levelThreeApplySingleUnitFlag'] = None

        # set to None if level_three_apply_single_unit_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_three_apply_single_unit_max is None and "level_three_apply_single_unit_max" in self.model_fields_set:
            _dict['levelThreeApplySingleUnitMax'] = None

        # set to None if level_three_apply_single_unit_min (nullable) is None
        # and model_fields_set contains the field
        if self.level_three_apply_single_unit_min is None and "level_three_apply_single_unit_min" in self.model_fields_set:
            _dict['levelThreeApplySingleUnitMin'] = None

        # set to None if level_three_expenses_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_three_expenses_flag is None and "level_three_expenses_flag" in self.model_fields_set:
            _dict['levelThreeExpensesFlag'] = None

        # set to None if level_three_products_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_three_products_flag is None and "level_three_products_flag" in self.model_fields_set:
            _dict['levelThreeProductsFlag'] = None

        # set to None if level_three_rate (nullable) is None
        # and model_fields_set contains the field
        if self.level_three_rate is None and "level_three_rate" in self.model_fields_set:
            _dict['levelThreeRate'] = None

        # set to None if level_three_rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.level_three_rate_type is None and "level_three_rate_type" in self.model_fields_set:
            _dict['levelThreeRateType'] = None

        # set to None if level_three_services_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_three_services_flag is None and "level_three_services_flag" in self.model_fields_set:
            _dict['levelThreeServicesFlag'] = None

        # set to None if level_three_taxable_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_three_taxable_max is None and "level_three_taxable_max" in self.model_fields_set:
            _dict['levelThreeTaxableMax'] = None

        # set to None if level_two_apply_single_unit_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_two_apply_single_unit_flag is None and "level_two_apply_single_unit_flag" in self.model_fields_set:
            _dict['levelTwoApplySingleUnitFlag'] = None

        # set to None if level_two_apply_single_unit_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_two_apply_single_unit_max is None and "level_two_apply_single_unit_max" in self.model_fields_set:
            _dict['levelTwoApplySingleUnitMax'] = None

        # set to None if level_two_apply_single_unit_min (nullable) is None
        # and model_fields_set contains the field
        if self.level_two_apply_single_unit_min is None and "level_two_apply_single_unit_min" in self.model_fields_set:
            _dict['levelTwoApplySingleUnitMin'] = None

        # set to None if level_two_expenses_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_two_expenses_flag is None and "level_two_expenses_flag" in self.model_fields_set:
            _dict['levelTwoExpensesFlag'] = None

        # set to None if level_two_products_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_two_products_flag is None and "level_two_products_flag" in self.model_fields_set:
            _dict['levelTwoProductsFlag'] = None

        # set to None if level_two_rate (nullable) is None
        # and model_fields_set contains the field
        if self.level_two_rate is None and "level_two_rate" in self.model_fields_set:
            _dict['levelTwoRate'] = None

        # set to None if level_two_rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.level_two_rate_type is None and "level_two_rate_type" in self.model_fields_set:
            _dict['levelTwoRateType'] = None

        # set to None if level_two_services_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_two_services_flag is None and "level_two_services_flag" in self.model_fields_set:
            _dict['levelTwoServicesFlag'] = None

        # set to None if level_two_taxable_max (nullable) is None
        # and model_fields_set contains the field
        if self.level_two_taxable_max is None and "level_two_taxable_max" in self.model_fields_set:
            _dict['levelTwoTaxableMax'] = None

        # set to None if remove_all_expense_types (nullable) is None
        # and model_fields_set contains the field
        if self.remove_all_expense_types is None and "remove_all_expense_types" in self.model_fields_set:
            _dict['removeAllExpenseTypes'] = None

        # set to None if remove_all_product_types (nullable) is None
        # and model_fields_set contains the field
        if self.remove_all_product_types is None and "remove_all_product_types" in self.model_fields_set:
            _dict['removeAllProductTypes'] = None

        # set to None if remove_all_work_roles (nullable) is None
        # and model_fields_set contains the field
        if self.remove_all_work_roles is None and "remove_all_work_roles" in self.model_fields_set:
            _dict['removeAllWorkRoles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TaxCode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TaxCode) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "addAllExpenseTypes": obj.get("addAllExpenseTypes"),
            "addAllProductTypes": obj.get("addAllProductTypes"),
            "addAllWorkRoles": obj.get("addAllWorkRoles"),
            "canadaCalculateGSTFlag": obj.get("canadaCalculateGSTFlag"),
            "cancelDate": obj.get("cancelDate"),
            "country": CountryReference.from_dict(obj.get("country")) if obj.get("country") is not None else None,
            "defaultFlag": obj.get("defaultFlag"),
            "description": obj.get("description"),
            "displayOnInvoiceFlag": obj.get("displayOnInvoiceFlag"),
            "effectiveDate": obj.get("effectiveDate"),
            "expenseTypeIds": obj.get("expenseTypeIds"),
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "invoiceCaption": obj.get("invoiceCaption"),
            "levelFiveAgencyXref": obj.get("levelFiveAgencyXref"),
            "levelFiveApplySingleUnitFlag": obj.get("levelFiveApplySingleUnitFlag"),
            "levelFiveApplySingleUnitMax": obj.get("levelFiveApplySingleUnitMax"),
            "levelFiveApplySingleUnitMin": obj.get("levelFiveApplySingleUnitMin"),
            "levelFiveCaption": obj.get("levelFiveCaption"),
            "levelFiveExpensesFlag": obj.get("levelFiveExpensesFlag"),
            "levelFiveProductsFlag": obj.get("levelFiveProductsFlag"),
            "levelFiveRate": obj.get("levelFiveRate"),
            "levelFiveRateType": obj.get("levelFiveRateType"),
            "levelFiveServicesFlag": obj.get("levelFiveServicesFlag"),
            "levelFiveTaxCodeXref": obj.get("levelFiveTaxCodeXref"),
            "levelFiveTaxableMax": obj.get("levelFiveTaxableMax"),
            "levelFourAgencyXref": obj.get("levelFourAgencyXref"),
            "levelFourApplySingleUnitFlag": obj.get("levelFourApplySingleUnitFlag"),
            "levelFourApplySingleUnitMax": obj.get("levelFourApplySingleUnitMax"),
            "levelFourApplySingleUnitMin": obj.get("levelFourApplySingleUnitMin"),
            "levelFourCaption": obj.get("levelFourCaption"),
            "levelFourExpensesFlag": obj.get("levelFourExpensesFlag"),
            "levelFourProductsFlag": obj.get("levelFourProductsFlag"),
            "levelFourRate": obj.get("levelFourRate"),
            "levelFourRateType": obj.get("levelFourRateType"),
            "levelFourServicesFlag": obj.get("levelFourServicesFlag"),
            "levelFourTaxCodeXref": obj.get("levelFourTaxCodeXref"),
            "levelFourTaxableMax": obj.get("levelFourTaxableMax"),
            "levelOneAgencyXref": obj.get("levelOneAgencyXref"),
            "levelOneApplySingleUnitFlag": obj.get("levelOneApplySingleUnitFlag"),
            "levelOneApplySingleUnitMax": obj.get("levelOneApplySingleUnitMax"),
            "levelOneApplySingleUnitMin": obj.get("levelOneApplySingleUnitMin"),
            "levelOneCaption": obj.get("levelOneCaption"),
            "levelOneExpensesFlag": obj.get("levelOneExpensesFlag"),
            "levelOneProductsFlag": obj.get("levelOneProductsFlag"),
            "levelOneRate": obj.get("levelOneRate"),
            "levelOneRateType": obj.get("levelOneRateType"),
            "levelOneServicesFlag": obj.get("levelOneServicesFlag"),
            "levelOneTaxCodeXref": obj.get("levelOneTaxCodeXref"),
            "levelOneTaxableMax": obj.get("levelOneTaxableMax"),
            "levelSixAgencyXref": obj.get("levelSixAgencyXref"),
            "levelSixApplySingleUnitFlag": obj.get("levelSixApplySingleUnitFlag"),
            "levelSixApplySingleUnitMax": obj.get("levelSixApplySingleUnitMax"),
            "levelSixApplySingleUnitMin": obj.get("levelSixApplySingleUnitMin"),
            "levelSixCaption": obj.get("levelSixCaption"),
            "levelSixExpensesFlag": obj.get("levelSixExpensesFlag"),
            "levelSixProductsFlag": obj.get("levelSixProductsFlag"),
            "levelSixRate": obj.get("levelSixRate"),
            "levelSixRateType": obj.get("levelSixRateType"),
            "levelSixServicesFlag": obj.get("levelSixServicesFlag"),
            "levelSixTaxCodeXref": obj.get("levelSixTaxCodeXref"),
            "levelSixTaxableMax": obj.get("levelSixTaxableMax"),
            "levelThreeAgencyXref": obj.get("levelThreeAgencyXref"),
            "levelThreeApplySingleUnitFlag": obj.get("levelThreeApplySingleUnitFlag"),
            "levelThreeApplySingleUnitMax": obj.get("levelThreeApplySingleUnitMax"),
            "levelThreeApplySingleUnitMin": obj.get("levelThreeApplySingleUnitMin"),
            "levelThreeCaption": obj.get("levelThreeCaption"),
            "levelThreeExpensesFlag": obj.get("levelThreeExpensesFlag"),
            "levelThreeProductsFlag": obj.get("levelThreeProductsFlag"),
            "levelThreeRate": obj.get("levelThreeRate"),
            "levelThreeRateType": obj.get("levelThreeRateType"),
            "levelThreeServicesFlag": obj.get("levelThreeServicesFlag"),
            "levelThreeTaxCodeXref": obj.get("levelThreeTaxCodeXref"),
            "levelThreeTaxableMax": obj.get("levelThreeTaxableMax"),
            "levelTwoAgencyXref": obj.get("levelTwoAgencyXref"),
            "levelTwoApplySingleUnitFlag": obj.get("levelTwoApplySingleUnitFlag"),
            "levelTwoApplySingleUnitMax": obj.get("levelTwoApplySingleUnitMax"),
            "levelTwoApplySingleUnitMin": obj.get("levelTwoApplySingleUnitMin"),
            "levelTwoCaption": obj.get("levelTwoCaption"),
            "levelTwoExpensesFlag": obj.get("levelTwoExpensesFlag"),
            "levelTwoProductsFlag": obj.get("levelTwoProductsFlag"),
            "levelTwoRate": obj.get("levelTwoRate"),
            "levelTwoRateType": obj.get("levelTwoRateType"),
            "levelTwoServicesFlag": obj.get("levelTwoServicesFlag"),
            "levelTwoTaxCodeXref": obj.get("levelTwoTaxCodeXref"),
            "levelTwoTaxableMax": obj.get("levelTwoTaxableMax"),
            "productTypeIds": obj.get("productTypeIds"),
            "removeAllExpenseTypes": obj.get("removeAllExpenseTypes"),
            "removeAllProductTypes": obj.get("removeAllProductTypes"),
            "removeAllWorkRoles": obj.get("removeAllWorkRoles"),
            "workRoleIds": obj.get("workRoleIds")
        })
        return _obj


