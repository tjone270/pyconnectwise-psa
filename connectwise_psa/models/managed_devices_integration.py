# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.integrator_login_reference import IntegratorLoginReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ManagedDevicesIntegration(BaseModel):
    """
    ManagedDevicesIntegration
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    config_bill_customer_flag: Optional[StrictBool] = Field(default=None, alias="configBillCustomerFlag")
    default_billing_level: Optional[StrictStr] = Field(alias="defaultBillingLevel")
    default_department: Optional[SystemDepartmentReference] = Field(default=None, alias="defaultDepartment")
    default_location: Optional[SystemLocationReference] = Field(default=None, alias="defaultLocation")
    disable_new_cross_references_flag: Optional[StrictBool] = Field(default=None, alias="disableNewCrossReferencesFlag")
    global_login_password: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required when globalLoginFlag = true. Max length: 50;", alias="globalLoginPassword")
    global_login_username: Optional[StrictStr] = Field(default=None, description="Gets or sets             this is only required when globalLoginFlag = true. Max length: 50;", alias="globalLoginUsername")
    id: Optional[StrictInt] = None
    integrator_login: Optional[IntegratorLoginReference] = Field(default=None, alias="integratorLogin")
    login_by: Optional[StrictStr] = Field(alias="loginBy")
    management_it_setup_type: Optional[StrictStr] = Field(default=None, alias="managementItSetupType")
    match_on_serial_number_flag: Optional[StrictBool] = Field(default=None, alias="matchOnSerialNumberFlag")
    name: StrictStr = Field(description=" Max length: 30;")
    portal_url: Optional[StrictStr] = Field(default=None, description=" Max length: 200;", alias="portalUrl")
    solution: StrictStr = Field(description=" Max length: 30;")
    __properties: ClassVar[List[str]] = ["_info", "configBillCustomerFlag", "defaultBillingLevel", "defaultDepartment", "defaultLocation", "disableNewCrossReferencesFlag", "globalLoginPassword", "globalLoginUsername", "id", "integratorLogin", "loginBy", "managementItSetupType", "matchOnSerialNumberFlag", "name", "portalUrl", "solution"]

    @field_validator('default_billing_level')
    def default_billing_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Detail', 'Summary'):
            raise ValueError("must be one of enum values ('Detail', 'Summary')")
        return value

    @field_validator('login_by')
    def login_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Global', 'Member'):
            raise ValueError("must be one of enum values ('Global', 'Member')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ManagedDevicesIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_department
        if self.default_department:
            _dict['defaultDepartment'] = self.default_department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_location
        if self.default_location:
            _dict['defaultLocation'] = self.default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integrator_login
        if self.integrator_login:
            _dict['integratorLogin'] = self.integrator_login.to_dict()
        # set to None if config_bill_customer_flag (nullable) is None
        # and model_fields_set contains the field
        if self.config_bill_customer_flag is None and "config_bill_customer_flag" in self.model_fields_set:
            _dict['configBillCustomerFlag'] = None

        # set to None if default_billing_level (nullable) is None
        # and model_fields_set contains the field
        if self.default_billing_level is None and "default_billing_level" in self.model_fields_set:
            _dict['defaultBillingLevel'] = None

        # set to None if disable_new_cross_references_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disable_new_cross_references_flag is None and "disable_new_cross_references_flag" in self.model_fields_set:
            _dict['disableNewCrossReferencesFlag'] = None

        # set to None if login_by (nullable) is None
        # and model_fields_set contains the field
        if self.login_by is None and "login_by" in self.model_fields_set:
            _dict['loginBy'] = None

        # set to None if match_on_serial_number_flag (nullable) is None
        # and model_fields_set contains the field
        if self.match_on_serial_number_flag is None and "match_on_serial_number_flag" in self.model_fields_set:
            _dict['matchOnSerialNumberFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ManagedDevicesIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ManagedDevicesIntegration) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "configBillCustomerFlag": obj.get("configBillCustomerFlag"),
            "defaultBillingLevel": obj.get("defaultBillingLevel"),
            "defaultDepartment": SystemDepartmentReference.from_dict(obj.get("defaultDepartment")) if obj.get("defaultDepartment") is not None else None,
            "defaultLocation": SystemLocationReference.from_dict(obj.get("defaultLocation")) if obj.get("defaultLocation") is not None else None,
            "disableNewCrossReferencesFlag": obj.get("disableNewCrossReferencesFlag"),
            "globalLoginPassword": obj.get("globalLoginPassword"),
            "globalLoginUsername": obj.get("globalLoginUsername"),
            "id": obj.get("id"),
            "integratorLogin": IntegratorLoginReference.from_dict(obj.get("integratorLogin")) if obj.get("integratorLogin") is not None else None,
            "loginBy": obj.get("loginBy"),
            "managementItSetupType": obj.get("managementItSetupType"),
            "matchOnSerialNumberFlag": obj.get("matchOnSerialNumberFlag"),
            "name": obj.get("name"),
            "portalUrl": obj.get("portalUrl"),
            "solution": obj.get("solution")
        })
        return _obj


