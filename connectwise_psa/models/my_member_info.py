# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.board_reference import BoardReference
from connectwise_psa.models.document_reference import DocumentReference
from connectwise_psa.models.project_board_reference import ProjectBoardReference
from connectwise_psa.models.service_location_reference import ServiceLocationReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.time_zone_setup_reference import TimeZoneSetupReference
from connectwise_psa.models.warehouse_bin_reference import WarehouseBinReference
from connectwise_psa.models.warehouse_reference import WarehouseReference
from connectwise_psa.models.work_role_reference import WorkRoleReference
from connectwise_psa.models.work_type_reference import WorkTypeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MyMemberInfo(BaseModel):
    """
    MyMemberInfo
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    allow_expenses_entered_against_companies_flag: Optional[StrictBool] = Field(default=None, alias="allowExpensesEnteredAgainstCompaniesFlag")
    daily_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dailyCapacity")
    default_department: Optional[SystemDepartmentReference] = Field(default=None, alias="defaultDepartment")
    default_email: Optional[StrictStr] = Field(default=None, alias="defaultEmail")
    default_location: Optional[SystemLocationReference] = Field(default=None, alias="defaultLocation")
    enter_time_against_company_flag: Optional[StrictBool] = Field(default=None, alias="enterTimeAgainstCompanyFlag")
    excluded_project_board_ids: Optional[List[StrictInt]] = Field(default=None, alias="excludedProjectBoardIds")
    excluded_service_board_ids: Optional[List[StrictInt]] = Field(default=None, alias="excludedServiceBoardIds")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    id: Optional[StrictInt] = None
    identifier: Optional[StrictStr] = None
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    license_class: Optional[StrictStr] = Field(default=None, description="F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member", alias="licenseClass")
    middle_initial: Optional[StrictStr] = Field(default=None, alias="middleInitial")
    photo: Optional[DocumentReference] = None
    project_default_board: Optional[ProjectBoardReference] = Field(default=None, alias="projectDefaultBoard")
    project_default_department: Optional[SystemDepartmentReference] = Field(default=None, alias="projectDefaultDepartment")
    project_default_location: Optional[SystemLocationReference] = Field(default=None, alias="projectDefaultLocation")
    require_expense_entry_flag: Optional[StrictBool] = Field(default=None, alias="requireExpenseEntryFlag")
    require_start_and_end_time_on_time_entry_flag: Optional[StrictBool] = Field(default=None, alias="requireStartAndEndTimeOnTimeEntryFlag")
    require_time_sheet_entry_flag: Optional[StrictBool] = Field(default=None, alias="requireTimeSheetEntryFlag")
    restrict_default_warehouse_bin_flag: Optional[StrictBool] = Field(default=None, alias="restrictDefaultWarehouseBinFlag")
    restrict_default_warehouse_flag: Optional[StrictBool] = Field(default=None, alias="restrictDefaultWarehouseFlag")
    restrict_project_default_department_flag: Optional[StrictBool] = Field(default=None, alias="restrictProjectDefaultDepartmentFlag")
    restrict_project_default_location_flag: Optional[StrictBool] = Field(default=None, alias="restrictProjectDefaultLocationFlag")
    restrict_service_default_department_flag: Optional[StrictBool] = Field(default=None, alias="restrictServiceDefaultDepartmentFlag")
    restrict_service_default_location_flag: Optional[StrictBool] = Field(default=None, alias="restrictServiceDefaultLocationFlag")
    sales_default_location: Optional[SystemLocationReference] = Field(default=None, alias="salesDefaultLocation")
    schedule_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="scheduleCapacity")
    schedule_default_department: Optional[SystemDepartmentReference] = Field(default=None, alias="scheduleDefaultDepartment")
    schedule_default_location: Optional[SystemLocationReference] = Field(default=None, alias="scheduleDefaultLocation")
    service_default_board: Optional[BoardReference] = Field(default=None, alias="serviceDefaultBoard")
    service_default_department: Optional[SystemDepartmentReference] = Field(default=None, alias="serviceDefaultDepartment")
    service_default_location: Optional[SystemLocationReference] = Field(default=None, alias="serviceDefaultLocation")
    service_location: Optional[ServiceLocationReference] = Field(default=None, alias="serviceLocation")
    sso_client_id: Optional[StrictStr] = Field(default=None, alias="ssoClientId")
    sso_session_flag: Optional[StrictBool] = Field(default=None, alias="ssoSessionFlag")
    time_zone: Optional[TimeZoneSetupReference] = Field(default=None, alias="timeZone")
    use_browser_language_flag: Optional[StrictBool] = Field(default=None, alias="useBrowserLanguageFlag")
    warehouse: Optional[WarehouseReference] = None
    warehouse_bin: Optional[WarehouseBinReference] = Field(default=None, alias="warehouseBin")
    work_role: Optional[WorkRoleReference] = Field(default=None, alias="workRole")
    work_type: Optional[WorkTypeReference] = Field(default=None, alias="workType")
    __properties: ClassVar[List[str]] = ["_info", "allowExpensesEnteredAgainstCompaniesFlag", "dailyCapacity", "defaultDepartment", "defaultEmail", "defaultLocation", "enterTimeAgainstCompanyFlag", "excludedProjectBoardIds", "excludedServiceBoardIds", "firstName", "fullName", "id", "identifier", "inactiveFlag", "lastName", "licenseClass", "middleInitial", "photo", "projectDefaultBoard", "projectDefaultDepartment", "projectDefaultLocation", "requireExpenseEntryFlag", "requireStartAndEndTimeOnTimeEntryFlag", "requireTimeSheetEntryFlag", "restrictDefaultWarehouseBinFlag", "restrictDefaultWarehouseFlag", "restrictProjectDefaultDepartmentFlag", "restrictProjectDefaultLocationFlag", "restrictServiceDefaultDepartmentFlag", "restrictServiceDefaultLocationFlag", "salesDefaultLocation", "scheduleCapacity", "scheduleDefaultDepartment", "scheduleDefaultLocation", "serviceDefaultBoard", "serviceDefaultDepartment", "serviceDefaultLocation", "serviceLocation", "ssoClientId", "ssoSessionFlag", "timeZone", "useBrowserLanguageFlag", "warehouse", "warehouseBin", "workRole", "workType"]

    @field_validator('license_class')
    def license_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('A', 'C', 'F', 'X'):
            raise ValueError("must be one of enum values ('A', 'C', 'F', 'X')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MyMemberInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_department
        if self.default_department:
            _dict['defaultDepartment'] = self.default_department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_location
        if self.default_location:
            _dict['defaultLocation'] = self.default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of photo
        if self.photo:
            _dict['photo'] = self.photo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_default_board
        if self.project_default_board:
            _dict['projectDefaultBoard'] = self.project_default_board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_default_department
        if self.project_default_department:
            _dict['projectDefaultDepartment'] = self.project_default_department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_default_location
        if self.project_default_location:
            _dict['projectDefaultLocation'] = self.project_default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sales_default_location
        if self.sales_default_location:
            _dict['salesDefaultLocation'] = self.sales_default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_default_department
        if self.schedule_default_department:
            _dict['scheduleDefaultDepartment'] = self.schedule_default_department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_default_location
        if self.schedule_default_location:
            _dict['scheduleDefaultLocation'] = self.schedule_default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_default_board
        if self.service_default_board:
            _dict['serviceDefaultBoard'] = self.service_default_board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_default_department
        if self.service_default_department:
            _dict['serviceDefaultDepartment'] = self.service_default_department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_default_location
        if self.service_default_location:
            _dict['serviceDefaultLocation'] = self.service_default_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_location
        if self.service_location:
            _dict['serviceLocation'] = self.service_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_zone
        if self.time_zone:
            _dict['timeZone'] = self.time_zone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse
        if self.warehouse:
            _dict['warehouse'] = self.warehouse.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse_bin
        if self.warehouse_bin:
            _dict['warehouseBin'] = self.warehouse_bin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_role
        if self.work_role:
            _dict['workRole'] = self.work_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_type
        if self.work_type:
            _dict['workType'] = self.work_type.to_dict()
        # set to None if allow_expenses_entered_against_companies_flag (nullable) is None
        # and model_fields_set contains the field
        if self.allow_expenses_entered_against_companies_flag is None and "allow_expenses_entered_against_companies_flag" in self.model_fields_set:
            _dict['allowExpensesEnteredAgainstCompaniesFlag'] = None

        # set to None if daily_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.daily_capacity is None and "daily_capacity" in self.model_fields_set:
            _dict['dailyCapacity'] = None

        # set to None if enter_time_against_company_flag (nullable) is None
        # and model_fields_set contains the field
        if self.enter_time_against_company_flag is None and "enter_time_against_company_flag" in self.model_fields_set:
            _dict['enterTimeAgainstCompanyFlag'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if license_class (nullable) is None
        # and model_fields_set contains the field
        if self.license_class is None and "license_class" in self.model_fields_set:
            _dict['licenseClass'] = None

        # set to None if require_expense_entry_flag (nullable) is None
        # and model_fields_set contains the field
        if self.require_expense_entry_flag is None and "require_expense_entry_flag" in self.model_fields_set:
            _dict['requireExpenseEntryFlag'] = None

        # set to None if require_start_and_end_time_on_time_entry_flag (nullable) is None
        # and model_fields_set contains the field
        if self.require_start_and_end_time_on_time_entry_flag is None and "require_start_and_end_time_on_time_entry_flag" in self.model_fields_set:
            _dict['requireStartAndEndTimeOnTimeEntryFlag'] = None

        # set to None if require_time_sheet_entry_flag (nullable) is None
        # and model_fields_set contains the field
        if self.require_time_sheet_entry_flag is None and "require_time_sheet_entry_flag" in self.model_fields_set:
            _dict['requireTimeSheetEntryFlag'] = None

        # set to None if restrict_default_warehouse_bin_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_default_warehouse_bin_flag is None and "restrict_default_warehouse_bin_flag" in self.model_fields_set:
            _dict['restrictDefaultWarehouseBinFlag'] = None

        # set to None if restrict_default_warehouse_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_default_warehouse_flag is None and "restrict_default_warehouse_flag" in self.model_fields_set:
            _dict['restrictDefaultWarehouseFlag'] = None

        # set to None if restrict_project_default_department_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_project_default_department_flag is None and "restrict_project_default_department_flag" in self.model_fields_set:
            _dict['restrictProjectDefaultDepartmentFlag'] = None

        # set to None if restrict_project_default_location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_project_default_location_flag is None and "restrict_project_default_location_flag" in self.model_fields_set:
            _dict['restrictProjectDefaultLocationFlag'] = None

        # set to None if restrict_service_default_department_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_service_default_department_flag is None and "restrict_service_default_department_flag" in self.model_fields_set:
            _dict['restrictServiceDefaultDepartmentFlag'] = None

        # set to None if restrict_service_default_location_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_service_default_location_flag is None and "restrict_service_default_location_flag" in self.model_fields_set:
            _dict['restrictServiceDefaultLocationFlag'] = None

        # set to None if schedule_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_capacity is None and "schedule_capacity" in self.model_fields_set:
            _dict['scheduleCapacity'] = None

        # set to None if sso_session_flag (nullable) is None
        # and model_fields_set contains the field
        if self.sso_session_flag is None and "sso_session_flag" in self.model_fields_set:
            _dict['ssoSessionFlag'] = None

        # set to None if use_browser_language_flag (nullable) is None
        # and model_fields_set contains the field
        if self.use_browser_language_flag is None and "use_browser_language_flag" in self.model_fields_set:
            _dict['useBrowserLanguageFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MyMemberInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in MyMemberInfo) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "allowExpensesEnteredAgainstCompaniesFlag": obj.get("allowExpensesEnteredAgainstCompaniesFlag"),
            "dailyCapacity": obj.get("dailyCapacity"),
            "defaultDepartment": SystemDepartmentReference.from_dict(obj.get("defaultDepartment")) if obj.get("defaultDepartment") is not None else None,
            "defaultEmail": obj.get("defaultEmail"),
            "defaultLocation": SystemLocationReference.from_dict(obj.get("defaultLocation")) if obj.get("defaultLocation") is not None else None,
            "enterTimeAgainstCompanyFlag": obj.get("enterTimeAgainstCompanyFlag"),
            "excludedProjectBoardIds": obj.get("excludedProjectBoardIds"),
            "excludedServiceBoardIds": obj.get("excludedServiceBoardIds"),
            "firstName": obj.get("firstName"),
            "fullName": obj.get("fullName"),
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "lastName": obj.get("lastName"),
            "licenseClass": obj.get("licenseClass"),
            "middleInitial": obj.get("middleInitial"),
            "photo": DocumentReference.from_dict(obj.get("photo")) if obj.get("photo") is not None else None,
            "projectDefaultBoard": ProjectBoardReference.from_dict(obj.get("projectDefaultBoard")) if obj.get("projectDefaultBoard") is not None else None,
            "projectDefaultDepartment": SystemDepartmentReference.from_dict(obj.get("projectDefaultDepartment")) if obj.get("projectDefaultDepartment") is not None else None,
            "projectDefaultLocation": SystemLocationReference.from_dict(obj.get("projectDefaultLocation")) if obj.get("projectDefaultLocation") is not None else None,
            "requireExpenseEntryFlag": obj.get("requireExpenseEntryFlag"),
            "requireStartAndEndTimeOnTimeEntryFlag": obj.get("requireStartAndEndTimeOnTimeEntryFlag"),
            "requireTimeSheetEntryFlag": obj.get("requireTimeSheetEntryFlag"),
            "restrictDefaultWarehouseBinFlag": obj.get("restrictDefaultWarehouseBinFlag"),
            "restrictDefaultWarehouseFlag": obj.get("restrictDefaultWarehouseFlag"),
            "restrictProjectDefaultDepartmentFlag": obj.get("restrictProjectDefaultDepartmentFlag"),
            "restrictProjectDefaultLocationFlag": obj.get("restrictProjectDefaultLocationFlag"),
            "restrictServiceDefaultDepartmentFlag": obj.get("restrictServiceDefaultDepartmentFlag"),
            "restrictServiceDefaultLocationFlag": obj.get("restrictServiceDefaultLocationFlag"),
            "salesDefaultLocation": SystemLocationReference.from_dict(obj.get("salesDefaultLocation")) if obj.get("salesDefaultLocation") is not None else None,
            "scheduleCapacity": obj.get("scheduleCapacity"),
            "scheduleDefaultDepartment": SystemDepartmentReference.from_dict(obj.get("scheduleDefaultDepartment")) if obj.get("scheduleDefaultDepartment") is not None else None,
            "scheduleDefaultLocation": SystemLocationReference.from_dict(obj.get("scheduleDefaultLocation")) if obj.get("scheduleDefaultLocation") is not None else None,
            "serviceDefaultBoard": BoardReference.from_dict(obj.get("serviceDefaultBoard")) if obj.get("serviceDefaultBoard") is not None else None,
            "serviceDefaultDepartment": SystemDepartmentReference.from_dict(obj.get("serviceDefaultDepartment")) if obj.get("serviceDefaultDepartment") is not None else None,
            "serviceDefaultLocation": SystemLocationReference.from_dict(obj.get("serviceDefaultLocation")) if obj.get("serviceDefaultLocation") is not None else None,
            "serviceLocation": ServiceLocationReference.from_dict(obj.get("serviceLocation")) if obj.get("serviceLocation") is not None else None,
            "ssoClientId": obj.get("ssoClientId"),
            "ssoSessionFlag": obj.get("ssoSessionFlag"),
            "timeZone": TimeZoneSetupReference.from_dict(obj.get("timeZone")) if obj.get("timeZone") is not None else None,
            "useBrowserLanguageFlag": obj.get("useBrowserLanguageFlag"),
            "warehouse": WarehouseReference.from_dict(obj.get("warehouse")) if obj.get("warehouse") is not None else None,
            "warehouseBin": WarehouseBinReference.from_dict(obj.get("warehouseBin")) if obj.get("warehouseBin") is not None else None,
            "workRole": WorkRoleReference.from_dict(obj.get("workRole")) if obj.get("workRole") is not None else None,
            "workType": WorkTypeReference.from_dict(obj.get("workType")) if obj.get("workType") is not None else None
        })
        return _obj


