# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.billing_cycle_reference import BillingCycleReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.entity_type_reference import EntityTypeReference
from connectwise_psa.models.manufacturer_reference import ManufacturerReference
from connectwise_psa.models.product_category_reference import ProductCategoryReference
from connectwise_psa.models.product_sub_category_reference import ProductSubCategoryReference
from connectwise_psa.models.product_type_reference import ProductTypeReference
from connectwise_psa.models.sla_reference import SLAReference
from connectwise_psa.models.unit_of_measure_reference import UnitOfMeasureReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CatalogItem(BaseModel):
    """
    CatalogItem
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    billable_option: Optional[StrictStr] = Field(default=None, alias="billableOption")
    calculated_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="calculatedCost")
    calculated_cost_flag: Optional[StrictBool] = Field(default=None, alias="calculatedCostFlag")
    calculated_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="calculatedPrice")
    calculated_price_flag: Optional[StrictBool] = Field(default=None, alias="calculatedPriceFlag")
    category: Optional[ProductCategoryReference] = None
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    customer_description: StrictStr = Field(description=" Max length: 6000;", alias="customerDescription")
    date_entered: Optional[StrictStr] = Field(default=None, alias="dateEntered")
    description: StrictStr = Field(description=" Max length: 60;")
    drop_ship_flag: Optional[StrictBool] = Field(default=None, alias="dropShipFlag")
    entity_type: Optional[EntityTypeReference] = Field(default=None, alias="entityType")
    id: Optional[StrictInt] = None
    identifier: StrictStr = Field(description=" Max length: 60;")
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    integration_x_ref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="integrationXRef")
    manufacturer: Optional[ManufacturerReference] = None
    manufacturer_part_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="manufacturerPartNumber")
    min_stock_level: Optional[StrictInt] = Field(default=None, alias="minStockLevel")
    notes: Optional[StrictStr] = None
    phase_product_flag: Optional[StrictBool] = Field(default=None, alias="phaseProductFlag")
    price: Optional[Union[StrictFloat, StrictInt]] = None
    price_attribute: Optional[StrictStr] = Field(default=None, alias="priceAttribute")
    product_class: Optional[StrictStr] = Field(default=None, description="Defaults to Non-Inventory.", alias="productClass")
    recurring_bill_cycle: Optional[BillingCycleReference] = Field(default=None, alias="recurringBillCycle")
    recurring_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="recurringCost")
    recurring_cycle_type: Optional[StrictStr] = Field(default=None, alias="recurringCycleType")
    recurring_flag: Optional[StrictBool] = Field(default=None, alias="recurringFlag")
    recurring_one_time_flag: Optional[StrictBool] = Field(default=None, alias="recurringOneTimeFlag")
    recurring_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="recurringRevenue")
    serialized_cost_flag: Optional[StrictBool] = Field(default=None, alias="serializedCostFlag")
    serialized_flag: Optional[StrictBool] = Field(default=None, alias="serializedFlag")
    sla: Optional[SLAReference] = None
    special_order_flag: Optional[StrictBool] = Field(default=None, alias="specialOrderFlag")
    subcategory: Optional[ProductSubCategoryReference] = None
    taxable_flag: Optional[StrictBool] = Field(default=None, alias="taxableFlag")
    type: Optional[ProductTypeReference] = None
    unit_of_measure: Optional[UnitOfMeasureReference] = Field(default=None, alias="unitOfMeasure")
    vendor: Optional[CompanyReference] = None
    vendor_sku: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="vendorSku")
    __properties: ClassVar[List[str]] = ["_info", "billableOption", "calculatedCost", "calculatedCostFlag", "calculatedPrice", "calculatedPriceFlag", "category", "cost", "customFields", "customerDescription", "dateEntered", "description", "dropShipFlag", "entityType", "id", "identifier", "inactiveFlag", "integrationXRef", "manufacturer", "manufacturerPartNumber", "minStockLevel", "notes", "phaseProductFlag", "price", "priceAttribute", "productClass", "recurringBillCycle", "recurringCost", "recurringCycleType", "recurringFlag", "recurringOneTimeFlag", "recurringRevenue", "serializedCostFlag", "serializedFlag", "sla", "specialOrderFlag", "subcategory", "taxableFlag", "type", "unitOfMeasure", "vendor", "vendorSku"]

    @field_validator('billable_option')
    def billable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('price_attribute')
    def price_attribute_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FixedFee', 'NotToExceed', 'OverrideRate', 'TimeAndMaterials'):
            raise ValueError("must be one of enum values ('FixedFee', 'NotToExceed', 'OverrideRate', 'TimeAndMaterials')")
        return value

    @field_validator('product_class')
    def product_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service'):
            raise ValueError("must be one of enum values ('Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service')")
        return value

    @field_validator('recurring_cycle_type')
    def recurring_cycle_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ContractYear', 'CalendarYear'):
            raise ValueError("must be one of enum values ('ContractYear', 'CalendarYear')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CatalogItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of entity_type
        if self.entity_type:
            _dict['entityType'] = self.entity_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manufacturer
        if self.manufacturer:
            _dict['manufacturer'] = self.manufacturer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring_bill_cycle
        if self.recurring_bill_cycle:
            _dict['recurringBillCycle'] = self.recurring_bill_cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sla
        if self.sla:
            _dict['sla'] = self.sla.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subcategory
        if self.subcategory:
            _dict['subcategory'] = self.subcategory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit_of_measure
        if self.unit_of_measure:
            _dict['unitOfMeasure'] = self.unit_of_measure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # set to None if billable_option (nullable) is None
        # and model_fields_set contains the field
        if self.billable_option is None and "billable_option" in self.model_fields_set:
            _dict['billableOption'] = None

        # set to None if calculated_cost (nullable) is None
        # and model_fields_set contains the field
        if self.calculated_cost is None and "calculated_cost" in self.model_fields_set:
            _dict['calculatedCost'] = None

        # set to None if calculated_cost_flag (nullable) is None
        # and model_fields_set contains the field
        if self.calculated_cost_flag is None and "calculated_cost_flag" in self.model_fields_set:
            _dict['calculatedCostFlag'] = None

        # set to None if calculated_price (nullable) is None
        # and model_fields_set contains the field
        if self.calculated_price is None and "calculated_price" in self.model_fields_set:
            _dict['calculatedPrice'] = None

        # set to None if calculated_price_flag (nullable) is None
        # and model_fields_set contains the field
        if self.calculated_price_flag is None and "calculated_price_flag" in self.model_fields_set:
            _dict['calculatedPriceFlag'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if drop_ship_flag (nullable) is None
        # and model_fields_set contains the field
        if self.drop_ship_flag is None and "drop_ship_flag" in self.model_fields_set:
            _dict['dropShipFlag'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if min_stock_level (nullable) is None
        # and model_fields_set contains the field
        if self.min_stock_level is None and "min_stock_level" in self.model_fields_set:
            _dict['minStockLevel'] = None

        # set to None if phase_product_flag (nullable) is None
        # and model_fields_set contains the field
        if self.phase_product_flag is None and "phase_product_flag" in self.model_fields_set:
            _dict['phaseProductFlag'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if price_attribute (nullable) is None
        # and model_fields_set contains the field
        if self.price_attribute is None and "price_attribute" in self.model_fields_set:
            _dict['priceAttribute'] = None

        # set to None if product_class (nullable) is None
        # and model_fields_set contains the field
        if self.product_class is None and "product_class" in self.model_fields_set:
            _dict['productClass'] = None

        # set to None if recurring_cost (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_cost is None and "recurring_cost" in self.model_fields_set:
            _dict['recurringCost'] = None

        # set to None if recurring_cycle_type (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_cycle_type is None and "recurring_cycle_type" in self.model_fields_set:
            _dict['recurringCycleType'] = None

        # set to None if recurring_flag (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_flag is None and "recurring_flag" in self.model_fields_set:
            _dict['recurringFlag'] = None

        # set to None if recurring_one_time_flag (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_one_time_flag is None and "recurring_one_time_flag" in self.model_fields_set:
            _dict['recurringOneTimeFlag'] = None

        # set to None if recurring_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_revenue is None and "recurring_revenue" in self.model_fields_set:
            _dict['recurringRevenue'] = None

        # set to None if serialized_cost_flag (nullable) is None
        # and model_fields_set contains the field
        if self.serialized_cost_flag is None and "serialized_cost_flag" in self.model_fields_set:
            _dict['serializedCostFlag'] = None

        # set to None if serialized_flag (nullable) is None
        # and model_fields_set contains the field
        if self.serialized_flag is None and "serialized_flag" in self.model_fields_set:
            _dict['serializedFlag'] = None

        # set to None if special_order_flag (nullable) is None
        # and model_fields_set contains the field
        if self.special_order_flag is None and "special_order_flag" in self.model_fields_set:
            _dict['specialOrderFlag'] = None

        # set to None if taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_flag is None and "taxable_flag" in self.model_fields_set:
            _dict['taxableFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CatalogItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CatalogItem) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "billableOption": obj.get("billableOption"),
            "calculatedCost": obj.get("calculatedCost"),
            "calculatedCostFlag": obj.get("calculatedCostFlag"),
            "calculatedPrice": obj.get("calculatedPrice"),
            "calculatedPriceFlag": obj.get("calculatedPriceFlag"),
            "category": ProductCategoryReference.from_dict(obj.get("category")) if obj.get("category") is not None else None,
            "cost": obj.get("cost"),
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "customerDescription": obj.get("customerDescription"),
            "dateEntered": obj.get("dateEntered"),
            "description": obj.get("description"),
            "dropShipFlag": obj.get("dropShipFlag"),
            "entityType": EntityTypeReference.from_dict(obj.get("entityType")) if obj.get("entityType") is not None else None,
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "integrationXRef": obj.get("integrationXRef"),
            "manufacturer": ManufacturerReference.from_dict(obj.get("manufacturer")) if obj.get("manufacturer") is not None else None,
            "manufacturerPartNumber": obj.get("manufacturerPartNumber"),
            "minStockLevel": obj.get("minStockLevel"),
            "notes": obj.get("notes"),
            "phaseProductFlag": obj.get("phaseProductFlag"),
            "price": obj.get("price"),
            "priceAttribute": obj.get("priceAttribute"),
            "productClass": obj.get("productClass"),
            "recurringBillCycle": BillingCycleReference.from_dict(obj.get("recurringBillCycle")) if obj.get("recurringBillCycle") is not None else None,
            "recurringCost": obj.get("recurringCost"),
            "recurringCycleType": obj.get("recurringCycleType"),
            "recurringFlag": obj.get("recurringFlag"),
            "recurringOneTimeFlag": obj.get("recurringOneTimeFlag"),
            "recurringRevenue": obj.get("recurringRevenue"),
            "serializedCostFlag": obj.get("serializedCostFlag"),
            "serializedFlag": obj.get("serializedFlag"),
            "sla": SLAReference.from_dict(obj.get("sla")) if obj.get("sla") is not None else None,
            "specialOrderFlag": obj.get("specialOrderFlag"),
            "subcategory": ProductSubCategoryReference.from_dict(obj.get("subcategory")) if obj.get("subcategory") is not None else None,
            "taxableFlag": obj.get("taxableFlag"),
            "type": ProductTypeReference.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "unitOfMeasure": UnitOfMeasureReference.from_dict(obj.get("unitOfMeasure")) if obj.get("unitOfMeasure") is not None else None,
            "vendor": CompanyReference.from_dict(obj.get("vendor")) if obj.get("vendor") is not None else None,
            "vendorSku": obj.get("vendorSku")
        })
        return _obj


