# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Warehouse(BaseModel):
    """
    Warehouse
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    company: Optional[CompanyReference] = None
    contact: Optional[ContactReference] = None
    currency: Optional[CurrencyReference] = None
    department: Optional[SystemDepartmentReference] = None
    id: Optional[StrictInt] = None
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    location: Optional[SystemLocationReference] = None
    location_default_flag: Optional[StrictBool] = Field(default=None, alias="locationDefaultFlag")
    location_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 10;", alias="locationXref")
    locked_flag: Optional[StrictBool] = Field(default=None, alias="lockedFlag")
    manager: Optional[MemberReference] = None
    name: StrictStr = Field(description=" Max length: 50;")
    overall_default_flag: Optional[StrictBool] = Field(default=None, alias="overallDefaultFlag")
    site: Optional[SiteReference] = None
    __properties: ClassVar[List[str]] = ["_info", "company", "contact", "currency", "department", "id", "inactiveFlag", "location", "locationDefaultFlag", "locationXref", "lockedFlag", "manager", "name", "overallDefaultFlag", "site"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Warehouse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manager
        if self.manager:
            _dict['manager'] = self.manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if location_default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.location_default_flag is None and "location_default_flag" in self.model_fields_set:
            _dict['locationDefaultFlag'] = None

        # set to None if locked_flag (nullable) is None
        # and model_fields_set contains the field
        if self.locked_flag is None and "locked_flag" in self.model_fields_set:
            _dict['lockedFlag'] = None

        # set to None if overall_default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.overall_default_flag is None and "overall_default_flag" in self.model_fields_set:
            _dict['overallDefaultFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Warehouse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Warehouse) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "contact": ContactReference.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "id": obj.get("id"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "locationDefaultFlag": obj.get("locationDefaultFlag"),
            "locationXref": obj.get("locationXref"),
            "lockedFlag": obj.get("lockedFlag"),
            "manager": MemberReference.from_dict(obj.get("manager")) if obj.get("manager") is not None else None,
            "name": obj.get("name"),
            "overallDefaultFlag": obj.get("overallDefaultFlag"),
            "site": SiteReference.from_dict(obj.get("site")) if obj.get("site") is not None else None
        })
        return _obj


