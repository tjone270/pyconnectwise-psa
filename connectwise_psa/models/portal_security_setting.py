# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PortalSecuritySetting(BaseModel):
    """
    PortalSecuritySetting
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    function_description: Optional[StrictStr] = Field(default=None, alias="functionDescription")
    function_identifier: Optional[StrictStr] = Field(default=None, alias="functionIdentifier")
    id: Optional[StrictInt] = None
    level_five: Optional[StrictBool] = Field(default=None, alias="levelFive")
    level_four: Optional[StrictBool] = Field(default=None, alias="levelFour")
    level_one: Optional[StrictBool] = Field(default=None, alias="levelOne")
    level_six: Optional[StrictBool] = Field(default=None, alias="levelSix")
    level_three: Optional[StrictBool] = Field(default=None, alias="levelThree")
    level_two: Optional[StrictBool] = Field(default=None, alias="levelTwo")
    __properties: ClassVar[List[str]] = ["_info", "functionDescription", "functionIdentifier", "id", "levelFive", "levelFour", "levelOne", "levelSix", "levelThree", "levelTwo"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PortalSecuritySetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if level_five (nullable) is None
        # and model_fields_set contains the field
        if self.level_five is None and "level_five" in self.model_fields_set:
            _dict['levelFive'] = None

        # set to None if level_four (nullable) is None
        # and model_fields_set contains the field
        if self.level_four is None and "level_four" in self.model_fields_set:
            _dict['levelFour'] = None

        # set to None if level_one (nullable) is None
        # and model_fields_set contains the field
        if self.level_one is None and "level_one" in self.model_fields_set:
            _dict['levelOne'] = None

        # set to None if level_six (nullable) is None
        # and model_fields_set contains the field
        if self.level_six is None and "level_six" in self.model_fields_set:
            _dict['levelSix'] = None

        # set to None if level_three (nullable) is None
        # and model_fields_set contains the field
        if self.level_three is None and "level_three" in self.model_fields_set:
            _dict['levelThree'] = None

        # set to None if level_two (nullable) is None
        # and model_fields_set contains the field
        if self.level_two is None and "level_two" in self.model_fields_set:
            _dict['levelTwo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PortalSecuritySetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PortalSecuritySetting) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "functionDescription": obj.get("functionDescription"),
            "functionIdentifier": obj.get("functionIdentifier"),
            "id": obj.get("id"),
            "levelFive": obj.get("levelFive"),
            "levelFour": obj.get("levelFour"),
            "levelOne": obj.get("levelOne"),
            "levelSix": obj.get("levelSix"),
            "levelThree": obj.get("levelThree"),
            "levelTwo": obj.get("levelTwo")
        })
        return _obj


