# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ServiceSignoff(BaseModel):
    """
    ServiceSignoff
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    billing_methods_text: Optional[StrictStr] = Field(default=None, description=" Max length: 2000;", alias="billingMethodsText")
    billing_methods_text_flag: Optional[StrictBool] = Field(default=None, description="On add/post, if billingMethodsText.Length > 0, this is set to true.", alias="billingMethodsTextFlag")
    billing_terms_flag: Optional[StrictBool] = Field(default=None, alias="billingTermsFlag")
    company_info_flag: Optional[StrictBool] = Field(default=None, alias="companyInfoFlag")
    configurations_flag: Optional[StrictBool] = Field(default=None, alias="configurationsFlag")
    credit_card_fields_flag: Optional[StrictBool] = Field(default=None, alias="creditCardFieldsFlag")
    customer_signoff_fields_flag: Optional[StrictBool] = Field(default=None, alias="customerSignoffFieldsFlag")
    customer_signoff_text: Optional[StrictStr] = Field(default=None, description=" Max length: 4000;", alias="customerSignoffText")
    customer_signoff_text_flag: Optional[StrictBool] = Field(default=None, description="On add/post, if customerSignoffText.Length > 0, this is set to true.", alias="customerSignoffTextFlag")
    default_ff_flag: Optional[StrictBool] = Field(default=None, alias="defaultFFFlag")
    default_flag: Optional[StrictBool] = Field(default=None, alias="defaultFlag")
    discussion_flag: Optional[StrictBool] = Field(default=None, alias="discussionFlag")
    expense_agreement_flag: Optional[StrictBool] = Field(default=None, alias="expenseAgreementFlag")
    expense_amount_flag: Optional[StrictBool] = Field(default=None, alias="expenseAmountFlag")
    expense_bill_flag: Optional[StrictBool] = Field(default=None, alias="expenseBillFlag")
    expense_date_flag: Optional[StrictBool] = Field(default=None, alias="expenseDateFlag")
    expense_flag: Optional[StrictBool] = Field(default=None, description="On add/post, if any expense related flag is set to true, this is also set to true.", alias="expenseFlag")
    expense_manual_entry: Optional[StrictInt] = Field(default=None, alias="expenseManualEntry")
    expense_manual_flag: Optional[StrictBool] = Field(default=None, alias="expenseManualFlag")
    expense_member_flag: Optional[StrictBool] = Field(default=None, alias="expenseMemberFlag")
    expense_notes_flag: Optional[StrictBool] = Field(default=None, alias="expenseNotesFlag")
    expense_tax_flag: Optional[StrictBool] = Field(default=None, alias="expenseTaxFlag")
    expense_type_flag: Optional[StrictBool] = Field(default=None, alias="expenseTypeFlag")
    id: Optional[StrictInt] = None
    internal_notes_flag: Optional[StrictBool] = Field(default=None, alias="internalNotesFlag")
    name: StrictStr = Field(description=" Max length: 50;")
    product_agreement_flag: Optional[StrictBool] = Field(default=None, alias="productAgreementFlag")
    product_bill_flag: Optional[StrictBool] = Field(default=None, alias="productBillFlag")
    product_description_flag: Optional[StrictBool] = Field(default=None, alias="productDescriptionFlag")
    product_extended_amount_flag: Optional[StrictBool] = Field(default=None, alias="productExtendedAmountFlag")
    product_flag: Optional[StrictBool] = Field(default=None, description="On add/post, if any product related flag is set to true, this is also set to true.", alias="productFlag")
    product_manual_entry: Optional[StrictInt] = Field(default=None, alias="productManualEntry")
    product_manual_flag: Optional[StrictBool] = Field(default=None, alias="productManualFlag")
    product_price_flag: Optional[StrictBool] = Field(default=None, alias="productPriceFlag")
    product_quantity_flag: Optional[StrictBool] = Field(default=None, alias="productQuantityFlag")
    product_tax_flag: Optional[StrictBool] = Field(default=None, alias="productTaxFlag")
    resolution_flag: Optional[StrictBool] = Field(default=None, alias="resolutionFlag")
    summary_flag: Optional[StrictBool] = Field(default=None, alias="summaryFlag")
    task: Optional[StrictStr] = Field(default=None, description="On add/post, if this is set but no value is set for taskFlag, taskFlag is set to true.")
    task_flag: Optional[StrictBool] = Field(default=None, description="On add/post, if this is set to true but no value is set for task, task is defaulted to ServiceTasks.All.", alias="taskFlag")
    technician_signoff_flag: Optional[StrictBool] = Field(default=None, alias="technicianSignoffFlag")
    time_agreement_flag: Optional[StrictBool] = Field(default=None, alias="timeAgreementFlag")
    time_bill_flag: Optional[StrictBool] = Field(default=None, alias="timeBillFlag")
    time_date_flag: Optional[StrictBool] = Field(default=None, alias="timeDateFlag")
    time_extended_amount_flag: Optional[StrictBool] = Field(default=None, alias="timeExtendedAmountFlag")
    time_flag: Optional[StrictBool] = Field(default=None, description="On add/post, if any time related flag is set to true, this is also set to true.", alias="timeFlag")
    time_hours_flag: Optional[StrictBool] = Field(default=None, alias="timeHoursFlag")
    time_manual_entry: Optional[StrictInt] = Field(default=None, alias="timeManualEntry")
    time_manual_flag: Optional[StrictBool] = Field(default=None, alias="timeManualFlag")
    time_member_flag: Optional[StrictBool] = Field(default=None, alias="timeMemberFlag")
    time_notes_flag: Optional[StrictBool] = Field(default=None, alias="timeNotesFlag")
    time_rate_flag: Optional[StrictBool] = Field(default=None, alias="timeRateFlag")
    time_start_end_flag: Optional[StrictBool] = Field(default=None, alias="timeStartEndFlag")
    time_tax_flag: Optional[StrictBool] = Field(default=None, alias="timeTaxFlag")
    time_work_type_flag: Optional[StrictBool] = Field(default=None, alias="timeWorkTypeFlag")
    visible_logo_flag: Optional[StrictBool] = Field(default=None, alias="visibleLogoFlag")
    __properties: ClassVar[List[str]] = ["_info", "billingMethodsText", "billingMethodsTextFlag", "billingTermsFlag", "companyInfoFlag", "configurationsFlag", "creditCardFieldsFlag", "customerSignoffFieldsFlag", "customerSignoffText", "customerSignoffTextFlag", "defaultFFFlag", "defaultFlag", "discussionFlag", "expenseAgreementFlag", "expenseAmountFlag", "expenseBillFlag", "expenseDateFlag", "expenseFlag", "expenseManualEntry", "expenseManualFlag", "expenseMemberFlag", "expenseNotesFlag", "expenseTaxFlag", "expenseTypeFlag", "id", "internalNotesFlag", "name", "productAgreementFlag", "productBillFlag", "productDescriptionFlag", "productExtendedAmountFlag", "productFlag", "productManualEntry", "productManualFlag", "productPriceFlag", "productQuantityFlag", "productTaxFlag", "resolutionFlag", "summaryFlag", "task", "taskFlag", "technicianSignoffFlag", "timeAgreementFlag", "timeBillFlag", "timeDateFlag", "timeExtendedAmountFlag", "timeFlag", "timeHoursFlag", "timeManualEntry", "timeManualFlag", "timeMemberFlag", "timeNotesFlag", "timeRateFlag", "timeStartEndFlag", "timeTaxFlag", "timeWorkTypeFlag", "visibleLogoFlag"]

    @field_validator('task')
    def task_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('All', 'Closed', 'Open'):
            raise ValueError("must be one of enum values ('All', 'Closed', 'Open')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ServiceSignoff from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if billing_methods_text_flag (nullable) is None
        # and model_fields_set contains the field
        if self.billing_methods_text_flag is None and "billing_methods_text_flag" in self.model_fields_set:
            _dict['billingMethodsTextFlag'] = None

        # set to None if billing_terms_flag (nullable) is None
        # and model_fields_set contains the field
        if self.billing_terms_flag is None and "billing_terms_flag" in self.model_fields_set:
            _dict['billingTermsFlag'] = None

        # set to None if company_info_flag (nullable) is None
        # and model_fields_set contains the field
        if self.company_info_flag is None and "company_info_flag" in self.model_fields_set:
            _dict['companyInfoFlag'] = None

        # set to None if configurations_flag (nullable) is None
        # and model_fields_set contains the field
        if self.configurations_flag is None and "configurations_flag" in self.model_fields_set:
            _dict['configurationsFlag'] = None

        # set to None if credit_card_fields_flag (nullable) is None
        # and model_fields_set contains the field
        if self.credit_card_fields_flag is None and "credit_card_fields_flag" in self.model_fields_set:
            _dict['creditCardFieldsFlag'] = None

        # set to None if customer_signoff_fields_flag (nullable) is None
        # and model_fields_set contains the field
        if self.customer_signoff_fields_flag is None and "customer_signoff_fields_flag" in self.model_fields_set:
            _dict['customerSignoffFieldsFlag'] = None

        # set to None if customer_signoff_text_flag (nullable) is None
        # and model_fields_set contains the field
        if self.customer_signoff_text_flag is None and "customer_signoff_text_flag" in self.model_fields_set:
            _dict['customerSignoffTextFlag'] = None

        # set to None if default_ff_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_ff_flag is None and "default_ff_flag" in self.model_fields_set:
            _dict['defaultFFFlag'] = None

        # set to None if default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_flag is None and "default_flag" in self.model_fields_set:
            _dict['defaultFlag'] = None

        # set to None if discussion_flag (nullable) is None
        # and model_fields_set contains the field
        if self.discussion_flag is None and "discussion_flag" in self.model_fields_set:
            _dict['discussionFlag'] = None

        # set to None if expense_agreement_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_agreement_flag is None and "expense_agreement_flag" in self.model_fields_set:
            _dict['expenseAgreementFlag'] = None

        # set to None if expense_amount_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_amount_flag is None and "expense_amount_flag" in self.model_fields_set:
            _dict['expenseAmountFlag'] = None

        # set to None if expense_bill_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_bill_flag is None and "expense_bill_flag" in self.model_fields_set:
            _dict['expenseBillFlag'] = None

        # set to None if expense_date_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_date_flag is None and "expense_date_flag" in self.model_fields_set:
            _dict['expenseDateFlag'] = None

        # set to None if expense_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_flag is None and "expense_flag" in self.model_fields_set:
            _dict['expenseFlag'] = None

        # set to None if expense_manual_entry (nullable) is None
        # and model_fields_set contains the field
        if self.expense_manual_entry is None and "expense_manual_entry" in self.model_fields_set:
            _dict['expenseManualEntry'] = None

        # set to None if expense_manual_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_manual_flag is None and "expense_manual_flag" in self.model_fields_set:
            _dict['expenseManualFlag'] = None

        # set to None if expense_member_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_member_flag is None and "expense_member_flag" in self.model_fields_set:
            _dict['expenseMemberFlag'] = None

        # set to None if expense_notes_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_notes_flag is None and "expense_notes_flag" in self.model_fields_set:
            _dict['expenseNotesFlag'] = None

        # set to None if expense_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_tax_flag is None and "expense_tax_flag" in self.model_fields_set:
            _dict['expenseTaxFlag'] = None

        # set to None if expense_type_flag (nullable) is None
        # and model_fields_set contains the field
        if self.expense_type_flag is None and "expense_type_flag" in self.model_fields_set:
            _dict['expenseTypeFlag'] = None

        # set to None if internal_notes_flag (nullable) is None
        # and model_fields_set contains the field
        if self.internal_notes_flag is None and "internal_notes_flag" in self.model_fields_set:
            _dict['internalNotesFlag'] = None

        # set to None if product_agreement_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_agreement_flag is None and "product_agreement_flag" in self.model_fields_set:
            _dict['productAgreementFlag'] = None

        # set to None if product_bill_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_bill_flag is None and "product_bill_flag" in self.model_fields_set:
            _dict['productBillFlag'] = None

        # set to None if product_description_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_description_flag is None and "product_description_flag" in self.model_fields_set:
            _dict['productDescriptionFlag'] = None

        # set to None if product_extended_amount_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_extended_amount_flag is None and "product_extended_amount_flag" in self.model_fields_set:
            _dict['productExtendedAmountFlag'] = None

        # set to None if product_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_flag is None and "product_flag" in self.model_fields_set:
            _dict['productFlag'] = None

        # set to None if product_manual_entry (nullable) is None
        # and model_fields_set contains the field
        if self.product_manual_entry is None and "product_manual_entry" in self.model_fields_set:
            _dict['productManualEntry'] = None

        # set to None if product_manual_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_manual_flag is None and "product_manual_flag" in self.model_fields_set:
            _dict['productManualFlag'] = None

        # set to None if product_price_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_price_flag is None and "product_price_flag" in self.model_fields_set:
            _dict['productPriceFlag'] = None

        # set to None if product_quantity_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_quantity_flag is None and "product_quantity_flag" in self.model_fields_set:
            _dict['productQuantityFlag'] = None

        # set to None if product_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.product_tax_flag is None and "product_tax_flag" in self.model_fields_set:
            _dict['productTaxFlag'] = None

        # set to None if resolution_flag (nullable) is None
        # and model_fields_set contains the field
        if self.resolution_flag is None and "resolution_flag" in self.model_fields_set:
            _dict['resolutionFlag'] = None

        # set to None if summary_flag (nullable) is None
        # and model_fields_set contains the field
        if self.summary_flag is None and "summary_flag" in self.model_fields_set:
            _dict['summaryFlag'] = None

        # set to None if task (nullable) is None
        # and model_fields_set contains the field
        if self.task is None and "task" in self.model_fields_set:
            _dict['task'] = None

        # set to None if task_flag (nullable) is None
        # and model_fields_set contains the field
        if self.task_flag is None and "task_flag" in self.model_fields_set:
            _dict['taskFlag'] = None

        # set to None if technician_signoff_flag (nullable) is None
        # and model_fields_set contains the field
        if self.technician_signoff_flag is None and "technician_signoff_flag" in self.model_fields_set:
            _dict['technicianSignoffFlag'] = None

        # set to None if time_agreement_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_agreement_flag is None and "time_agreement_flag" in self.model_fields_set:
            _dict['timeAgreementFlag'] = None

        # set to None if time_bill_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_bill_flag is None and "time_bill_flag" in self.model_fields_set:
            _dict['timeBillFlag'] = None

        # set to None if time_date_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_date_flag is None and "time_date_flag" in self.model_fields_set:
            _dict['timeDateFlag'] = None

        # set to None if time_extended_amount_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_extended_amount_flag is None and "time_extended_amount_flag" in self.model_fields_set:
            _dict['timeExtendedAmountFlag'] = None

        # set to None if time_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_flag is None and "time_flag" in self.model_fields_set:
            _dict['timeFlag'] = None

        # set to None if time_hours_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_hours_flag is None and "time_hours_flag" in self.model_fields_set:
            _dict['timeHoursFlag'] = None

        # set to None if time_manual_entry (nullable) is None
        # and model_fields_set contains the field
        if self.time_manual_entry is None and "time_manual_entry" in self.model_fields_set:
            _dict['timeManualEntry'] = None

        # set to None if time_manual_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_manual_flag is None and "time_manual_flag" in self.model_fields_set:
            _dict['timeManualFlag'] = None

        # set to None if time_member_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_member_flag is None and "time_member_flag" in self.model_fields_set:
            _dict['timeMemberFlag'] = None

        # set to None if time_notes_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_notes_flag is None and "time_notes_flag" in self.model_fields_set:
            _dict['timeNotesFlag'] = None

        # set to None if time_rate_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_rate_flag is None and "time_rate_flag" in self.model_fields_set:
            _dict['timeRateFlag'] = None

        # set to None if time_start_end_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_start_end_flag is None and "time_start_end_flag" in self.model_fields_set:
            _dict['timeStartEndFlag'] = None

        # set to None if time_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_tax_flag is None and "time_tax_flag" in self.model_fields_set:
            _dict['timeTaxFlag'] = None

        # set to None if time_work_type_flag (nullable) is None
        # and model_fields_set contains the field
        if self.time_work_type_flag is None and "time_work_type_flag" in self.model_fields_set:
            _dict['timeWorkTypeFlag'] = None

        # set to None if visible_logo_flag (nullable) is None
        # and model_fields_set contains the field
        if self.visible_logo_flag is None and "visible_logo_flag" in self.model_fields_set:
            _dict['visibleLogoFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ServiceSignoff from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ServiceSignoff) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "billingMethodsText": obj.get("billingMethodsText"),
            "billingMethodsTextFlag": obj.get("billingMethodsTextFlag"),
            "billingTermsFlag": obj.get("billingTermsFlag"),
            "companyInfoFlag": obj.get("companyInfoFlag"),
            "configurationsFlag": obj.get("configurationsFlag"),
            "creditCardFieldsFlag": obj.get("creditCardFieldsFlag"),
            "customerSignoffFieldsFlag": obj.get("customerSignoffFieldsFlag"),
            "customerSignoffText": obj.get("customerSignoffText"),
            "customerSignoffTextFlag": obj.get("customerSignoffTextFlag"),
            "defaultFFFlag": obj.get("defaultFFFlag"),
            "defaultFlag": obj.get("defaultFlag"),
            "discussionFlag": obj.get("discussionFlag"),
            "expenseAgreementFlag": obj.get("expenseAgreementFlag"),
            "expenseAmountFlag": obj.get("expenseAmountFlag"),
            "expenseBillFlag": obj.get("expenseBillFlag"),
            "expenseDateFlag": obj.get("expenseDateFlag"),
            "expenseFlag": obj.get("expenseFlag"),
            "expenseManualEntry": obj.get("expenseManualEntry"),
            "expenseManualFlag": obj.get("expenseManualFlag"),
            "expenseMemberFlag": obj.get("expenseMemberFlag"),
            "expenseNotesFlag": obj.get("expenseNotesFlag"),
            "expenseTaxFlag": obj.get("expenseTaxFlag"),
            "expenseTypeFlag": obj.get("expenseTypeFlag"),
            "id": obj.get("id"),
            "internalNotesFlag": obj.get("internalNotesFlag"),
            "name": obj.get("name"),
            "productAgreementFlag": obj.get("productAgreementFlag"),
            "productBillFlag": obj.get("productBillFlag"),
            "productDescriptionFlag": obj.get("productDescriptionFlag"),
            "productExtendedAmountFlag": obj.get("productExtendedAmountFlag"),
            "productFlag": obj.get("productFlag"),
            "productManualEntry": obj.get("productManualEntry"),
            "productManualFlag": obj.get("productManualFlag"),
            "productPriceFlag": obj.get("productPriceFlag"),
            "productQuantityFlag": obj.get("productQuantityFlag"),
            "productTaxFlag": obj.get("productTaxFlag"),
            "resolutionFlag": obj.get("resolutionFlag"),
            "summaryFlag": obj.get("summaryFlag"),
            "task": obj.get("task"),
            "taskFlag": obj.get("taskFlag"),
            "technicianSignoffFlag": obj.get("technicianSignoffFlag"),
            "timeAgreementFlag": obj.get("timeAgreementFlag"),
            "timeBillFlag": obj.get("timeBillFlag"),
            "timeDateFlag": obj.get("timeDateFlag"),
            "timeExtendedAmountFlag": obj.get("timeExtendedAmountFlag"),
            "timeFlag": obj.get("timeFlag"),
            "timeHoursFlag": obj.get("timeHoursFlag"),
            "timeManualEntry": obj.get("timeManualEntry"),
            "timeManualFlag": obj.get("timeManualFlag"),
            "timeMemberFlag": obj.get("timeMemberFlag"),
            "timeNotesFlag": obj.get("timeNotesFlag"),
            "timeRateFlag": obj.get("timeRateFlag"),
            "timeStartEndFlag": obj.get("timeStartEndFlag"),
            "timeTaxFlag": obj.get("timeTaxFlag"),
            "timeWorkTypeFlag": obj.get("timeWorkTypeFlag"),
            "visibleLogoFlag": obj.get("visibleLogoFlag")
        })
        return _obj


