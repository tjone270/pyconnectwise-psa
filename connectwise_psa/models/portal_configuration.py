# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PortalConfiguration(BaseModel):
    """
    PortalConfiguration
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agreement_type_ids: Optional[List[StrictInt]] = Field(default=None, alias="agreementTypeIds")
    board_ids: Optional[List[StrictInt]] = Field(default=None, alias="boardIds")
    button_color: Optional[StrictStr] = Field(default=None, description=" Max length: 7;", alias="buttonColor")
    company: Optional[CompanyReference] = None
    config_type_ids: Optional[List[StrictInt]] = Field(default=None, alias="configTypeIds")
    default_flag: Optional[StrictBool] = Field(default=None, alias="defaultFlag")
    display_vendor_flag: Optional[StrictBool] = Field(default=None, alias="displayVendorFlag")
    header_color: Optional[StrictStr] = Field(default=None, description=" Max length: 7;", alias="headerColor")
    id: Optional[StrictInt] = Field(default=None, description="Gets or sets and Sets             An existing Portal Configuration id is required when copying a Portal Configuration.")
    language: Optional[StrictStr] = None
    location_ids: Optional[List[StrictInt]] = Field(default=None, alias="locationIds")
    login_background_color: Optional[StrictStr] = Field(default=None, description=" Max length: 7;", alias="loginBackgroundColor")
    menu_color: Optional[StrictStr] = Field(default=None, description=" Max length: 7;", alias="menuColor")
    name: StrictStr = Field(description=" Max length: 150;")
    portal_background_color: Optional[StrictStr] = Field(default=None, description=" Max length: 7;", alias="portalBackgroundColor")
    portal_image_copy_success_flag: Optional[StrictBool] = Field(default=None, alias="portalImageCopySuccessFlag")
    url: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;")
    welcome_text: Optional[StrictStr] = Field(default=None, description=" Max length: 4000;", alias="welcomeText")
    __properties: ClassVar[List[str]] = ["_info", "agreementTypeIds", "boardIds", "buttonColor", "company", "configTypeIds", "defaultFlag", "displayVendorFlag", "headerColor", "id", "language", "locationIds", "loginBackgroundColor", "menuColor", "name", "portalBackgroundColor", "portalImageCopySuccessFlag", "url", "welcomeText"]

    @field_validator('language')
    def language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('English', 'Spanish', 'French', 'British', 'Australian', 'BrazilianPortuguese', 'CanadianFrench', 'German', 'NewZealand', 'Dutch'):
            raise ValueError("must be one of enum values ('English', 'Spanish', 'French', 'British', 'Australian', 'BrazilianPortuguese', 'CanadianFrench', 'German', 'NewZealand', 'Dutch')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PortalConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # set to None if default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_flag is None and "default_flag" in self.model_fields_set:
            _dict['defaultFlag'] = None

        # set to None if display_vendor_flag (nullable) is None
        # and model_fields_set contains the field
        if self.display_vendor_flag is None and "display_vendor_flag" in self.model_fields_set:
            _dict['displayVendorFlag'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if portal_image_copy_success_flag (nullable) is None
        # and model_fields_set contains the field
        if self.portal_image_copy_success_flag is None and "portal_image_copy_success_flag" in self.model_fields_set:
            _dict['portalImageCopySuccessFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PortalConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PortalConfiguration) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agreementTypeIds": obj.get("agreementTypeIds"),
            "boardIds": obj.get("boardIds"),
            "buttonColor": obj.get("buttonColor"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "configTypeIds": obj.get("configTypeIds"),
            "defaultFlag": obj.get("defaultFlag"),
            "displayVendorFlag": obj.get("displayVendorFlag"),
            "headerColor": obj.get("headerColor"),
            "id": obj.get("id"),
            "language": obj.get("language"),
            "locationIds": obj.get("locationIds"),
            "loginBackgroundColor": obj.get("loginBackgroundColor"),
            "menuColor": obj.get("menuColor"),
            "name": obj.get("name"),
            "portalBackgroundColor": obj.get("portalBackgroundColor"),
            "portalImageCopySuccessFlag": obj.get("portalImageCopySuccessFlag"),
            "url": obj.get("url"),
            "welcomeText": obj.get("welcomeText")
        })
        return _obj


