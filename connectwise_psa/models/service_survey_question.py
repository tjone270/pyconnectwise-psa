# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.service_survey_question_option import ServiceSurveyQuestionOption
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ServiceSurveyQuestion(BaseModel):
    """
    ServiceSurveyQuestion
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    id: Optional[StrictInt] = None
    include_flag: Optional[StrictBool] = Field(default=None, alias="includeFlag")
    no_answer_points: Optional[StrictInt] = Field(default=None, alias="noAnswerPoints")
    options: Optional[List[ServiceSurveyQuestionOption]] = None
    question: StrictStr = Field(description=" Max length: 1000;")
    required_flag: Optional[StrictBool] = Field(default=None, alias="requiredFlag")
    sequence_number: Optional[StrictInt] = Field(default=None, alias="sequenceNumber")
    survey_id: Optional[StrictInt] = Field(default=None, alias="surveyId")
    type: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["_info", "id", "includeFlag", "noAnswerPoints", "options", "question", "requiredFlag", "sequenceNumber", "surveyId", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('OpenEnded', 'Selection'):
            raise ValueError("must be one of enum values ('OpenEnded', 'Selection')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ServiceSurveyQuestion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item in self.options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['options'] = _items
        # set to None if include_flag (nullable) is None
        # and model_fields_set contains the field
        if self.include_flag is None and "include_flag" in self.model_fields_set:
            _dict['includeFlag'] = None

        # set to None if no_answer_points (nullable) is None
        # and model_fields_set contains the field
        if self.no_answer_points is None and "no_answer_points" in self.model_fields_set:
            _dict['noAnswerPoints'] = None

        # set to None if required_flag (nullable) is None
        # and model_fields_set contains the field
        if self.required_flag is None and "required_flag" in self.model_fields_set:
            _dict['requiredFlag'] = None

        # set to None if sequence_number (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_number is None and "sequence_number" in self.model_fields_set:
            _dict['sequenceNumber'] = None

        # set to None if survey_id (nullable) is None
        # and model_fields_set contains the field
        if self.survey_id is None and "survey_id" in self.model_fields_set:
            _dict['surveyId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ServiceSurveyQuestion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ServiceSurveyQuestion) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "id": obj.get("id"),
            "includeFlag": obj.get("includeFlag"),
            "noAnswerPoints": obj.get("noAnswerPoints"),
            "options": [ServiceSurveyQuestionOption.from_dict(_item) for _item in obj.get("options")] if obj.get("options") is not None else None,
            "question": obj.get("question"),
            "requiredFlag": obj.get("requiredFlag"),
            "sequenceNumber": obj.get("sequenceNumber"),
            "surveyId": obj.get("surveyId"),
            "type": obj.get("type")
        })
        return _obj


