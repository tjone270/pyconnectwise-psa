# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.expense_entry_pod_view_model import ExpenseEntryPodViewModel
from connectwise_psa.models.history_entry import HistoryEntry
from connectwise_psa.models.time_entry_billing_options_view_model import TimeEntryBillingOptionsViewModel
from connectwise_psa.models.time_entry_charge_to_selection import TimeEntryChargeToSelection
from connectwise_psa.models.time_entry_details_for_api_view_model import TimeEntryDetailsForApiViewModel
from connectwise_psa.models.time_entry_details_view_model import TimeEntryDetailsViewModel
from connectwise_psa.models.time_entry_email_view_model import TimeEntryEmailViewModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TimeEntryDetailViewModel(BaseModel):
    """
    TimeEntryDetailViewModel
    """ # noqa: E501
    additional_expenses: Optional[List[ExpenseEntryPodViewModel]] = Field(default=None, alias="additionalExpenses")
    audit_reason: Optional[StrictStr] = Field(default=None, alias="auditReason")
    billing_log_rec_id: Optional[StrictInt] = Field(default=None, alias="billingLogRecId")
    billing_model: Optional[TimeEntryBillingOptionsViewModel] = Field(default=None, alias="billingModel")
    charge_to: Optional[TimeEntryChargeToSelection] = Field(default=None, alias="chargeTo")
    client_time: Optional[StrictStr] = Field(default=None, alias="clientTime")
    current_user_is_manager: Optional[StrictBool] = Field(default=None, alias="currentUserIsManager")
    email_model: Optional[TimeEntryEmailViewModel] = Field(default=None, alias="emailModel")
    exp_billable_defaulting_source: Optional[StrictStr] = Field(default=None, alias="expBillableDefaultingSource")
    expense: Optional[ExpenseEntryPodViewModel] = None
    history: Optional[List[HistoryEntry]] = None
    invoice_closed: Optional[StrictBool] = Field(default=None, alias="invoiceClosed")
    is_billing_context: Optional[StrictBool] = Field(default=None, alias="isBillingContext")
    is_pop_out: Optional[StrictBool] = Field(default=None, alias="isPopOut")
    is_service_or_activity_context: Optional[StrictBool] = Field(default=None, alias="isServiceOrActivityContext")
    iso_currency_code: Optional[StrictStr] = Field(default=None, alias="isoCurrencyCode")
    last_load_time: Optional[StrictStr] = Field(default=None, alias="lastLoadTime")
    member_current_date: Optional[StrictStr] = Field(default=None, alias="memberCurrentDate")
    no_future_records_flag: Optional[StrictBool] = Field(default=None, alias="noFutureRecordsFlag")
    pop_out_height: Optional[StrictInt] = Field(default=None, alias="popOutHeight")
    pop_out_width: Optional[StrictInt] = Field(default=None, alias="popOutWidth")
    require_reason_flag: Optional[StrictBool] = Field(default=None, alias="requireReasonFlag")
    te_status_id: Optional[StrictInt] = Field(default=None, alias="teStatusId")
    time_entry_additional_details: Optional[List[TimeEntryDetailsViewModel]] = Field(default=None, alias="timeEntryAdditionalDetails")
    time_entry_detail_model: Optional[TimeEntryDetailsForApiViewModel] = Field(default=None, alias="timeEntryDetailModel")
    time_entry_note_size: Optional[StrictInt] = Field(default=None, alias="timeEntryNoteSize")
    time_rec_id: Optional[StrictInt] = Field(default=None, alias="timeRecId")
    time_sheet_rec_id: Optional[StrictInt] = Field(default=None, alias="timeSheetRecId")
    time_sheet_reversed_flag: Optional[StrictBool] = Field(default=None, alias="timeSheetReversedFlag")
    time_sheet_status_id: Optional[StrictInt] = Field(default=None, alias="timeSheetStatusId")
    __properties: ClassVar[List[str]] = ["additionalExpenses", "auditReason", "billingLogRecId", "billingModel", "chargeTo", "clientTime", "currentUserIsManager", "emailModel", "expBillableDefaultingSource", "expense", "history", "invoiceClosed", "isBillingContext", "isPopOut", "isServiceOrActivityContext", "isoCurrencyCode", "lastLoadTime", "memberCurrentDate", "noFutureRecordsFlag", "popOutHeight", "popOutWidth", "requireReasonFlag", "teStatusId", "timeEntryAdditionalDetails", "timeEntryDetailModel", "timeEntryNoteSize", "timeRecId", "timeSheetRecId", "timeSheetReversedFlag", "timeSheetStatusId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimeEntryDetailViewModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_expenses (list)
        _items = []
        if self.additional_expenses:
            for _item in self.additional_expenses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['additionalExpenses'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_model
        if self.billing_model:
            _dict['billingModel'] = self.billing_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_to
        if self.charge_to:
            _dict['chargeTo'] = self.charge_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_model
        if self.email_model:
            _dict['emailModel'] = self.email_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expense
        if self.expense:
            _dict['expense'] = self.expense.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in history (list)
        _items = []
        if self.history:
            for _item in self.history:
                if _item:
                    _items.append(_item.to_dict())
            _dict['history'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in time_entry_additional_details (list)
        _items = []
        if self.time_entry_additional_details:
            for _item in self.time_entry_additional_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['timeEntryAdditionalDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_entry_detail_model
        if self.time_entry_detail_model:
            _dict['timeEntryDetailModel'] = self.time_entry_detail_model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TimeEntryDetailViewModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TimeEntryDetailViewModel) in the input: " + _key)

        _obj = cls.model_validate({
            "additionalExpenses": [ExpenseEntryPodViewModel.from_dict(_item) for _item in obj.get("additionalExpenses")] if obj.get("additionalExpenses") is not None else None,
            "auditReason": obj.get("auditReason"),
            "billingLogRecId": obj.get("billingLogRecId"),
            "billingModel": TimeEntryBillingOptionsViewModel.from_dict(obj.get("billingModel")) if obj.get("billingModel") is not None else None,
            "chargeTo": TimeEntryChargeToSelection.from_dict(obj.get("chargeTo")) if obj.get("chargeTo") is not None else None,
            "clientTime": obj.get("clientTime"),
            "currentUserIsManager": obj.get("currentUserIsManager"),
            "emailModel": TimeEntryEmailViewModel.from_dict(obj.get("emailModel")) if obj.get("emailModel") is not None else None,
            "expBillableDefaultingSource": obj.get("expBillableDefaultingSource"),
            "expense": ExpenseEntryPodViewModel.from_dict(obj.get("expense")) if obj.get("expense") is not None else None,
            "history": [HistoryEntry.from_dict(_item) for _item in obj.get("history")] if obj.get("history") is not None else None,
            "invoiceClosed": obj.get("invoiceClosed"),
            "isBillingContext": obj.get("isBillingContext"),
            "isPopOut": obj.get("isPopOut"),
            "isServiceOrActivityContext": obj.get("isServiceOrActivityContext"),
            "isoCurrencyCode": obj.get("isoCurrencyCode"),
            "lastLoadTime": obj.get("lastLoadTime"),
            "memberCurrentDate": obj.get("memberCurrentDate"),
            "noFutureRecordsFlag": obj.get("noFutureRecordsFlag"),
            "popOutHeight": obj.get("popOutHeight"),
            "popOutWidth": obj.get("popOutWidth"),
            "requireReasonFlag": obj.get("requireReasonFlag"),
            "teStatusId": obj.get("teStatusId"),
            "timeEntryAdditionalDetails": [TimeEntryDetailsViewModel.from_dict(_item) for _item in obj.get("timeEntryAdditionalDetails")] if obj.get("timeEntryAdditionalDetails") is not None else None,
            "timeEntryDetailModel": TimeEntryDetailsForApiViewModel.from_dict(obj.get("timeEntryDetailModel")) if obj.get("timeEntryDetailModel") is not None else None,
            "timeEntryNoteSize": obj.get("timeEntryNoteSize"),
            "timeRecId": obj.get("timeRecId"),
            "timeSheetRecId": obj.get("timeSheetRecId"),
            "timeSheetReversedFlag": obj.get("timeSheetReversedFlag"),
            "timeSheetStatusId": obj.get("timeSheetStatusId")
        })
        return _obj


