# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.country_reference import CountryReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.invoice_reference import InvoiceReference
from connectwise_psa.models.iv_item_reference import IvItemReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.project_reference import ProjectReference
from connectwise_psa.models.rma_action_reference import RmaActionReference
from connectwise_psa.models.rma_disposition_reference import RmaDispositionReference
from connectwise_psa.models.rma_status_reference import RmaStatusReference
from connectwise_psa.models.sales_order_reference import SalesOrderReference
from connectwise_psa.models.shipment_method_reference import ShipmentMethodReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.ticket_reference import TicketReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RmaTag(BaseModel):
    """
    RmaTag
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    account_manager: Optional[MemberReference] = Field(default=None, alias="accountManager")
    closed_by: Optional[MemberReference] = Field(default=None, alias="closedBy")
    closing_notes: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="closingNotes")
    currency: Optional[CurrencyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    date_closed: Optional[StrictStr] = Field(default=None, alias="dateClosed")
    department: Optional[SystemDepartmentReference] = None
    drop_ship_flag: Optional[StrictBool] = Field(default=None, alias="dropShipFlag")
    id: Optional[StrictInt] = None
    internal_notes: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="internalNotes")
    invoice: Optional[InvoiceReference] = None
    iv_description: Optional[StrictStr] = Field(default=None, alias="ivDescription")
    list_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="listPrice")
    location: Optional[SystemLocationReference] = None
    mfg_item_id: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="mfgItemID")
    problem_description: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="problemDescription")
    product: Optional[IvItemReference] = None
    product_description: StrictStr = Field(description=" Max length: 200;", alias="productDescription")
    project: Optional[ProjectReference] = None
    purchased_company: Optional[CompanyReference] = Field(default=None, alias="purchasedCompany")
    purchased_contact: Optional[ContactReference] = Field(default=None, alias="purchasedContact")
    purchased_contact_address_line1: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="purchasedContactAddressLine1")
    purchased_contact_address_line2: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="purchasedContactAddressLine2")
    purchased_contact_city: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="purchasedContactCity")
    purchased_contact_country: Optional[CountryReference] = Field(default=None, alias="purchasedContactCountry")
    purchased_contact_email: Optional[StrictStr] = Field(default=None, alias="purchasedContactEmail")
    purchased_contact_extension: Optional[StrictStr] = Field(default=None, alias="purchasedContactExtension")
    purchased_contact_phone: Optional[StrictStr] = Field(default=None, alias="purchasedContactPhone")
    purchased_contact_state: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="purchasedContactState")
    purchased_contact_type: Optional[StrictStr] = Field(default=None, alias="purchasedContactType")
    purchased_contact_zip: Optional[StrictStr] = Field(default=None, description=" Max length: 12;", alias="purchasedContactZip")
    purchased_invoice_date: Optional[date] = Field(default=None, alias="purchasedInvoiceDate")
    purchased_invoice_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="purchasedInvoiceNumber")
    purchased_notes: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="purchasedNotes")
    purchased_order_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="purchasedOrderNumber")
    purchased_site: Optional[SiteReference] = Field(default=None, alias="purchasedSite")
    purchased_vendor_action: Optional[RmaActionReference] = Field(default=None, alias="purchasedVendorAction")
    purchased_vendor_rma_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="purchasedVendorRmaNumber")
    repair_company: Optional[CompanyReference] = Field(default=None, alias="repairCompany")
    repair_contact: Optional[ContactReference] = Field(default=None, alias="repairContact")
    repair_contact_address_line1: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="repairContactAddressLine1")
    repair_contact_address_line2: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="repairContactAddressLine2")
    repair_contact_city: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="repairContactCity")
    repair_contact_country: Optional[CountryReference] = Field(default=None, alias="repairContactCountry")
    repair_contact_email: Optional[StrictStr] = Field(default=None, alias="repairContactEmail")
    repair_contact_extension: Optional[StrictStr] = Field(default=None, alias="repairContactExtension")
    repair_contact_phone: Optional[StrictStr] = Field(default=None, alias="repairContactPhone")
    repair_contact_state: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="repairContactState")
    repair_contact_type: Optional[StrictStr] = Field(default=None, alias="repairContactType")
    repair_contact_zip: Optional[StrictStr] = Field(default=None, description=" Max length: 12;", alias="repairContactZip")
    repair_notes: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="repairNotes")
    repair_order_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="repairOrderNumber")
    repair_site: Optional[SiteReference] = Field(default=None, alias="repairSite")
    returned_company: Optional[CompanyReference] = Field(default=None, alias="returnedCompany")
    returned_contact: Optional[ContactReference] = Field(default=None, alias="returnedContact")
    returned_contact_address_line1: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="returnedContactAddressLine1")
    returned_contact_address_line2: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="returnedContactAddressLine2")
    returned_contact_city: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="returnedContactCity")
    returned_contact_country: Optional[CountryReference] = Field(default=None, alias="returnedContactCountry")
    returned_contact_email: Optional[StrictStr] = Field(default=None, alias="returnedContactEmail")
    returned_contact_extension: Optional[StrictStr] = Field(default=None, alias="returnedContactExtension")
    returned_contact_phone: Optional[StrictStr] = Field(default=None, alias="returnedContactPhone")
    returned_contact_state: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="returnedContactState")
    returned_contact_type: Optional[StrictStr] = Field(default=None, alias="returnedContactType")
    returned_contact_zip: Optional[StrictStr] = Field(default=None, description=" Max length: 12;", alias="returnedContactZip")
    returned_site: Optional[SiteReference] = Field(default=None, alias="returnedSite")
    rma_disposition: Optional[RmaDispositionReference] = Field(default=None, alias="rmaDisposition")
    sales_order: Optional[SalesOrderReference] = Field(default=None, alias="salesOrder")
    serial_number: Optional[StrictStr] = Field(default=None, alias="serialNumber")
    service_ticket: Optional[TicketReference] = Field(default=None, alias="serviceTicket")
    ship_method: Optional[ShipmentMethodReference] = Field(default=None, alias="shipMethod")
    shipping_date: Optional[date] = Field(default=None, alias="shippingDate")
    shipping_tracking_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="shippingTrackingNumber")
    status: Optional[RmaStatusReference] = None
    summary: Optional[StrictStr] = Field(default=None, description=" Max length: 150;")
    technical_contact: Optional[MemberReference] = Field(default=None, alias="technicalContact")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unitPrice")
    warranty_company: Optional[CompanyReference] = Field(default=None, alias="warrantyCompany")
    warranty_contact: Optional[ContactReference] = Field(default=None, alias="warrantyContact")
    warranty_contact_address_line1: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="warrantyContactAddressLine1")
    warranty_contact_address_line2: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="warrantyContactAddressLine2")
    warranty_contact_city: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="warrantyContactCity")
    warranty_contact_country: Optional[CountryReference] = Field(default=None, alias="warrantyContactCountry")
    warranty_contact_email: Optional[StrictStr] = Field(default=None, alias="warrantyContactEmail")
    warranty_contact_extension: Optional[StrictStr] = Field(default=None, alias="warrantyContactExtension")
    warranty_contact_phone: Optional[StrictStr] = Field(default=None, alias="warrantyContactPhone")
    warranty_contact_state: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="warrantyContactState")
    warranty_contact_type: Optional[StrictStr] = Field(default=None, alias="warrantyContactType")
    warranty_contact_zip: Optional[StrictStr] = Field(default=None, description=" Max length: 12;", alias="warrantyContactZip")
    warranty_notes: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="warrantyNotes")
    warranty_site: Optional[SiteReference] = Field(default=None, alias="warrantySite")
    __properties: ClassVar[List[str]] = ["_info", "accountManager", "closedBy", "closingNotes", "currency", "customFields", "dateClosed", "department", "dropShipFlag", "id", "internalNotes", "invoice", "ivDescription", "listPrice", "location", "mfgItemID", "problemDescription", "product", "productDescription", "project", "purchasedCompany", "purchasedContact", "purchasedContactAddressLine1", "purchasedContactAddressLine2", "purchasedContactCity", "purchasedContactCountry", "purchasedContactEmail", "purchasedContactExtension", "purchasedContactPhone", "purchasedContactState", "purchasedContactType", "purchasedContactZip", "purchasedInvoiceDate", "purchasedInvoiceNumber", "purchasedNotes", "purchasedOrderNumber", "purchasedSite", "purchasedVendorAction", "purchasedVendorRmaNumber", "repairCompany", "repairContact", "repairContactAddressLine1", "repairContactAddressLine2", "repairContactCity", "repairContactCountry", "repairContactEmail", "repairContactExtension", "repairContactPhone", "repairContactState", "repairContactType", "repairContactZip", "repairNotes", "repairOrderNumber", "repairSite", "returnedCompany", "returnedContact", "returnedContactAddressLine1", "returnedContactAddressLine2", "returnedContactCity", "returnedContactCountry", "returnedContactEmail", "returnedContactExtension", "returnedContactPhone", "returnedContactState", "returnedContactType", "returnedContactZip", "returnedSite", "rmaDisposition", "salesOrder", "serialNumber", "serviceTicket", "shipMethod", "shippingDate", "shippingTrackingNumber", "status", "summary", "technicalContact", "unitPrice", "warrantyCompany", "warrantyContact", "warrantyContactAddressLine1", "warrantyContactAddressLine2", "warrantyContactCity", "warrantyContactCountry", "warrantyContactEmail", "warrantyContactExtension", "warrantyContactPhone", "warrantyContactState", "warrantyContactType", "warrantyContactZip", "warrantyNotes", "warrantySite"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RmaTag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_manager
        if self.account_manager:
            _dict['accountManager'] = self.account_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of closed_by
        if self.closed_by:
            _dict['closedBy'] = self.closed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchased_company
        if self.purchased_company:
            _dict['purchasedCompany'] = self.purchased_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchased_contact
        if self.purchased_contact:
            _dict['purchasedContact'] = self.purchased_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchased_contact_country
        if self.purchased_contact_country:
            _dict['purchasedContactCountry'] = self.purchased_contact_country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchased_site
        if self.purchased_site:
            _dict['purchasedSite'] = self.purchased_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchased_vendor_action
        if self.purchased_vendor_action:
            _dict['purchasedVendorAction'] = self.purchased_vendor_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repair_company
        if self.repair_company:
            _dict['repairCompany'] = self.repair_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repair_contact
        if self.repair_contact:
            _dict['repairContact'] = self.repair_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repair_contact_country
        if self.repair_contact_country:
            _dict['repairContactCountry'] = self.repair_contact_country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repair_site
        if self.repair_site:
            _dict['repairSite'] = self.repair_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of returned_company
        if self.returned_company:
            _dict['returnedCompany'] = self.returned_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of returned_contact
        if self.returned_contact:
            _dict['returnedContact'] = self.returned_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of returned_contact_country
        if self.returned_contact_country:
            _dict['returnedContactCountry'] = self.returned_contact_country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of returned_site
        if self.returned_site:
            _dict['returnedSite'] = self.returned_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rma_disposition
        if self.rma_disposition:
            _dict['rmaDisposition'] = self.rma_disposition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sales_order
        if self.sales_order:
            _dict['salesOrder'] = self.sales_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_ticket
        if self.service_ticket:
            _dict['serviceTicket'] = self.service_ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_method
        if self.ship_method:
            _dict['shipMethod'] = self.ship_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of technical_contact
        if self.technical_contact:
            _dict['technicalContact'] = self.technical_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warranty_company
        if self.warranty_company:
            _dict['warrantyCompany'] = self.warranty_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warranty_contact
        if self.warranty_contact:
            _dict['warrantyContact'] = self.warranty_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warranty_contact_country
        if self.warranty_contact_country:
            _dict['warrantyContactCountry'] = self.warranty_contact_country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warranty_site
        if self.warranty_site:
            _dict['warrantySite'] = self.warranty_site.to_dict()
        # set to None if drop_ship_flag (nullable) is None
        # and model_fields_set contains the field
        if self.drop_ship_flag is None and "drop_ship_flag" in self.model_fields_set:
            _dict['dropShipFlag'] = None

        # set to None if unit_price (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price is None and "unit_price" in self.model_fields_set:
            _dict['unitPrice'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RmaTag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in RmaTag) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "accountManager": MemberReference.from_dict(obj.get("accountManager")) if obj.get("accountManager") is not None else None,
            "closedBy": MemberReference.from_dict(obj.get("closedBy")) if obj.get("closedBy") is not None else None,
            "closingNotes": obj.get("closingNotes"),
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "dateClosed": obj.get("dateClosed"),
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "dropShipFlag": obj.get("dropShipFlag"),
            "id": obj.get("id"),
            "internalNotes": obj.get("internalNotes"),
            "invoice": InvoiceReference.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "ivDescription": obj.get("ivDescription"),
            "listPrice": obj.get("listPrice"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "mfgItemID": obj.get("mfgItemID"),
            "problemDescription": obj.get("problemDescription"),
            "product": IvItemReference.from_dict(obj.get("product")) if obj.get("product") is not None else None,
            "productDescription": obj.get("productDescription"),
            "project": ProjectReference.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "purchasedCompany": CompanyReference.from_dict(obj.get("purchasedCompany")) if obj.get("purchasedCompany") is not None else None,
            "purchasedContact": ContactReference.from_dict(obj.get("purchasedContact")) if obj.get("purchasedContact") is not None else None,
            "purchasedContactAddressLine1": obj.get("purchasedContactAddressLine1"),
            "purchasedContactAddressLine2": obj.get("purchasedContactAddressLine2"),
            "purchasedContactCity": obj.get("purchasedContactCity"),
            "purchasedContactCountry": CountryReference.from_dict(obj.get("purchasedContactCountry")) if obj.get("purchasedContactCountry") is not None else None,
            "purchasedContactEmail": obj.get("purchasedContactEmail"),
            "purchasedContactExtension": obj.get("purchasedContactExtension"),
            "purchasedContactPhone": obj.get("purchasedContactPhone"),
            "purchasedContactState": obj.get("purchasedContactState"),
            "purchasedContactType": obj.get("purchasedContactType"),
            "purchasedContactZip": obj.get("purchasedContactZip"),
            "purchasedInvoiceDate": obj.get("purchasedInvoiceDate"),
            "purchasedInvoiceNumber": obj.get("purchasedInvoiceNumber"),
            "purchasedNotes": obj.get("purchasedNotes"),
            "purchasedOrderNumber": obj.get("purchasedOrderNumber"),
            "purchasedSite": SiteReference.from_dict(obj.get("purchasedSite")) if obj.get("purchasedSite") is not None else None,
            "purchasedVendorAction": RmaActionReference.from_dict(obj.get("purchasedVendorAction")) if obj.get("purchasedVendorAction") is not None else None,
            "purchasedVendorRmaNumber": obj.get("purchasedVendorRmaNumber"),
            "repairCompany": CompanyReference.from_dict(obj.get("repairCompany")) if obj.get("repairCompany") is not None else None,
            "repairContact": ContactReference.from_dict(obj.get("repairContact")) if obj.get("repairContact") is not None else None,
            "repairContactAddressLine1": obj.get("repairContactAddressLine1"),
            "repairContactAddressLine2": obj.get("repairContactAddressLine2"),
            "repairContactCity": obj.get("repairContactCity"),
            "repairContactCountry": CountryReference.from_dict(obj.get("repairContactCountry")) if obj.get("repairContactCountry") is not None else None,
            "repairContactEmail": obj.get("repairContactEmail"),
            "repairContactExtension": obj.get("repairContactExtension"),
            "repairContactPhone": obj.get("repairContactPhone"),
            "repairContactState": obj.get("repairContactState"),
            "repairContactType": obj.get("repairContactType"),
            "repairContactZip": obj.get("repairContactZip"),
            "repairNotes": obj.get("repairNotes"),
            "repairOrderNumber": obj.get("repairOrderNumber"),
            "repairSite": SiteReference.from_dict(obj.get("repairSite")) if obj.get("repairSite") is not None else None,
            "returnedCompany": CompanyReference.from_dict(obj.get("returnedCompany")) if obj.get("returnedCompany") is not None else None,
            "returnedContact": ContactReference.from_dict(obj.get("returnedContact")) if obj.get("returnedContact") is not None else None,
            "returnedContactAddressLine1": obj.get("returnedContactAddressLine1"),
            "returnedContactAddressLine2": obj.get("returnedContactAddressLine2"),
            "returnedContactCity": obj.get("returnedContactCity"),
            "returnedContactCountry": CountryReference.from_dict(obj.get("returnedContactCountry")) if obj.get("returnedContactCountry") is not None else None,
            "returnedContactEmail": obj.get("returnedContactEmail"),
            "returnedContactExtension": obj.get("returnedContactExtension"),
            "returnedContactPhone": obj.get("returnedContactPhone"),
            "returnedContactState": obj.get("returnedContactState"),
            "returnedContactType": obj.get("returnedContactType"),
            "returnedContactZip": obj.get("returnedContactZip"),
            "returnedSite": SiteReference.from_dict(obj.get("returnedSite")) if obj.get("returnedSite") is not None else None,
            "rmaDisposition": RmaDispositionReference.from_dict(obj.get("rmaDisposition")) if obj.get("rmaDisposition") is not None else None,
            "salesOrder": SalesOrderReference.from_dict(obj.get("salesOrder")) if obj.get("salesOrder") is not None else None,
            "serialNumber": obj.get("serialNumber"),
            "serviceTicket": TicketReference.from_dict(obj.get("serviceTicket")) if obj.get("serviceTicket") is not None else None,
            "shipMethod": ShipmentMethodReference.from_dict(obj.get("shipMethod")) if obj.get("shipMethod") is not None else None,
            "shippingDate": obj.get("shippingDate"),
            "shippingTrackingNumber": obj.get("shippingTrackingNumber"),
            "status": RmaStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "summary": obj.get("summary"),
            "technicalContact": MemberReference.from_dict(obj.get("technicalContact")) if obj.get("technicalContact") is not None else None,
            "unitPrice": obj.get("unitPrice"),
            "warrantyCompany": CompanyReference.from_dict(obj.get("warrantyCompany")) if obj.get("warrantyCompany") is not None else None,
            "warrantyContact": ContactReference.from_dict(obj.get("warrantyContact")) if obj.get("warrantyContact") is not None else None,
            "warrantyContactAddressLine1": obj.get("warrantyContactAddressLine1"),
            "warrantyContactAddressLine2": obj.get("warrantyContactAddressLine2"),
            "warrantyContactCity": obj.get("warrantyContactCity"),
            "warrantyContactCountry": CountryReference.from_dict(obj.get("warrantyContactCountry")) if obj.get("warrantyContactCountry") is not None else None,
            "warrantyContactEmail": obj.get("warrantyContactEmail"),
            "warrantyContactExtension": obj.get("warrantyContactExtension"),
            "warrantyContactPhone": obj.get("warrantyContactPhone"),
            "warrantyContactState": obj.get("warrantyContactState"),
            "warrantyContactType": obj.get("warrantyContactType"),
            "warrantyContactZip": obj.get("warrantyContactZip"),
            "warrantyNotes": obj.get("warrantyNotes"),
            "warrantySite": SiteReference.from_dict(obj.get("warrantySite")) if obj.get("warrantySite") is not None else None
        })
        return _obj


