# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.company_type_reference import CompanyTypeReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.gl_export_transaction_detail import GLExportTransactionDetail
from connectwise_psa.models.gl_export_transaction_tax_level import GLExportTransactionTaxLevel
from connectwise_psa.models.project_reference import ProjectReference
from connectwise_psa.models.purchase_order_reference import PurchaseOrderReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GLExportTransaction(BaseModel):
    """
    GLExportTransaction
    """ # noqa: E501
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    agreement_pre_payment_flag: Optional[StrictBool] = Field(default=None, alias="agreementPrePaymentFlag")
    attention: Optional[StrictStr] = None
    billing_terms: Optional[BillingTermsReference] = Field(default=None, alias="billingTerms")
    billing_terms_xref: Optional[StrictStr] = Field(default=None, alias="billingTermsXref")
    billing_type: Optional[StrictStr] = Field(default=None, alias="billingType")
    city_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cityTax")
    company: Optional[CompanyReference] = None
    company_account_number: Optional[StrictStr] = Field(default=None, alias="companyAccountNumber")
    company_type: Optional[CompanyTypeReference] = Field(default=None, alias="companyType")
    county_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="countyTax")
    county_tax_xref: Optional[StrictStr] = Field(default=None, alias="countyTaxXref")
    currency: Optional[CurrencyReference] = None
    description: Optional[StrictStr] = None
    detail: Optional[List[GLExportTransactionDetail]] = None
    document_date: Optional[StrictStr] = Field(default=None, alias="documentDate")
    document_number: Optional[StrictStr] = Field(default=None, alias="documentNumber")
    document_type: Optional[StrictStr] = Field(default=None, alias="documentType")
    due_date: Optional[StrictStr] = Field(default=None, alias="dueDate")
    due_days: Optional[StrictInt] = Field(default=None, alias="dueDays")
    email_delivery_flag: Optional[StrictBool] = Field(default=None, alias="emailDeliveryFlag")
    gl_class: Optional[StrictStr] = Field(default=None, alias="glClass")
    gl_entry_ids: Optional[StrictStr] = Field(default=None, alias="glEntryIds")
    gl_type_id: Optional[StrictStr] = Field(default=None, alias="glTypeId")
    id: Optional[StrictInt] = None
    memo: Optional[StrictStr] = None
    piggy_back_flag: Optional[StrictBool] = Field(default=None, alias="piggyBackFlag")
    print_delivery_flag: Optional[StrictBool] = Field(default=None, alias="printDeliveryFlag")
    project: Optional[ProjectReference] = None
    purchase_order: Optional[PurchaseOrderReference] = Field(default=None, alias="purchaseOrder")
    sales_rep_id: Optional[StrictStr] = Field(default=None, alias="salesRepId")
    sales_rep_name: Optional[StrictStr] = Field(default=None, alias="salesRepName")
    sales_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="salesTax")
    sales_territory: Optional[StrictStr] = Field(default=None, alias="salesTerritory")
    send_avalara_tax_flag: Optional[StrictBool] = Field(default=None, alias="sendAvalaraTaxFlag")
    ship_contact: Optional[StrictStr] = Field(default=None, alias="shipContact")
    ship_site: Optional[SiteReference] = Field(default=None, alias="shipSite")
    ship_to_company: Optional[CompanyReference] = Field(default=None, alias="shipToCompany")
    ship_to_company_account_number: Optional[StrictStr] = Field(default=None, alias="shipToCompanyAccountNumber")
    ship_to_company_type: Optional[CompanyTypeReference] = Field(default=None, alias="shipToCompanyType")
    ship_to_tax_id: Optional[StrictStr] = Field(default=None, alias="shipToTaxId")
    site: Optional[SiteReference] = None
    state_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="stateTax")
    state_tax_xref: Optional[StrictStr] = Field(default=None, alias="stateTaxXref")
    tax_account_number: Optional[StrictStr] = Field(default=None, alias="taxAccountNumber")
    tax_agency_xref: Optional[StrictStr] = Field(default=None, alias="taxAgencyXref")
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    tax_dp_applied_flag: Optional[StrictBool] = Field(default=None, alias="taxDpAppliedFlag")
    tax_group_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxGroupRate")
    tax_id: Optional[StrictStr] = Field(default=None, alias="taxId")
    tax_levels: Optional[List[GLExportTransactionTaxLevel]] = Field(default=None, alias="taxLevels")
    taxable: Optional[StrictBool] = None
    taxable_amount1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxableAmount1")
    taxable_amount2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxableAmount2")
    taxable_amount3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxableAmount3")
    taxable_amount4: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxableAmount4")
    taxable_amount5: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxableAmount5")
    taxable_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxableTotal")
    total: Optional[Union[StrictFloat, StrictInt]] = None
    use_avalara_flag: Optional[StrictBool] = Field(default=None, alias="useAvalaraFlag")
    __properties: ClassVar[List[str]] = ["accountNumber", "agreementPrePaymentFlag", "attention", "billingTerms", "billingTermsXref", "billingType", "cityTax", "company", "companyAccountNumber", "companyType", "countyTax", "countyTaxXref", "currency", "description", "detail", "documentDate", "documentNumber", "documentType", "dueDate", "dueDays", "emailDeliveryFlag", "glClass", "glEntryIds", "glTypeId", "id", "memo", "piggyBackFlag", "printDeliveryFlag", "project", "purchaseOrder", "salesRepId", "salesRepName", "salesTax", "salesTerritory", "sendAvalaraTaxFlag", "shipContact", "shipSite", "shipToCompany", "shipToCompanyAccountNumber", "shipToCompanyType", "shipToTaxId", "site", "stateTax", "stateTaxXref", "taxAccountNumber", "taxAgencyXref", "taxCode", "taxDpAppliedFlag", "taxGroupRate", "taxId", "taxLevels", "taxable", "taxableAmount1", "taxableAmount2", "taxableAmount3", "taxableAmount4", "taxableAmount5", "taxableTotal", "total", "useAvalaraFlag"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GLExportTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_terms
        if self.billing_terms:
            _dict['billingTerms'] = self.billing_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_type
        if self.company_type:
            _dict['companyType'] = self.company_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in detail (list)
        _items = []
        if self.detail:
            for _item in self.detail:
                if _item:
                    _items.append(_item.to_dict())
            _dict['detail'] = _items
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchase_order
        if self.purchase_order:
            _dict['purchaseOrder'] = self.purchase_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_site
        if self.ship_site:
            _dict['shipSite'] = self.ship_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_company
        if self.ship_to_company:
            _dict['shipToCompany'] = self.ship_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_company_type
        if self.ship_to_company_type:
            _dict['shipToCompanyType'] = self.ship_to_company_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax_levels (list)
        _items = []
        if self.tax_levels:
            for _item in self.tax_levels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxLevels'] = _items
        # set to None if agreement_pre_payment_flag (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_pre_payment_flag is None and "agreement_pre_payment_flag" in self.model_fields_set:
            _dict['agreementPrePaymentFlag'] = None

        # set to None if city_tax (nullable) is None
        # and model_fields_set contains the field
        if self.city_tax is None and "city_tax" in self.model_fields_set:
            _dict['cityTax'] = None

        # set to None if county_tax (nullable) is None
        # and model_fields_set contains the field
        if self.county_tax is None and "county_tax" in self.model_fields_set:
            _dict['countyTax'] = None

        # set to None if due_days (nullable) is None
        # and model_fields_set contains the field
        if self.due_days is None and "due_days" in self.model_fields_set:
            _dict['dueDays'] = None

        # set to None if email_delivery_flag (nullable) is None
        # and model_fields_set contains the field
        if self.email_delivery_flag is None and "email_delivery_flag" in self.model_fields_set:
            _dict['emailDeliveryFlag'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if piggy_back_flag (nullable) is None
        # and model_fields_set contains the field
        if self.piggy_back_flag is None and "piggy_back_flag" in self.model_fields_set:
            _dict['piggyBackFlag'] = None

        # set to None if print_delivery_flag (nullable) is None
        # and model_fields_set contains the field
        if self.print_delivery_flag is None and "print_delivery_flag" in self.model_fields_set:
            _dict['printDeliveryFlag'] = None

        # set to None if sales_tax (nullable) is None
        # and model_fields_set contains the field
        if self.sales_tax is None and "sales_tax" in self.model_fields_set:
            _dict['salesTax'] = None

        # set to None if send_avalara_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.send_avalara_tax_flag is None and "send_avalara_tax_flag" in self.model_fields_set:
            _dict['sendAvalaraTaxFlag'] = None

        # set to None if state_tax (nullable) is None
        # and model_fields_set contains the field
        if self.state_tax is None and "state_tax" in self.model_fields_set:
            _dict['stateTax'] = None

        # set to None if tax_dp_applied_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_dp_applied_flag is None and "tax_dp_applied_flag" in self.model_fields_set:
            _dict['taxDpAppliedFlag'] = None

        # set to None if tax_group_rate (nullable) is None
        # and model_fields_set contains the field
        if self.tax_group_rate is None and "tax_group_rate" in self.model_fields_set:
            _dict['taxGroupRate'] = None

        # set to None if taxable (nullable) is None
        # and model_fields_set contains the field
        if self.taxable is None and "taxable" in self.model_fields_set:
            _dict['taxable'] = None

        # set to None if taxable_amount1 (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_amount1 is None and "taxable_amount1" in self.model_fields_set:
            _dict['taxableAmount1'] = None

        # set to None if taxable_amount2 (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_amount2 is None and "taxable_amount2" in self.model_fields_set:
            _dict['taxableAmount2'] = None

        # set to None if taxable_amount3 (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_amount3 is None and "taxable_amount3" in self.model_fields_set:
            _dict['taxableAmount3'] = None

        # set to None if taxable_amount4 (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_amount4 is None and "taxable_amount4" in self.model_fields_set:
            _dict['taxableAmount4'] = None

        # set to None if taxable_amount5 (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_amount5 is None and "taxable_amount5" in self.model_fields_set:
            _dict['taxableAmount5'] = None

        # set to None if taxable_total (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_total is None and "taxable_total" in self.model_fields_set:
            _dict['taxableTotal'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if use_avalara_flag (nullable) is None
        # and model_fields_set contains the field
        if self.use_avalara_flag is None and "use_avalara_flag" in self.model_fields_set:
            _dict['useAvalaraFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GLExportTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in GLExportTransaction) in the input: " + _key)

        _obj = cls.model_validate({
            "accountNumber": obj.get("accountNumber"),
            "agreementPrePaymentFlag": obj.get("agreementPrePaymentFlag"),
            "attention": obj.get("attention"),
            "billingTerms": BillingTermsReference.from_dict(obj.get("billingTerms")) if obj.get("billingTerms") is not None else None,
            "billingTermsXref": obj.get("billingTermsXref"),
            "billingType": obj.get("billingType"),
            "cityTax": obj.get("cityTax"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "companyAccountNumber": obj.get("companyAccountNumber"),
            "companyType": CompanyTypeReference.from_dict(obj.get("companyType")) if obj.get("companyType") is not None else None,
            "countyTax": obj.get("countyTax"),
            "countyTaxXref": obj.get("countyTaxXref"),
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "description": obj.get("description"),
            "detail": [GLExportTransactionDetail.from_dict(_item) for _item in obj.get("detail")] if obj.get("detail") is not None else None,
            "documentDate": obj.get("documentDate"),
            "documentNumber": obj.get("documentNumber"),
            "documentType": obj.get("documentType"),
            "dueDate": obj.get("dueDate"),
            "dueDays": obj.get("dueDays"),
            "emailDeliveryFlag": obj.get("emailDeliveryFlag"),
            "glClass": obj.get("glClass"),
            "glEntryIds": obj.get("glEntryIds"),
            "glTypeId": obj.get("glTypeId"),
            "id": obj.get("id"),
            "memo": obj.get("memo"),
            "piggyBackFlag": obj.get("piggyBackFlag"),
            "printDeliveryFlag": obj.get("printDeliveryFlag"),
            "project": ProjectReference.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "purchaseOrder": PurchaseOrderReference.from_dict(obj.get("purchaseOrder")) if obj.get("purchaseOrder") is not None else None,
            "salesRepId": obj.get("salesRepId"),
            "salesRepName": obj.get("salesRepName"),
            "salesTax": obj.get("salesTax"),
            "salesTerritory": obj.get("salesTerritory"),
            "sendAvalaraTaxFlag": obj.get("sendAvalaraTaxFlag"),
            "shipContact": obj.get("shipContact"),
            "shipSite": SiteReference.from_dict(obj.get("shipSite")) if obj.get("shipSite") is not None else None,
            "shipToCompany": CompanyReference.from_dict(obj.get("shipToCompany")) if obj.get("shipToCompany") is not None else None,
            "shipToCompanyAccountNumber": obj.get("shipToCompanyAccountNumber"),
            "shipToCompanyType": CompanyTypeReference.from_dict(obj.get("shipToCompanyType")) if obj.get("shipToCompanyType") is not None else None,
            "shipToTaxId": obj.get("shipToTaxId"),
            "site": SiteReference.from_dict(obj.get("site")) if obj.get("site") is not None else None,
            "stateTax": obj.get("stateTax"),
            "stateTaxXref": obj.get("stateTaxXref"),
            "taxAccountNumber": obj.get("taxAccountNumber"),
            "taxAgencyXref": obj.get("taxAgencyXref"),
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "taxDpAppliedFlag": obj.get("taxDpAppliedFlag"),
            "taxGroupRate": obj.get("taxGroupRate"),
            "taxId": obj.get("taxId"),
            "taxLevels": [GLExportTransactionTaxLevel.from_dict(_item) for _item in obj.get("taxLevels")] if obj.get("taxLevels") is not None else None,
            "taxable": obj.get("taxable"),
            "taxableAmount1": obj.get("taxableAmount1"),
            "taxableAmount2": obj.get("taxableAmount2"),
            "taxableAmount3": obj.get("taxableAmount3"),
            "taxableAmount4": obj.get("taxableAmount4"),
            "taxableAmount5": obj.get("taxableAmount5"),
            "taxableTotal": obj.get("taxableTotal"),
            "total": obj.get("total"),
            "useAvalaraFlag": obj.get("useAvalaraFlag")
        })
        return _obj


