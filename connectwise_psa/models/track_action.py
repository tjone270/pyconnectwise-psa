# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.activity_status_reference import ActivityStatusReference
from connectwise_psa.models.activity_type_reference import ActivityTypeReference
from connectwise_psa.models.company_status_reference import CompanyStatusReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.group_reference import GroupReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.notification_recipient_reference import NotificationRecipientReference
from connectwise_psa.models.service_template_reference import ServiceTemplateReference
from connectwise_psa.models.track_reference import TrackReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TrackAction(BaseModel):
    """
    TrackAction
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    activity_status: Optional[ActivityStatusReference] = Field(default=None, alias="activityStatus")
    activity_type: Optional[ActivityTypeReference] = Field(default=None, alias="activityType")
    attached_track: Optional[TrackReference] = Field(default=None, alias="attachedTrack")
    bcc_contact: Optional[ContactReference] = Field(default=None, alias="bccContact")
    cc_contact: Optional[ContactReference] = Field(default=None, alias="ccContact")
    company_status: Optional[CompanyStatusReference] = Field(default=None, alias="companyStatus")
    days_to_execute: Optional[StrictInt] = Field(default=None, alias="daysToExecute")
    email_from: Optional[StrictStr] = Field(default=None, description=" Max length: 250;", alias="emailFrom")
    email_recipient: Optional[StrictStr] = Field(default=None, description=" Max length: 250;", alias="emailRecipient")
    group: Optional[GroupReference] = None
    id: Optional[StrictInt] = None
    notes: Optional[StrictStr] = None
    notify_from: Optional[NotificationRecipientReference] = Field(default=None, alias="notifyFrom")
    notify_type: StrictStr = Field(alias="notifyType")
    notify_who: Optional[NotificationRecipientReference] = Field(default=None, alias="notifyWho")
    service_template: Optional[ServiceTemplateReference] = Field(default=None, alias="serviceTemplate")
    specific_member_from: Optional[MemberReference] = Field(default=None, alias="specificMemberFrom")
    specific_member_to: Optional[MemberReference] = Field(default=None, alias="specificMemberTo")
    subject: Optional[StrictStr] = Field(default=None, description=" Max length: 100;")
    track: Optional[TrackReference] = None
    __properties: ClassVar[List[str]] = ["_info", "activityStatus", "activityType", "attachedTrack", "bccContact", "ccContact", "companyStatus", "daysToExecute", "emailFrom", "emailRecipient", "group", "id", "notes", "notifyFrom", "notifyType", "notifyWho", "serviceTemplate", "specificMemberFrom", "specificMemberTo", "subject", "track"]

    @field_validator('notify_type')
    def notify_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('CreateActivity', 'SendEmail', 'AddToGroup', 'AttachTrack', 'ChangeCompanyStatus', 'CreateServiceTicket'):
            raise ValueError("must be one of enum values ('CreateActivity', 'SendEmail', 'AddToGroup', 'AttachTrack', 'ChangeCompanyStatus', 'CreateServiceTicket')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TrackAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of activity_status
        if self.activity_status:
            _dict['activityStatus'] = self.activity_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_type
        if self.activity_type:
            _dict['activityType'] = self.activity_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attached_track
        if self.attached_track:
            _dict['attachedTrack'] = self.attached_track.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bcc_contact
        if self.bcc_contact:
            _dict['bccContact'] = self.bcc_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cc_contact
        if self.cc_contact:
            _dict['ccContact'] = self.cc_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_status
        if self.company_status:
            _dict['companyStatus'] = self.company_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notify_from
        if self.notify_from:
            _dict['notifyFrom'] = self.notify_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notify_who
        if self.notify_who:
            _dict['notifyWho'] = self.notify_who.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_template
        if self.service_template:
            _dict['serviceTemplate'] = self.service_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specific_member_from
        if self.specific_member_from:
            _dict['specificMemberFrom'] = self.specific_member_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specific_member_to
        if self.specific_member_to:
            _dict['specificMemberTo'] = self.specific_member_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of track
        if self.track:
            _dict['track'] = self.track.to_dict()
        # set to None if days_to_execute (nullable) is None
        # and model_fields_set contains the field
        if self.days_to_execute is None and "days_to_execute" in self.model_fields_set:
            _dict['daysToExecute'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TrackAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TrackAction) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "activityStatus": ActivityStatusReference.from_dict(obj.get("activityStatus")) if obj.get("activityStatus") is not None else None,
            "activityType": ActivityTypeReference.from_dict(obj.get("activityType")) if obj.get("activityType") is not None else None,
            "attachedTrack": TrackReference.from_dict(obj.get("attachedTrack")) if obj.get("attachedTrack") is not None else None,
            "bccContact": ContactReference.from_dict(obj.get("bccContact")) if obj.get("bccContact") is not None else None,
            "ccContact": ContactReference.from_dict(obj.get("ccContact")) if obj.get("ccContact") is not None else None,
            "companyStatus": CompanyStatusReference.from_dict(obj.get("companyStatus")) if obj.get("companyStatus") is not None else None,
            "daysToExecute": obj.get("daysToExecute"),
            "emailFrom": obj.get("emailFrom"),
            "emailRecipient": obj.get("emailRecipient"),
            "group": GroupReference.from_dict(obj.get("group")) if obj.get("group") is not None else None,
            "id": obj.get("id"),
            "notes": obj.get("notes"),
            "notifyFrom": NotificationRecipientReference.from_dict(obj.get("notifyFrom")) if obj.get("notifyFrom") is not None else None,
            "notifyType": obj.get("notifyType"),
            "notifyWho": NotificationRecipientReference.from_dict(obj.get("notifyWho")) if obj.get("notifyWho") is not None else None,
            "serviceTemplate": ServiceTemplateReference.from_dict(obj.get("serviceTemplate")) if obj.get("serviceTemplate") is not None else None,
            "specificMemberFrom": MemberReference.from_dict(obj.get("specificMemberFrom")) if obj.get("specificMemberFrom") is not None else None,
            "specificMemberTo": MemberReference.from_dict(obj.get("specificMemberTo")) if obj.get("specificMemberTo") is not None else None,
            "subject": obj.get("subject"),
            "track": TrackReference.from_dict(obj.get("track")) if obj.get("track") is not None else None
        })
        return _obj


