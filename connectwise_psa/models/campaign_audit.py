# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.group_reference import GroupReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CampaignAudit(BaseModel):
    """
    CampaignAudit
    """ # noqa: E501
    campaign_id: Optional[StrictInt] = Field(default=None, alias="campaignId")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated")
    documents_created: Optional[StrictInt] = Field(default=None, alias="documentsCreated")
    email_subject: Optional[StrictStr] = Field(default=None, description=" Max length: 1000;", alias="emailSubject")
    emails_sent: Optional[StrictInt] = Field(alias="emailsSent")
    emails_unsent: Optional[StrictInt] = Field(default=None, alias="emailsUnsent")
    group: Optional[GroupReference] = None
    id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["campaignId", "createdBy", "dateCreated", "documentsCreated", "emailSubject", "emailsSent", "emailsUnsent", "group", "id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CampaignAudit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # set to None if campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_id is None and "campaign_id" in self.model_fields_set:
            _dict['campaignId'] = None

        # set to None if documents_created (nullable) is None
        # and model_fields_set contains the field
        if self.documents_created is None and "documents_created" in self.model_fields_set:
            _dict['documentsCreated'] = None

        # set to None if emails_sent (nullable) is None
        # and model_fields_set contains the field
        if self.emails_sent is None and "emails_sent" in self.model_fields_set:
            _dict['emailsSent'] = None

        # set to None if emails_unsent (nullable) is None
        # and model_fields_set contains the field
        if self.emails_unsent is None and "emails_unsent" in self.model_fields_set:
            _dict['emailsUnsent'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CampaignAudit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CampaignAudit) in the input: " + _key)

        _obj = cls.model_validate({
            "campaignId": obj.get("campaignId"),
            "createdBy": obj.get("createdBy"),
            "dateCreated": obj.get("dateCreated"),
            "documentsCreated": obj.get("documentsCreated"),
            "emailSubject": obj.get("emailSubject"),
            "emailsSent": obj.get("emailsSent"),
            "emailsUnsent": obj.get("emailsUnsent"),
            "group": GroupReference.from_dict(obj.get("group")) if obj.get("group") is not None else None,
            "id": obj.get("id")
        })
        return _obj


