# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.document_reference import DocumentReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MemberInfo(BaseModel):
    """
    MemberInfo
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    default_email: Optional[StrictStr] = Field(default=None, alias="defaultEmail")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    id: Optional[StrictInt] = None
    identifier: Optional[StrictStr] = None
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    license_class: Optional[StrictStr] = Field(default=None, description="F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member", alias="licenseClass")
    middle_initial: Optional[StrictStr] = Field(default=None, alias="middleInitial")
    photo: Optional[DocumentReference] = None
    __properties: ClassVar[List[str]] = ["_info", "defaultEmail", "firstName", "fullName", "id", "identifier", "inactiveFlag", "lastName", "licenseClass", "middleInitial", "photo"]

    @field_validator('license_class')
    def license_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('A', 'C', 'F', 'X'):
            raise ValueError("must be one of enum values ('A', 'C', 'F', 'X')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MemberInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of photo
        if self.photo:
            _dict['photo'] = self.photo.to_dict()
        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if license_class (nullable) is None
        # and model_fields_set contains the field
        if self.license_class is None and "license_class" in self.model_fields_set:
            _dict['licenseClass'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MemberInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in MemberInfo) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "defaultEmail": obj.get("defaultEmail"),
            "firstName": obj.get("firstName"),
            "fullName": obj.get("fullName"),
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "lastName": obj.get("lastName"),
            "licenseClass": obj.get("licenseClass"),
            "middleInitial": obj.get("middleInitial"),
            "photo": DocumentReference.from_dict(obj.get("photo")) if obj.get("photo") is not None else None
        })
        return _obj


