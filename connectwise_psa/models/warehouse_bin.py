# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.system_department_reference import SystemDepartmentReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.warehouse_bin_reference import WarehouseBinReference
from connectwise_psa.models.warehouse_reference import WarehouseReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WarehouseBin(BaseModel):
    """
    WarehouseBin
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    company: Optional[CompanyReference] = None
    default_flag: Optional[StrictBool] = Field(default=None, alias="defaultFlag")
    department: Optional[SystemDepartmentReference] = None
    height: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictInt] = None
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    length: Optional[Union[StrictFloat, StrictInt]] = None
    location: Optional[SystemLocationReference] = None
    manager: Optional[MemberReference] = None
    max_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxQuantity")
    min_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minQuantity")
    name: StrictStr = Field(description=" Max length: 50;")
    overflow_bin: Optional[WarehouseBinReference] = Field(default=None, alias="overflowBin")
    quantity_on_hand: Optional[StrictInt] = Field(default=None, alias="quantityOnHand")
    transfer_bin: Optional[WarehouseBinReference] = Field(default=None, alias="transferBin")
    warehouse: Optional[WarehouseReference] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    width: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["_info", "company", "defaultFlag", "department", "height", "id", "inactiveFlag", "length", "location", "manager", "maxQuantity", "minQuantity", "name", "overflowBin", "quantityOnHand", "transferBin", "warehouse", "weight", "width"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WarehouseBin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manager
        if self.manager:
            _dict['manager'] = self.manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of overflow_bin
        if self.overflow_bin:
            _dict['overflowBin'] = self.overflow_bin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_bin
        if self.transfer_bin:
            _dict['transferBin'] = self.transfer_bin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse
        if self.warehouse:
            _dict['warehouse'] = self.warehouse.to_dict()
        # set to None if default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_flag is None and "default_flag" in self.model_fields_set:
            _dict['defaultFlag'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['height'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if length (nullable) is None
        # and model_fields_set contains the field
        if self.length is None and "length" in self.model_fields_set:
            _dict['length'] = None

        # set to None if max_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.max_quantity is None and "max_quantity" in self.model_fields_set:
            _dict['maxQuantity'] = None

        # set to None if min_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.min_quantity is None and "min_quantity" in self.model_fields_set:
            _dict['minQuantity'] = None

        # set to None if quantity_on_hand (nullable) is None
        # and model_fields_set contains the field
        if self.quantity_on_hand is None and "quantity_on_hand" in self.model_fields_set:
            _dict['quantityOnHand'] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['weight'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['width'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WarehouseBin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in WarehouseBin) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "defaultFlag": obj.get("defaultFlag"),
            "department": SystemDepartmentReference.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "height": obj.get("height"),
            "id": obj.get("id"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "length": obj.get("length"),
            "location": SystemLocationReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "manager": MemberReference.from_dict(obj.get("manager")) if obj.get("manager") is not None else None,
            "maxQuantity": obj.get("maxQuantity"),
            "minQuantity": obj.get("minQuantity"),
            "name": obj.get("name"),
            "overflowBin": WarehouseBinReference.from_dict(obj.get("overflowBin")) if obj.get("overflowBin") is not None else None,
            "quantityOnHand": obj.get("quantityOnHand"),
            "transferBin": WarehouseBinReference.from_dict(obj.get("transferBin")) if obj.get("transferBin") is not None else None,
            "warehouse": WarehouseReference.from_dict(obj.get("warehouse")) if obj.get("warehouse") is not None else None,
            "weight": obj.get("weight"),
            "width": obj.get("width")
        })
        return _obj


