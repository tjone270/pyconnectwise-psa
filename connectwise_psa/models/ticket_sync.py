# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.integrator_login_reference import IntegratorLoginReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TicketSync(BaseModel):
    """
    TicketSync
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    company: Optional[CompanyReference] = None
    id: Optional[StrictInt] = None
    integrator_login: Optional[IntegratorLoginReference] = Field(default=None, alias="integratorLogin")
    internal_analysis_flag: Optional[StrictBool] = Field(default=None, alias="internalAnalysisFlag")
    name: StrictStr = Field(description=" Max length: 80;")
    password: Optional[StrictStr] = None
    problem_description_flag: Optional[StrictBool] = Field(default=None, alias="problemDescriptionFlag")
    psg: Optional[StrictStr] = None
    resolution_flag: Optional[StrictBool] = Field(default=None, alias="resolutionFlag")
    url: StrictStr
    user_name: Optional[StrictStr] = Field(default=None, alias="userName")
    vendor_type: Optional[StrictStr] = Field(alias="vendorType")
    __properties: ClassVar[List[str]] = ["_info", "company", "id", "integratorLogin", "internalAnalysisFlag", "name", "password", "problemDescriptionFlag", "psg", "resolutionFlag", "url", "userName", "vendorType"]

    @field_validator('vendor_type')
    def vendor_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Zenith'):
            raise ValueError("must be one of enum values ('Zenith')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TicketSync from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integrator_login
        if self.integrator_login:
            _dict['integratorLogin'] = self.integrator_login.to_dict()
        # set to None if internal_analysis_flag (nullable) is None
        # and model_fields_set contains the field
        if self.internal_analysis_flag is None and "internal_analysis_flag" in self.model_fields_set:
            _dict['internalAnalysisFlag'] = None

        # set to None if problem_description_flag (nullable) is None
        # and model_fields_set contains the field
        if self.problem_description_flag is None and "problem_description_flag" in self.model_fields_set:
            _dict['problemDescriptionFlag'] = None

        # set to None if resolution_flag (nullable) is None
        # and model_fields_set contains the field
        if self.resolution_flag is None and "resolution_flag" in self.model_fields_set:
            _dict['resolutionFlag'] = None

        # set to None if vendor_type (nullable) is None
        # and model_fields_set contains the field
        if self.vendor_type is None and "vendor_type" in self.model_fields_set:
            _dict['vendorType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TicketSync from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TicketSync) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "id": obj.get("id"),
            "integratorLogin": IntegratorLoginReference.from_dict(obj.get("integratorLogin")) if obj.get("integratorLogin") is not None else None,
            "internalAnalysisFlag": obj.get("internalAnalysisFlag"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "problemDescriptionFlag": obj.get("problemDescriptionFlag"),
            "psg": obj.get("psg"),
            "resolutionFlag": obj.get("resolutionFlag"),
            "url": obj.get("url"),
            "userName": obj.get("userName"),
            "vendorType": obj.get("vendorType")
        })
        return _obj


