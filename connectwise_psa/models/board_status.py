# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.board_reference import BoardReference
from connectwise_psa.models.service_email_template_reference import ServiceEmailTemplateReference
from connectwise_psa.models.status_indicator_reference import StatusIndicatorReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BoardStatus(BaseModel):
    """
    BoardStatus
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    board: Optional[BoardReference] = None
    closed_status: Optional[StrictBool] = Field(default=None, alias="closedStatus")
    custom_status_indicator_name: Optional[StrictStr] = Field(default=None, description=" Max length: 30;", alias="customStatusIndicatorName")
    customer_portal_description: Optional[StrictStr] = Field(default=None, description=" Max length: 500;", alias="customerPortalDescription")
    customer_portal_flag: Optional[StrictBool] = Field(default=None, alias="customerPortalFlag")
    default_flag: Optional[StrictBool] = Field(default=None, alias="defaultFlag")
    display_on_board: Optional[StrictBool] = Field(default=None, alias="displayOnBoard")
    email_template: Optional[ServiceEmailTemplateReference] = Field(default=None, alias="emailTemplate")
    escalation_status: Optional[StrictStr] = Field(default=None, alias="escalationStatus")
    id: Optional[StrictInt] = None
    inactive: Optional[StrictBool] = None
    name: StrictStr = Field(description=" Max length: 50;")
    round_robin_catchall: Optional[StrictBool] = Field(default=None, alias="roundRobinCatchall")
    save_time_as_note: Optional[StrictBool] = Field(default=None, alias="saveTimeAsNote")
    sort_order: Optional[StrictInt] = Field(default=None, alias="sortOrder")
    status_indicator: Optional[StatusIndicatorReference] = Field(default=None, alias="statusIndicator")
    time_entry_not_allowed: Optional[StrictBool] = Field(default=None, alias="timeEntryNotAllowed")
    __properties: ClassVar[List[str]] = ["_info", "board", "closedStatus", "customStatusIndicatorName", "customerPortalDescription", "customerPortalFlag", "defaultFlag", "displayOnBoard", "emailTemplate", "escalationStatus", "id", "inactive", "name", "roundRobinCatchall", "saveTimeAsNote", "sortOrder", "statusIndicator", "timeEntryNotAllowed"]

    @field_validator('escalation_status')
    def escalation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NotResponded', 'Responded', 'ResolutionPlan', 'Resolved', 'NoEscalation'):
            raise ValueError("must be one of enum values ('NotResponded', 'Responded', 'ResolutionPlan', 'Resolved', 'NoEscalation')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BoardStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of board
        if self.board:
            _dict['board'] = self.board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_template
        if self.email_template:
            _dict['emailTemplate'] = self.email_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status_indicator
        if self.status_indicator:
            _dict['statusIndicator'] = self.status_indicator.to_dict()
        # set to None if closed_status (nullable) is None
        # and model_fields_set contains the field
        if self.closed_status is None and "closed_status" in self.model_fields_set:
            _dict['closedStatus'] = None

        # set to None if customer_portal_flag (nullable) is None
        # and model_fields_set contains the field
        if self.customer_portal_flag is None and "customer_portal_flag" in self.model_fields_set:
            _dict['customerPortalFlag'] = None

        # set to None if default_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_flag is None and "default_flag" in self.model_fields_set:
            _dict['defaultFlag'] = None

        # set to None if display_on_board (nullable) is None
        # and model_fields_set contains the field
        if self.display_on_board is None and "display_on_board" in self.model_fields_set:
            _dict['displayOnBoard'] = None

        # set to None if escalation_status (nullable) is None
        # and model_fields_set contains the field
        if self.escalation_status is None and "escalation_status" in self.model_fields_set:
            _dict['escalationStatus'] = None

        # set to None if inactive (nullable) is None
        # and model_fields_set contains the field
        if self.inactive is None and "inactive" in self.model_fields_set:
            _dict['inactive'] = None

        # set to None if round_robin_catchall (nullable) is None
        # and model_fields_set contains the field
        if self.round_robin_catchall is None and "round_robin_catchall" in self.model_fields_set:
            _dict['roundRobinCatchall'] = None

        # set to None if save_time_as_note (nullable) is None
        # and model_fields_set contains the field
        if self.save_time_as_note is None and "save_time_as_note" in self.model_fields_set:
            _dict['saveTimeAsNote'] = None

        # set to None if sort_order (nullable) is None
        # and model_fields_set contains the field
        if self.sort_order is None and "sort_order" in self.model_fields_set:
            _dict['sortOrder'] = None

        # set to None if time_entry_not_allowed (nullable) is None
        # and model_fields_set contains the field
        if self.time_entry_not_allowed is None and "time_entry_not_allowed" in self.model_fields_set:
            _dict['timeEntryNotAllowed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BoardStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in BoardStatus) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "board": BoardReference.from_dict(obj.get("board")) if obj.get("board") is not None else None,
            "closedStatus": obj.get("closedStatus"),
            "customStatusIndicatorName": obj.get("customStatusIndicatorName"),
            "customerPortalDescription": obj.get("customerPortalDescription"),
            "customerPortalFlag": obj.get("customerPortalFlag"),
            "defaultFlag": obj.get("defaultFlag"),
            "displayOnBoard": obj.get("displayOnBoard"),
            "emailTemplate": ServiceEmailTemplateReference.from_dict(obj.get("emailTemplate")) if obj.get("emailTemplate") is not None else None,
            "escalationStatus": obj.get("escalationStatus"),
            "id": obj.get("id"),
            "inactive": obj.get("inactive"),
            "name": obj.get("name"),
            "roundRobinCatchall": obj.get("roundRobinCatchall"),
            "saveTimeAsNote": obj.get("saveTimeAsNote"),
            "sortOrder": obj.get("sortOrder"),
            "statusIndicator": StatusIndicatorReference.from_dict(obj.get("statusIndicator")) if obj.get("statusIndicator") is not None else None,
            "timeEntryNotAllowed": obj.get("timeEntryNotAllowed")
        })
        return _obj


