# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.company_type_reference import CompanyTypeReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.gl_export_purchase_transaction_detail import GLExportPurchaseTransactionDetail
from connectwise_psa.models.gl_export_purchase_transaction_detail_tax import GLExportPurchaseTransactionDetailTax
from connectwise_psa.models.gl_export_purchase_transaction_tax_level import GLExportPurchaseTransactionTaxLevel
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GLExportPurchaseTransaction(BaseModel):
    """
    GLExportPurchaseTransaction
    """ # noqa: E501
    ap_account_number: Optional[StrictStr] = Field(default=None, alias="apAccountNumber")
    billing_terms: Optional[BillingTermsReference] = Field(default=None, alias="billingTerms")
    billing_terms_xref: Optional[StrictStr] = Field(default=None, alias="billingTermsXref")
    city_tax_xref: Optional[StrictStr] = Field(default=None, alias="cityTaxXref")
    company: Optional[CompanyReference] = None
    company_type: Optional[CompanyTypeReference] = Field(default=None, alias="companyType")
    contact: Optional[ContactReference] = None
    county_tax_xref: Optional[StrictStr] = Field(default=None, alias="countyTaxXref")
    currency: Optional[CurrencyReference] = None
    description: Optional[StrictStr] = None
    document_date: Optional[StrictStr] = Field(default=None, alias="documentDate")
    document_number: Optional[StrictStr] = Field(default=None, alias="documentNumber")
    dropship_flag: Optional[StrictBool] = Field(default=None, alias="dropshipFlag")
    due_days: Optional[StrictInt] = Field(default=None, alias="dueDays")
    freight_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freightAmount")
    freight_packing_slip: Optional[StrictStr] = Field(default=None, alias="freightPackingSlip")
    id: Optional[StrictStr] = None
    memo: Optional[StrictStr] = None
    packing_slip: Optional[StrictStr] = Field(default=None, alias="packingSlip")
    purchase_class: Optional[StrictStr] = Field(default=None, alias="purchaseClass")
    purchase_date: Optional[StrictStr] = Field(default=None, alias="purchaseDate")
    purchase_detail: Optional[List[GLExportPurchaseTransactionDetail]] = Field(default=None, alias="purchaseDetail")
    purchase_detail_tax: Optional[List[GLExportPurchaseTransactionDetailTax]] = Field(default=None, alias="purchaseDetailTax")
    purchase_header_freight_taxable_flag: Optional[StrictBool] = Field(default=None, alias="purchaseHeaderFreightTaxableFlag")
    purchase_header_tax_group: Optional[StrictStr] = Field(default=None, alias="purchaseHeaderTaxGroup")
    purchase_header_taxable_flag: Optional[StrictBool] = Field(default=None, alias="purchaseHeaderTaxableFlag")
    ship_to_company: Optional[CompanyReference] = Field(default=None, alias="shipToCompany")
    ship_to_company_account_number: Optional[StrictStr] = Field(default=None, alias="shipToCompanyAccountNumber")
    ship_to_company_type: Optional[CompanyTypeReference] = Field(default=None, alias="shipToCompanyType")
    ship_to_contact: Optional[ContactReference] = Field(default=None, alias="shipToContact")
    ship_to_site: Optional[SiteReference] = Field(default=None, alias="shipToSite")
    ship_to_tax_group: Optional[StrictStr] = Field(default=None, alias="shipToTaxGroup")
    site: Optional[SiteReference] = None
    state_tax_xref: Optional[StrictStr] = Field(default=None, alias="stateTaxXref")
    tax_agency_xref: Optional[StrictStr] = Field(default=None, alias="taxAgencyXref")
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    tax_group_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxGroupRate")
    tax_levels: Optional[List[GLExportPurchaseTransactionTaxLevel]] = Field(default=None, alias="taxLevels")
    total: Optional[Union[StrictFloat, StrictInt]] = None
    use_avalara_tax_flag: Optional[StrictBool] = Field(default=None, alias="useAvalaraTaxFlag")
    vendor_account_number: Optional[StrictStr] = Field(default=None, alias="vendorAccountNumber")
    vendor_invoice_date: Optional[StrictStr] = Field(default=None, alias="vendorInvoiceDate")
    vendor_invoice_number: Optional[StrictStr] = Field(default=None, alias="vendorInvoiceNumber")
    vendor_number: Optional[StrictStr] = Field(default=None, alias="vendorNumber")
    __properties: ClassVar[List[str]] = ["apAccountNumber", "billingTerms", "billingTermsXref", "cityTaxXref", "company", "companyType", "contact", "countyTaxXref", "currency", "description", "documentDate", "documentNumber", "dropshipFlag", "dueDays", "freightAmount", "freightPackingSlip", "id", "memo", "packingSlip", "purchaseClass", "purchaseDate", "purchaseDetail", "purchaseDetailTax", "purchaseHeaderFreightTaxableFlag", "purchaseHeaderTaxGroup", "purchaseHeaderTaxableFlag", "shipToCompany", "shipToCompanyAccountNumber", "shipToCompanyType", "shipToContact", "shipToSite", "shipToTaxGroup", "site", "stateTaxXref", "taxAgencyXref", "taxCode", "taxGroupRate", "taxLevels", "total", "useAvalaraTaxFlag", "vendorAccountNumber", "vendorInvoiceDate", "vendorInvoiceNumber", "vendorNumber"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GLExportPurchaseTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_terms
        if self.billing_terms:
            _dict['billingTerms'] = self.billing_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_type
        if self.company_type:
            _dict['companyType'] = self.company_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in purchase_detail (list)
        _items = []
        if self.purchase_detail:
            for _item in self.purchase_detail:
                if _item:
                    _items.append(_item.to_dict())
            _dict['purchaseDetail'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in purchase_detail_tax (list)
        _items = []
        if self.purchase_detail_tax:
            for _item in self.purchase_detail_tax:
                if _item:
                    _items.append(_item.to_dict())
            _dict['purchaseDetailTax'] = _items
        # override the default output from pydantic by calling `to_dict()` of ship_to_company
        if self.ship_to_company:
            _dict['shipToCompany'] = self.ship_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_company_type
        if self.ship_to_company_type:
            _dict['shipToCompanyType'] = self.ship_to_company_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_contact
        if self.ship_to_contact:
            _dict['shipToContact'] = self.ship_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_site
        if self.ship_to_site:
            _dict['shipToSite'] = self.ship_to_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax_levels (list)
        _items = []
        if self.tax_levels:
            for _item in self.tax_levels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxLevels'] = _items
        # set to None if dropship_flag (nullable) is None
        # and model_fields_set contains the field
        if self.dropship_flag is None and "dropship_flag" in self.model_fields_set:
            _dict['dropshipFlag'] = None

        # set to None if due_days (nullable) is None
        # and model_fields_set contains the field
        if self.due_days is None and "due_days" in self.model_fields_set:
            _dict['dueDays'] = None

        # set to None if freight_amount (nullable) is None
        # and model_fields_set contains the field
        if self.freight_amount is None and "freight_amount" in self.model_fields_set:
            _dict['freightAmount'] = None

        # set to None if purchase_header_freight_taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_header_freight_taxable_flag is None and "purchase_header_freight_taxable_flag" in self.model_fields_set:
            _dict['purchaseHeaderFreightTaxableFlag'] = None

        # set to None if purchase_header_taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_header_taxable_flag is None and "purchase_header_taxable_flag" in self.model_fields_set:
            _dict['purchaseHeaderTaxableFlag'] = None

        # set to None if tax_group_rate (nullable) is None
        # and model_fields_set contains the field
        if self.tax_group_rate is None and "tax_group_rate" in self.model_fields_set:
            _dict['taxGroupRate'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if use_avalara_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.use_avalara_tax_flag is None and "use_avalara_tax_flag" in self.model_fields_set:
            _dict['useAvalaraTaxFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GLExportPurchaseTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in GLExportPurchaseTransaction) in the input: " + _key)

        _obj = cls.model_validate({
            "apAccountNumber": obj.get("apAccountNumber"),
            "billingTerms": BillingTermsReference.from_dict(obj.get("billingTerms")) if obj.get("billingTerms") is not None else None,
            "billingTermsXref": obj.get("billingTermsXref"),
            "cityTaxXref": obj.get("cityTaxXref"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "companyType": CompanyTypeReference.from_dict(obj.get("companyType")) if obj.get("companyType") is not None else None,
            "contact": ContactReference.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "countyTaxXref": obj.get("countyTaxXref"),
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "description": obj.get("description"),
            "documentDate": obj.get("documentDate"),
            "documentNumber": obj.get("documentNumber"),
            "dropshipFlag": obj.get("dropshipFlag"),
            "dueDays": obj.get("dueDays"),
            "freightAmount": obj.get("freightAmount"),
            "freightPackingSlip": obj.get("freightPackingSlip"),
            "id": obj.get("id"),
            "memo": obj.get("memo"),
            "packingSlip": obj.get("packingSlip"),
            "purchaseClass": obj.get("purchaseClass"),
            "purchaseDate": obj.get("purchaseDate"),
            "purchaseDetail": [GLExportPurchaseTransactionDetail.from_dict(_item) for _item in obj.get("purchaseDetail")] if obj.get("purchaseDetail") is not None else None,
            "purchaseDetailTax": [GLExportPurchaseTransactionDetailTax.from_dict(_item) for _item in obj.get("purchaseDetailTax")] if obj.get("purchaseDetailTax") is not None else None,
            "purchaseHeaderFreightTaxableFlag": obj.get("purchaseHeaderFreightTaxableFlag"),
            "purchaseHeaderTaxGroup": obj.get("purchaseHeaderTaxGroup"),
            "purchaseHeaderTaxableFlag": obj.get("purchaseHeaderTaxableFlag"),
            "shipToCompany": CompanyReference.from_dict(obj.get("shipToCompany")) if obj.get("shipToCompany") is not None else None,
            "shipToCompanyAccountNumber": obj.get("shipToCompanyAccountNumber"),
            "shipToCompanyType": CompanyTypeReference.from_dict(obj.get("shipToCompanyType")) if obj.get("shipToCompanyType") is not None else None,
            "shipToContact": ContactReference.from_dict(obj.get("shipToContact")) if obj.get("shipToContact") is not None else None,
            "shipToSite": SiteReference.from_dict(obj.get("shipToSite")) if obj.get("shipToSite") is not None else None,
            "shipToTaxGroup": obj.get("shipToTaxGroup"),
            "site": SiteReference.from_dict(obj.get("site")) if obj.get("site") is not None else None,
            "stateTaxXref": obj.get("stateTaxXref"),
            "taxAgencyXref": obj.get("taxAgencyXref"),
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "taxGroupRate": obj.get("taxGroupRate"),
            "taxLevels": [GLExportPurchaseTransactionTaxLevel.from_dict(_item) for _item in obj.get("taxLevels")] if obj.get("taxLevels") is not None else None,
            "total": obj.get("total"),
            "useAvalaraTaxFlag": obj.get("useAvalaraTaxFlag"),
            "vendorAccountNumber": obj.get("vendorAccountNumber"),
            "vendorInvoiceDate": obj.get("vendorInvoiceDate"),
            "vendorInvoiceNumber": obj.get("vendorInvoiceNumber"),
            "vendorNumber": obj.get("vendorNumber")
        })
        return _obj


