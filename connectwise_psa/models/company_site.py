# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.calendar_reference import CalendarReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.country_reference import CountryReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.entity_type_reference import EntityTypeReference
from connectwise_psa.models.state_reference import StateReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
from connectwise_psa.models.time_zone_setup_reference import TimeZoneSetupReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompanySite(BaseModel):
    """
    CompanySite
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    address_format: Optional[StrictStr] = Field(default=None, alias="addressFormat")
    address_line1: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="addressLine2")
    bill_separate_flag: Optional[StrictBool] = Field(default=None, alias="billSeparateFlag")
    calendar: Optional[CalendarReference] = None
    city: Optional[StrictStr] = Field(default=None, description=" Max length: 50;")
    company: Optional[CompanyReference] = None
    country: Optional[CountryReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    default_billing_flag: Optional[StrictBool] = Field(default=None, alias="defaultBillingFlag")
    default_mailing_flag: Optional[StrictBool] = Field(default=None, alias="defaultMailingFlag")
    default_shipping_flag: Optional[StrictBool] = Field(default=None, alias="defaultShippingFlag")
    entity_type: Optional[EntityTypeReference] = Field(default=None, alias="entityType")
    expense_reimbursement: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="expenseReimbursement")
    fax_number: Optional[StrictStr] = Field(default=None, description=" Max length: 30;", alias="faxNumber")
    id: Optional[StrictInt] = None
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    mobile_guid: Optional[StrictStr] = Field(default=None, alias="mobileGuid")
    name: StrictStr = Field(description=" Max length: 50;")
    phone_number: Optional[StrictStr] = Field(default=None, description=" Max length: 30;", alias="phoneNumber")
    phone_number_ext: Optional[StrictStr] = Field(default=None, description=" Max length: 30;", alias="phoneNumberExt")
    primary_address_flag: Optional[StrictBool] = Field(default=None, alias="primaryAddressFlag")
    state_reference: Optional[StateReference] = Field(default=None, alias="stateReference")
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    time_zone: Optional[TimeZoneSetupReference] = Field(default=None, alias="timeZone")
    zip: Optional[StrictStr] = Field(default=None, description=" Max length: 12;")
    __properties: ClassVar[List[str]] = ["_info", "addressFormat", "addressLine1", "addressLine2", "billSeparateFlag", "calendar", "city", "company", "country", "customFields", "defaultBillingFlag", "defaultMailingFlag", "defaultShippingFlag", "entityType", "expenseReimbursement", "faxNumber", "id", "inactiveFlag", "mobileGuid", "name", "phoneNumber", "phoneNumberExt", "primaryAddressFlag", "stateReference", "taxCode", "timeZone", "zip"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompanySite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calendar
        if self.calendar:
            _dict['calendar'] = self.calendar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of entity_type
        if self.entity_type:
            _dict['entityType'] = self.entity_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_reference
        if self.state_reference:
            _dict['stateReference'] = self.state_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_zone
        if self.time_zone:
            _dict['timeZone'] = self.time_zone.to_dict()
        # set to None if bill_separate_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_separate_flag is None and "bill_separate_flag" in self.model_fields_set:
            _dict['billSeparateFlag'] = None

        # set to None if default_billing_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_billing_flag is None and "default_billing_flag" in self.model_fields_set:
            _dict['defaultBillingFlag'] = None

        # set to None if default_mailing_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_mailing_flag is None and "default_mailing_flag" in self.model_fields_set:
            _dict['defaultMailingFlag'] = None

        # set to None if default_shipping_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_shipping_flag is None and "default_shipping_flag" in self.model_fields_set:
            _dict['defaultShippingFlag'] = None

        # set to None if expense_reimbursement (nullable) is None
        # and model_fields_set contains the field
        if self.expense_reimbursement is None and "expense_reimbursement" in self.model_fields_set:
            _dict['expenseReimbursement'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if mobile_guid (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_guid is None and "mobile_guid" in self.model_fields_set:
            _dict['mobileGuid'] = None

        # set to None if primary_address_flag (nullable) is None
        # and model_fields_set contains the field
        if self.primary_address_flag is None and "primary_address_flag" in self.model_fields_set:
            _dict['primaryAddressFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompanySite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CompanySite) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "addressFormat": obj.get("addressFormat"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "billSeparateFlag": obj.get("billSeparateFlag"),
            "calendar": CalendarReference.from_dict(obj.get("calendar")) if obj.get("calendar") is not None else None,
            "city": obj.get("city"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "country": CountryReference.from_dict(obj.get("country")) if obj.get("country") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "defaultBillingFlag": obj.get("defaultBillingFlag"),
            "defaultMailingFlag": obj.get("defaultMailingFlag"),
            "defaultShippingFlag": obj.get("defaultShippingFlag"),
            "entityType": EntityTypeReference.from_dict(obj.get("entityType")) if obj.get("entityType") is not None else None,
            "expenseReimbursement": obj.get("expenseReimbursement"),
            "faxNumber": obj.get("faxNumber"),
            "id": obj.get("id"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "mobileGuid": obj.get("mobileGuid"),
            "name": obj.get("name"),
            "phoneNumber": obj.get("phoneNumber"),
            "phoneNumberExt": obj.get("phoneNumberExt"),
            "primaryAddressFlag": obj.get("primaryAddressFlag"),
            "stateReference": StateReference.from_dict(obj.get("stateReference")) if obj.get("stateReference") is not None else None,
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "timeZone": TimeZoneSetupReference.from_dict(obj.get("timeZone")) if obj.get("timeZone") is not None else None,
            "zip": obj.get("zip")
        })
        return _obj


