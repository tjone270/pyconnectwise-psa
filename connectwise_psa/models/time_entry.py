# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.agreement_reference import AgreementReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.invoice_reference import InvoiceReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.project_phase_reference import ProjectPhaseReference
from connectwise_psa.models.project_reference import ProjectReference
from connectwise_psa.models.ticket_reference import TicketReference
from connectwise_psa.models.time_sheet_reference import TimeSheetReference
from connectwise_psa.models.work_role_reference import WorkRoleReference
from connectwise_psa.models.work_type_reference import WorkTypeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TimeEntry(BaseModel):
    """
    TimeEntry
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    actual_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualHours")
    add_to_detail_description_flag: Optional[StrictBool] = Field(default=None, alias="addToDetailDescriptionFlag")
    add_to_internal_analysis_flag: Optional[StrictBool] = Field(default=None, alias="addToInternalAnalysisFlag")
    add_to_resolution_flag: Optional[StrictBool] = Field(default=None, alias="addToResolutionFlag")
    agreement: Optional[AgreementReference] = None
    agreement_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="agreementAmount")
    agreement_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="agreementHours")
    billable_option: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billableOption")
    business_unit_id: Optional[StrictInt] = Field(default=None, alias="businessUnitId")
    charge_to_id: Optional[StrictInt] = Field(default=None, description="If chargeToId is not specified, we asume you enter time against the company specified", alias="chargeToId")
    charge_to_type: Optional[StrictStr] = Field(default=None, description="If chargeToId is not specified, we asume you enter time against the company specified", alias="chargeToType")
    company: Optional[CompanyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    date_entered: Optional[datetime] = Field(default=None, alias="dateEntered")
    email_cc: Optional[StrictStr] = Field(default=None, description="To update this value use the /service/tickets endpoint automaticEmailCc field", alias="emailCc")
    email_cc_flag: Optional[StrictBool] = Field(default=None, description="This is an action flag. To update this value use the /service/tickets endpoint automaticEmailCcFlag field", alias="emailCcFlag")
    email_contact_flag: Optional[StrictBool] = Field(default=None, description="This is an action flag. To update this value use the /service/tickets endpoint automaticEmailContactFlag field", alias="emailContactFlag")
    email_resource_flag: Optional[StrictBool] = Field(default=None, description="This is an action flag. To update this value use the /service/tickets endpoint automaticEmailResourceFlag field", alias="emailResourceFlag")
    entered_by: Optional[StrictStr] = Field(default=None, alias="enteredBy")
    hourly_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This field may only be Updated, it is defaulted on Create", alias="hourlyRate")
    hours_billed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="hoursBilled")
    hours_deduct: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="hoursDeduct")
    id: Optional[StrictInt] = None
    internal_notes: Optional[StrictStr] = Field(default=None, alias="internalNotes")
    invoice: Optional[InvoiceReference] = None
    invoice_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="invoiceHours")
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    member: Optional[MemberReference] = None
    mobile_guid: Optional[StrictStr] = Field(default=None, alias="mobileGuid")
    notes: Optional[StrictStr] = None
    overage_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="overageRate")
    phase: Optional[ProjectPhaseReference] = None
    project: Optional[ProjectReference] = None
    status: Optional[StrictStr] = None
    ticket: Optional[TicketReference] = None
    time_end: Optional[datetime] = Field(default=None, alias="timeEnd")
    time_sheet: Optional[TimeSheetReference] = Field(default=None, alias="timeSheet")
    time_start: datetime = Field(alias="timeStart")
    work_role: Optional[WorkRoleReference] = Field(default=None, alias="workRole")
    work_type: Optional[WorkTypeReference] = Field(default=None, alias="workType")
    __properties: ClassVar[List[str]] = ["_info", "actualHours", "addToDetailDescriptionFlag", "addToInternalAnalysisFlag", "addToResolutionFlag", "agreement", "agreementAmount", "agreementHours", "billableOption", "businessUnitId", "chargeToId", "chargeToType", "company", "customFields", "dateEntered", "emailCc", "emailCcFlag", "emailContactFlag", "emailResourceFlag", "enteredBy", "hourlyRate", "hoursBilled", "hoursDeduct", "id", "internalNotes", "invoice", "invoiceHours", "locationId", "member", "mobileGuid", "notes", "overageRate", "phase", "project", "status", "ticket", "timeEnd", "timeSheet", "timeStart", "workRole", "workType"]

    @field_validator('billable_option')
    def billable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('charge_to_type')
    def charge_to_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity'):
            raise ValueError("must be one of enum values ('ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Open', 'Rejected', 'PendingApproval', 'ErrorsCorrected', 'PendingProjectApproval', 'ApprovedByTierOne', 'RejectBySecondTier', 'ApprovedByTierTwo', 'ReadyToBill', 'Billed', 'WrittenOff', 'BilledAgreement'):
            raise ValueError("must be one of enum values ('Open', 'Rejected', 'PendingApproval', 'ErrorsCorrected', 'PendingProjectApproval', 'ApprovedByTierOne', 'RejectBySecondTier', 'ApprovedByTierTwo', 'ReadyToBill', 'Billed', 'WrittenOff', 'BilledAgreement')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimeEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement
        if self.agreement:
            _dict['agreement'] = self.agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phase
        if self.phase:
            _dict['phase'] = self.phase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket
        if self.ticket:
            _dict['ticket'] = self.ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_sheet
        if self.time_sheet:
            _dict['timeSheet'] = self.time_sheet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_role
        if self.work_role:
            _dict['workRole'] = self.work_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_type
        if self.work_type:
            _dict['workType'] = self.work_type.to_dict()
        # set to None if actual_hours (nullable) is None
        # and model_fields_set contains the field
        if self.actual_hours is None and "actual_hours" in self.model_fields_set:
            _dict['actualHours'] = None

        # set to None if add_to_detail_description_flag (nullable) is None
        # and model_fields_set contains the field
        if self.add_to_detail_description_flag is None and "add_to_detail_description_flag" in self.model_fields_set:
            _dict['addToDetailDescriptionFlag'] = None

        # set to None if add_to_internal_analysis_flag (nullable) is None
        # and model_fields_set contains the field
        if self.add_to_internal_analysis_flag is None and "add_to_internal_analysis_flag" in self.model_fields_set:
            _dict['addToInternalAnalysisFlag'] = None

        # set to None if add_to_resolution_flag (nullable) is None
        # and model_fields_set contains the field
        if self.add_to_resolution_flag is None and "add_to_resolution_flag" in self.model_fields_set:
            _dict['addToResolutionFlag'] = None

        # set to None if agreement_amount (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_amount is None and "agreement_amount" in self.model_fields_set:
            _dict['agreementAmount'] = None

        # set to None if agreement_hours (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_hours is None and "agreement_hours" in self.model_fields_set:
            _dict['agreementHours'] = None

        # set to None if billable_option (nullable) is None
        # and model_fields_set contains the field
        if self.billable_option is None and "billable_option" in self.model_fields_set:
            _dict['billableOption'] = None

        # set to None if business_unit_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_unit_id is None and "business_unit_id" in self.model_fields_set:
            _dict['businessUnitId'] = None

        # set to None if charge_to_id (nullable) is None
        # and model_fields_set contains the field
        if self.charge_to_id is None and "charge_to_id" in self.model_fields_set:
            _dict['chargeToId'] = None

        # set to None if charge_to_type (nullable) is None
        # and model_fields_set contains the field
        if self.charge_to_type is None and "charge_to_type" in self.model_fields_set:
            _dict['chargeToType'] = None

        # set to None if email_cc_flag (nullable) is None
        # and model_fields_set contains the field
        if self.email_cc_flag is None and "email_cc_flag" in self.model_fields_set:
            _dict['emailCcFlag'] = None

        # set to None if email_contact_flag (nullable) is None
        # and model_fields_set contains the field
        if self.email_contact_flag is None and "email_contact_flag" in self.model_fields_set:
            _dict['emailContactFlag'] = None

        # set to None if email_resource_flag (nullable) is None
        # and model_fields_set contains the field
        if self.email_resource_flag is None and "email_resource_flag" in self.model_fields_set:
            _dict['emailResourceFlag'] = None

        # set to None if hourly_rate (nullable) is None
        # and model_fields_set contains the field
        if self.hourly_rate is None and "hourly_rate" in self.model_fields_set:
            _dict['hourlyRate'] = None

        # set to None if hours_billed (nullable) is None
        # and model_fields_set contains the field
        if self.hours_billed is None and "hours_billed" in self.model_fields_set:
            _dict['hoursBilled'] = None

        # set to None if hours_deduct (nullable) is None
        # and model_fields_set contains the field
        if self.hours_deduct is None and "hours_deduct" in self.model_fields_set:
            _dict['hoursDeduct'] = None

        # set to None if invoice_hours (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_hours is None and "invoice_hours" in self.model_fields_set:
            _dict['invoiceHours'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if mobile_guid (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_guid is None and "mobile_guid" in self.model_fields_set:
            _dict['mobileGuid'] = None

        # set to None if overage_rate (nullable) is None
        # and model_fields_set contains the field
        if self.overage_rate is None and "overage_rate" in self.model_fields_set:
            _dict['overageRate'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TimeEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TimeEntry) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "actualHours": obj.get("actualHours"),
            "addToDetailDescriptionFlag": obj.get("addToDetailDescriptionFlag"),
            "addToInternalAnalysisFlag": obj.get("addToInternalAnalysisFlag"),
            "addToResolutionFlag": obj.get("addToResolutionFlag"),
            "agreement": AgreementReference.from_dict(obj.get("agreement")) if obj.get("agreement") is not None else None,
            "agreementAmount": obj.get("agreementAmount"),
            "agreementHours": obj.get("agreementHours"),
            "billableOption": obj.get("billableOption"),
            "businessUnitId": obj.get("businessUnitId"),
            "chargeToId": obj.get("chargeToId"),
            "chargeToType": obj.get("chargeToType"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "dateEntered": obj.get("dateEntered"),
            "emailCc": obj.get("emailCc"),
            "emailCcFlag": obj.get("emailCcFlag"),
            "emailContactFlag": obj.get("emailContactFlag"),
            "emailResourceFlag": obj.get("emailResourceFlag"),
            "enteredBy": obj.get("enteredBy"),
            "hourlyRate": obj.get("hourlyRate"),
            "hoursBilled": obj.get("hoursBilled"),
            "hoursDeduct": obj.get("hoursDeduct"),
            "id": obj.get("id"),
            "internalNotes": obj.get("internalNotes"),
            "invoice": InvoiceReference.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "invoiceHours": obj.get("invoiceHours"),
            "locationId": obj.get("locationId"),
            "member": MemberReference.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "mobileGuid": obj.get("mobileGuid"),
            "notes": obj.get("notes"),
            "overageRate": obj.get("overageRate"),
            "phase": ProjectPhaseReference.from_dict(obj.get("phase")) if obj.get("phase") is not None else None,
            "project": ProjectReference.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "status": obj.get("status"),
            "ticket": TicketReference.from_dict(obj.get("ticket")) if obj.get("ticket") is not None else None,
            "timeEnd": obj.get("timeEnd"),
            "timeSheet": TimeSheetReference.from_dict(obj.get("timeSheet")) if obj.get("timeSheet") is not None else None,
            "timeStart": obj.get("timeStart"),
            "workRole": WorkRoleReference.from_dict(obj.get("workRole")) if obj.get("workRole") is not None else None,
            "workType": WorkTypeReference.from_dict(obj.get("workType")) if obj.get("workType") is not None else None
        })
        return _obj


