# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SsoConfiguration(BaseModel):
    """
    SsoConfiguration
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    all_members_submitted: Optional[StrictBool] = Field(default=None, alias="allMembersSubmitted")
    client_id: Optional[StrictStr] = Field(default=None, description="Client identity for this configuration of ConnectWise SSO Max length: 1000;", alias="clientId")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier of the SSO Configuration")
    inactive_flag: Optional[StrictBool] = Field(default=None, description="Whether the SSO configuration is not active", alias="inactiveFlag")
    is_sso_on_by_default: Optional[StrictBool] = Field(default=None, alias="isSsoOnByDefault")
    location_ids: List[StrictInt] = Field(description="The locations where the SAML Idp Configuration is used", alias="locationIds")
    name: StrictStr = Field(description="Descriptor of the SSO Configuration Max length: 100;")
    saml_certificate_issued_to: Optional[StrictStr] = Field(default=None, description="Who the SAML certificate was issued to. Metadata on SAML_Idp_Certificate", alias="samlCertificateIssuedTo")
    saml_certificate_name: Optional[StrictStr] = Field(default=None, description="Name of the SAML certificate. Metadata on SAML_Idp_Certificate", alias="samlCertificateName")
    saml_certificate_thumbprint: Optional[StrictStr] = Field(default=None, description="Thumbprint of the SAML certificate. Metadata on SAML_Idp_Certificate", alias="samlCertificateThumbprint")
    saml_certificate_valid_from: Optional[datetime] = Field(default=None, description="Date when the SAML certificate becomes valid. Metadata on SAML_Idp_Certificate", alias="samlCertificateValidFrom")
    saml_certificate_valid_to: Optional[datetime] = Field(default=None, description="Date when the SAML certificate is no longer valid. Metadata on SAML_Idp_Certificate", alias="samlCertificateValidTo")
    saml_entity_id: Optional[StrictStr] = Field(default=None, description="SAML Identity Provider Id Max length: 1000;", alias="samlEntityId")
    saml_idp_certificate: Optional[StrictStr] = Field(default=None, description="Public certificate for Identity Provider signatures", alias="samlIdpCertificate")
    saml_sign_in_url: Optional[StrictStr] = Field(default=None, description="Sign in url for the SAML Identity Provider Max length: 1000;", alias="samlSignInUrl")
    sso_type: Optional[StrictStr] = Field(description="Type of SSO Configuration", alias="ssoType")
    sts_base_url: Optional[StrictStr] = Field(default=None, description="Sign in URL for ConnectWise SSO", alias="stsBaseUrl")
    sts_user_admin_url: Optional[StrictStr] = Field(default=None, description="User Admin Url for ConnectWise SSO", alias="stsUserAdminUrl")
    submitted_member_count: Optional[StrictInt] = Field(default=None, alias="submittedMemberCount")
    token: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_info", "allMembersSubmitted", "clientId", "id", "inactiveFlag", "isSsoOnByDefault", "locationIds", "name", "samlCertificateIssuedTo", "samlCertificateName", "samlCertificateThumbprint", "samlCertificateValidFrom", "samlCertificateValidTo", "samlEntityId", "samlIdpCertificate", "samlSignInUrl", "ssoType", "stsBaseUrl", "stsUserAdminUrl", "submittedMemberCount", "token"]

    @field_validator('sso_type')
    def sso_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CWSSO', 'SAML'):
            raise ValueError("must be one of enum values ('CWSSO', 'SAML')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SsoConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if sso_type (nullable) is None
        # and model_fields_set contains the field
        if self.sso_type is None and "sso_type" in self.model_fields_set:
            _dict['ssoType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SsoConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SsoConfiguration) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "allMembersSubmitted": obj.get("allMembersSubmitted"),
            "clientId": obj.get("clientId"),
            "id": obj.get("id"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "isSsoOnByDefault": obj.get("isSsoOnByDefault"),
            "locationIds": obj.get("locationIds"),
            "name": obj.get("name"),
            "samlCertificateIssuedTo": obj.get("samlCertificateIssuedTo"),
            "samlCertificateName": obj.get("samlCertificateName"),
            "samlCertificateThumbprint": obj.get("samlCertificateThumbprint"),
            "samlCertificateValidFrom": obj.get("samlCertificateValidFrom"),
            "samlCertificateValidTo": obj.get("samlCertificateValidTo"),
            "samlEntityId": obj.get("samlEntityId"),
            "samlIdpCertificate": obj.get("samlIdpCertificate"),
            "samlSignInUrl": obj.get("samlSignInUrl"),
            "ssoType": obj.get("ssoType"),
            "stsBaseUrl": obj.get("stsBaseUrl"),
            "stsUserAdminUrl": obj.get("stsUserAdminUrl"),
            "submittedMemberCount": obj.get("submittedMemberCount"),
            "token": obj.get("token")
        })
        return _obj


