# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.agreement_reference import AgreementReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.opportunity_reference import OpportunityReference
from connectwise_psa.models.phase_status_reference import PhaseStatusReference
from connectwise_psa.models.project_board_reference import ProjectBoardReference
from connectwise_psa.models.project_phase_reference import ProjectPhaseReference
from connectwise_psa.models.site_reference import SiteReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectPhase(BaseModel):
    """
    ProjectPhase
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    actual_end: Optional[StrictStr] = Field(default=None, alias="actualEnd")
    actual_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualHours")
    actual_start: Optional[StrictStr] = Field(default=None, alias="actualStart")
    agreement: Optional[AgreementReference] = None
    bill_expenses: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billExpenses")
    bill_phase_closed_flag: Optional[StrictBool] = Field(default=None, description="This phase can only be billed after it has been closed.", alias="billPhaseClosedFlag")
    bill_products: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billProducts")
    bill_project_closed_flag: Optional[StrictBool] = Field(default=None, description="This phase can only be billed after the project has been closed.", alias="billProjectClosedFlag")
    bill_separately_flag: Optional[StrictBool] = Field(default=None, alias="billSeparatelyFlag")
    bill_time: Optional[StrictStr] = Field(default=None, description=" Required On Updates;", alias="billTime")
    bill_to_company: Optional[CompanyReference] = Field(default=None, alias="billToCompany")
    bill_to_contact: Optional[ContactReference] = Field(default=None, alias="billToContact")
    bill_to_site: Optional[SiteReference] = Field(default=None, alias="billToSite")
    billing_method: Optional[StrictStr] = Field(default=None, description="billingMethod is required if the phase billSeparatelyFlag is true.", alias="billingMethod")
    billing_start_date: Optional[datetime] = Field(default=None, alias="billingStartDate")
    board: Optional[ProjectBoardReference] = None
    budget_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="budgetHours")
    business_unit_id: Optional[StrictInt] = Field(default=None, alias="businessUnitId")
    currency: Optional[CurrencyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    deadline_date: Optional[datetime] = Field(default=None, alias="deadlineDate")
    description: StrictStr = Field(description=" Max length: 100;")
    downpayment: Optional[Union[StrictFloat, StrictInt]] = None
    estimated_expense_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedExpenseCost")
    estimated_expense_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedExpenseRevenue")
    estimated_product_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedProductCost")
    estimated_product_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedProductRevenue")
    estimated_time_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedTimeCost")
    estimated_time_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estimatedTimeRevenue")
    hourly_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="hourlyRate")
    id: Optional[StrictInt] = None
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    mark_as_milestone_flag: Optional[StrictBool] = Field(default=None, alias="markAsMilestoneFlag")
    notes: Optional[StrictStr] = None
    opportunity: Optional[OpportunityReference] = None
    parent_phase: Optional[ProjectPhaseReference] = Field(default=None, alias="parentPhase")
    po_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="poAmount")
    po_number: Optional[StrictStr] = Field(default=None, description=" Max length: 25;", alias="poNumber")
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    scheduled_end: Optional[StrictStr] = Field(default=None, alias="scheduledEnd")
    scheduled_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="scheduledHours")
    scheduled_start: Optional[StrictStr] = Field(default=None, alias="scheduledStart")
    ship_to_company: Optional[CompanyReference] = Field(default=None, alias="shipToCompany")
    ship_to_contact: Optional[ContactReference] = Field(default=None, alias="shipToContact")
    ship_to_site: Optional[SiteReference] = Field(default=None, alias="shipToSite")
    status: Optional[PhaseStatusReference] = None
    wbs_code: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="wbsCode")
    __properties: ClassVar[List[str]] = ["_info", "actualEnd", "actualHours", "actualStart", "agreement", "billExpenses", "billPhaseClosedFlag", "billProducts", "billProjectClosedFlag", "billSeparatelyFlag", "billTime", "billToCompany", "billToContact", "billToSite", "billingMethod", "billingStartDate", "board", "budgetHours", "businessUnitId", "currency", "customFields", "deadlineDate", "description", "downpayment", "estimatedExpenseCost", "estimatedExpenseRevenue", "estimatedProductCost", "estimatedProductRevenue", "estimatedTimeCost", "estimatedTimeRevenue", "hourlyRate", "id", "locationId", "markAsMilestoneFlag", "notes", "opportunity", "parentPhase", "poAmount", "poNumber", "projectId", "scheduledEnd", "scheduledHours", "scheduledStart", "shipToCompany", "shipToContact", "shipToSite", "status", "wbsCode"]

    @field_validator('bill_expenses')
    def bill_expenses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('bill_products')
    def bill_products_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('bill_time')
    def bill_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('billing_method')
    def billing_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate'):
            raise ValueError("must be one of enum values ('ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectPhase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement
        if self.agreement:
            _dict['agreement'] = self.agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_company
        if self.bill_to_company:
            _dict['billToCompany'] = self.bill_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_site
        if self.bill_to_site:
            _dict['billToSite'] = self.bill_to_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of board
        if self.board:
            _dict['board'] = self.board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of opportunity
        if self.opportunity:
            _dict['opportunity'] = self.opportunity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_phase
        if self.parent_phase:
            _dict['parentPhase'] = self.parent_phase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_company
        if self.ship_to_company:
            _dict['shipToCompany'] = self.ship_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_contact
        if self.ship_to_contact:
            _dict['shipToContact'] = self.ship_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_site
        if self.ship_to_site:
            _dict['shipToSite'] = self.ship_to_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # set to None if actual_hours (nullable) is None
        # and model_fields_set contains the field
        if self.actual_hours is None and "actual_hours" in self.model_fields_set:
            _dict['actualHours'] = None

        # set to None if bill_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.bill_expenses is None and "bill_expenses" in self.model_fields_set:
            _dict['billExpenses'] = None

        # set to None if bill_phase_closed_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_phase_closed_flag is None and "bill_phase_closed_flag" in self.model_fields_set:
            _dict['billPhaseClosedFlag'] = None

        # set to None if bill_products (nullable) is None
        # and model_fields_set contains the field
        if self.bill_products is None and "bill_products" in self.model_fields_set:
            _dict['billProducts'] = None

        # set to None if bill_project_closed_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_project_closed_flag is None and "bill_project_closed_flag" in self.model_fields_set:
            _dict['billProjectClosedFlag'] = None

        # set to None if bill_separately_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_separately_flag is None and "bill_separately_flag" in self.model_fields_set:
            _dict['billSeparatelyFlag'] = None

        # set to None if bill_time (nullable) is None
        # and model_fields_set contains the field
        if self.bill_time is None and "bill_time" in self.model_fields_set:
            _dict['billTime'] = None

        # set to None if billing_method (nullable) is None
        # and model_fields_set contains the field
        if self.billing_method is None and "billing_method" in self.model_fields_set:
            _dict['billingMethod'] = None

        # set to None if budget_hours (nullable) is None
        # and model_fields_set contains the field
        if self.budget_hours is None and "budget_hours" in self.model_fields_set:
            _dict['budgetHours'] = None

        # set to None if business_unit_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_unit_id is None and "business_unit_id" in self.model_fields_set:
            _dict['businessUnitId'] = None

        # set to None if downpayment (nullable) is None
        # and model_fields_set contains the field
        if self.downpayment is None and "downpayment" in self.model_fields_set:
            _dict['downpayment'] = None

        # set to None if estimated_expense_cost (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_expense_cost is None and "estimated_expense_cost" in self.model_fields_set:
            _dict['estimatedExpenseCost'] = None

        # set to None if estimated_expense_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_expense_revenue is None and "estimated_expense_revenue" in self.model_fields_set:
            _dict['estimatedExpenseRevenue'] = None

        # set to None if estimated_product_cost (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_product_cost is None and "estimated_product_cost" in self.model_fields_set:
            _dict['estimatedProductCost'] = None

        # set to None if estimated_product_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_product_revenue is None and "estimated_product_revenue" in self.model_fields_set:
            _dict['estimatedProductRevenue'] = None

        # set to None if estimated_time_cost (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_time_cost is None and "estimated_time_cost" in self.model_fields_set:
            _dict['estimatedTimeCost'] = None

        # set to None if estimated_time_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_time_revenue is None and "estimated_time_revenue" in self.model_fields_set:
            _dict['estimatedTimeRevenue'] = None

        # set to None if hourly_rate (nullable) is None
        # and model_fields_set contains the field
        if self.hourly_rate is None and "hourly_rate" in self.model_fields_set:
            _dict['hourlyRate'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if mark_as_milestone_flag (nullable) is None
        # and model_fields_set contains the field
        if self.mark_as_milestone_flag is None and "mark_as_milestone_flag" in self.model_fields_set:
            _dict['markAsMilestoneFlag'] = None

        # set to None if po_amount (nullable) is None
        # and model_fields_set contains the field
        if self.po_amount is None and "po_amount" in self.model_fields_set:
            _dict['poAmount'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['projectId'] = None

        # set to None if scheduled_hours (nullable) is None
        # and model_fields_set contains the field
        if self.scheduled_hours is None and "scheduled_hours" in self.model_fields_set:
            _dict['scheduledHours'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectPhase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ProjectPhase) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "actualEnd": obj.get("actualEnd"),
            "actualHours": obj.get("actualHours"),
            "actualStart": obj.get("actualStart"),
            "agreement": AgreementReference.from_dict(obj.get("agreement")) if obj.get("agreement") is not None else None,
            "billExpenses": obj.get("billExpenses"),
            "billPhaseClosedFlag": obj.get("billPhaseClosedFlag"),
            "billProducts": obj.get("billProducts"),
            "billProjectClosedFlag": obj.get("billProjectClosedFlag"),
            "billSeparatelyFlag": obj.get("billSeparatelyFlag"),
            "billTime": obj.get("billTime"),
            "billToCompany": CompanyReference.from_dict(obj.get("billToCompany")) if obj.get("billToCompany") is not None else None,
            "billToContact": ContactReference.from_dict(obj.get("billToContact")) if obj.get("billToContact") is not None else None,
            "billToSite": SiteReference.from_dict(obj.get("billToSite")) if obj.get("billToSite") is not None else None,
            "billingMethod": obj.get("billingMethod"),
            "billingStartDate": obj.get("billingStartDate"),
            "board": ProjectBoardReference.from_dict(obj.get("board")) if obj.get("board") is not None else None,
            "budgetHours": obj.get("budgetHours"),
            "businessUnitId": obj.get("businessUnitId"),
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "deadlineDate": obj.get("deadlineDate"),
            "description": obj.get("description"),
            "downpayment": obj.get("downpayment"),
            "estimatedExpenseCost": obj.get("estimatedExpenseCost"),
            "estimatedExpenseRevenue": obj.get("estimatedExpenseRevenue"),
            "estimatedProductCost": obj.get("estimatedProductCost"),
            "estimatedProductRevenue": obj.get("estimatedProductRevenue"),
            "estimatedTimeCost": obj.get("estimatedTimeCost"),
            "estimatedTimeRevenue": obj.get("estimatedTimeRevenue"),
            "hourlyRate": obj.get("hourlyRate"),
            "id": obj.get("id"),
            "locationId": obj.get("locationId"),
            "markAsMilestoneFlag": obj.get("markAsMilestoneFlag"),
            "notes": obj.get("notes"),
            "opportunity": OpportunityReference.from_dict(obj.get("opportunity")) if obj.get("opportunity") is not None else None,
            "parentPhase": ProjectPhaseReference.from_dict(obj.get("parentPhase")) if obj.get("parentPhase") is not None else None,
            "poAmount": obj.get("poAmount"),
            "poNumber": obj.get("poNumber"),
            "projectId": obj.get("projectId"),
            "scheduledEnd": obj.get("scheduledEnd"),
            "scheduledHours": obj.get("scheduledHours"),
            "scheduledStart": obj.get("scheduledStart"),
            "shipToCompany": CompanyReference.from_dict(obj.get("shipToCompany")) if obj.get("shipToCompany") is not None else None,
            "shipToContact": ContactReference.from_dict(obj.get("shipToContact")) if obj.get("shipToContact") is not None else None,
            "shipToSite": SiteReference.from_dict(obj.get("shipToSite")) if obj.get("shipToSite") is not None else None,
            "status": PhaseStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "wbsCode": obj.get("wbsCode")
        })
        return _obj


