# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.agreement_reference import AgreementReference
from connectwise_psa.models.classification_reference import ClassificationReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.expense_report_reference import ExpenseReportReference
from connectwise_psa.models.expense_tax import ExpenseTax
from connectwise_psa.models.expense_type_reference import ExpenseTypeReference
from connectwise_psa.models.invoice_reference import InvoiceReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.payment_method_reference import PaymentMethodReference
from connectwise_psa.models.project_phase_reference import ProjectPhaseReference
from connectwise_psa.models.project_reference import ProjectReference
from connectwise_psa.models.ticket_reference import TicketReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ExpenseEntry(BaseModel):
    """
    ExpenseEntry
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agreement: Optional[AgreementReference] = None
    agreement_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="agreementAmount")
    amount: Optional[Union[StrictFloat, StrictInt]]
    bill_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="billAmount")
    billable_option: Optional[StrictStr] = Field(default=None, alias="billableOption")
    business_unit_id: Optional[StrictInt] = Field(default=None, alias="businessUnitId")
    charge_to_id: Optional[StrictInt] = Field(default=None, alias="chargeToId")
    charge_to_type: Optional[StrictStr] = Field(default=None, description="Gets or sets             company or chargeToType is required.", alias="chargeToType")
    classification: Optional[ClassificationReference] = None
    company: Optional[CompanyReference] = None
    currency: Optional[CurrencyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    var_date: datetime = Field(alias="date")
    expense_report: Optional[ExpenseReportReference] = Field(default=None, alias="expenseReport")
    id: Optional[StrictInt] = None
    invoice: Optional[InvoiceReference] = None
    invoice_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="invoiceAmount")
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    member: Optional[MemberReference] = None
    mobile_guid: Optional[StrictStr] = Field(default=None, alias="mobileGuid")
    notes: Optional[StrictStr] = None
    odometer_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="odometerEnd")
    odometer_start: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="odometerStart")
    payment_method: Optional[PaymentMethodReference] = Field(default=None, alias="paymentMethod")
    phase: Optional[ProjectPhaseReference] = None
    project: Optional[ProjectReference] = None
    status: Optional[StrictStr] = None
    taxes: Optional[List[ExpenseTax]] = None
    ticket: Optional[TicketReference] = None
    type: Optional[ExpenseTypeReference] = None
    __properties: ClassVar[List[str]] = ["_info", "agreement", "agreementAmount", "amount", "billAmount", "billableOption", "businessUnitId", "chargeToId", "chargeToType", "classification", "company", "currency", "customFields", "date", "expenseReport", "id", "invoice", "invoiceAmount", "locationId", "member", "mobileGuid", "notes", "odometerEnd", "odometerStart", "paymentMethod", "phase", "project", "status", "taxes", "ticket", "type"]

    @field_validator('billable_option')
    def billable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('charge_to_type')
    def charge_to_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity'):
            raise ValueError("must be one of enum values ('ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Open', 'Rejected', 'PendingApproval', 'ErrorsCorrected', 'PendingProjectApproval', 'ApprovedByTierOne', 'RejectBySecondTier', 'ApprovedByTierTwo', 'ReadyToBill', 'Billed', 'WrittenOff', 'BilledAgreement'):
            raise ValueError("must be one of enum values ('Open', 'Rejected', 'PendingApproval', 'ErrorsCorrected', 'PendingProjectApproval', 'ApprovedByTierOne', 'RejectBySecondTier', 'ApprovedByTierTwo', 'ReadyToBill', 'Billed', 'WrittenOff', 'BilledAgreement')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExpenseEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement
        if self.agreement:
            _dict['agreement'] = self.agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of classification
        if self.classification:
            _dict['classification'] = self.classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of expense_report
        if self.expense_report:
            _dict['expenseReport'] = self.expense_report.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['paymentMethod'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phase
        if self.phase:
            _dict['phase'] = self.phase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taxes (list)
        _items = []
        if self.taxes:
            for _item in self.taxes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxes'] = _items
        # override the default output from pydantic by calling `to_dict()` of ticket
        if self.ticket:
            _dict['ticket'] = self.ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # set to None if agreement_amount (nullable) is None
        # and model_fields_set contains the field
        if self.agreement_amount is None and "agreement_amount" in self.model_fields_set:
            _dict['agreementAmount'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if bill_amount (nullable) is None
        # and model_fields_set contains the field
        if self.bill_amount is None and "bill_amount" in self.model_fields_set:
            _dict['billAmount'] = None

        # set to None if billable_option (nullable) is None
        # and model_fields_set contains the field
        if self.billable_option is None and "billable_option" in self.model_fields_set:
            _dict['billableOption'] = None

        # set to None if business_unit_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_unit_id is None and "business_unit_id" in self.model_fields_set:
            _dict['businessUnitId'] = None

        # set to None if charge_to_id (nullable) is None
        # and model_fields_set contains the field
        if self.charge_to_id is None and "charge_to_id" in self.model_fields_set:
            _dict['chargeToId'] = None

        # set to None if charge_to_type (nullable) is None
        # and model_fields_set contains the field
        if self.charge_to_type is None and "charge_to_type" in self.model_fields_set:
            _dict['chargeToType'] = None

        # set to None if invoice_amount (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_amount is None and "invoice_amount" in self.model_fields_set:
            _dict['invoiceAmount'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if mobile_guid (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_guid is None and "mobile_guid" in self.model_fields_set:
            _dict['mobileGuid'] = None

        # set to None if odometer_end (nullable) is None
        # and model_fields_set contains the field
        if self.odometer_end is None and "odometer_end" in self.model_fields_set:
            _dict['odometerEnd'] = None

        # set to None if odometer_start (nullable) is None
        # and model_fields_set contains the field
        if self.odometer_start is None and "odometer_start" in self.model_fields_set:
            _dict['odometerStart'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExpenseEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ExpenseEntry) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agreement": AgreementReference.from_dict(obj.get("agreement")) if obj.get("agreement") is not None else None,
            "agreementAmount": obj.get("agreementAmount"),
            "amount": obj.get("amount"),
            "billAmount": obj.get("billAmount"),
            "billableOption": obj.get("billableOption"),
            "businessUnitId": obj.get("businessUnitId"),
            "chargeToId": obj.get("chargeToId"),
            "chargeToType": obj.get("chargeToType"),
            "classification": ClassificationReference.from_dict(obj.get("classification")) if obj.get("classification") is not None else None,
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "date": obj.get("date"),
            "expenseReport": ExpenseReportReference.from_dict(obj.get("expenseReport")) if obj.get("expenseReport") is not None else None,
            "id": obj.get("id"),
            "invoice": InvoiceReference.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "invoiceAmount": obj.get("invoiceAmount"),
            "locationId": obj.get("locationId"),
            "member": MemberReference.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "mobileGuid": obj.get("mobileGuid"),
            "notes": obj.get("notes"),
            "odometerEnd": obj.get("odometerEnd"),
            "odometerStart": obj.get("odometerStart"),
            "paymentMethod": PaymentMethodReference.from_dict(obj.get("paymentMethod")) if obj.get("paymentMethod") is not None else None,
            "phase": ProjectPhaseReference.from_dict(obj.get("phase")) if obj.get("phase") is not None else None,
            "project": ProjectReference.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "status": obj.get("status"),
            "taxes": [ExpenseTax.from_dict(_item) for _item in obj.get("taxes")] if obj.get("taxes") is not None else None,
            "ticket": TicketReference.from_dict(obj.get("ticket")) if obj.get("ticket") is not None else None,
            "type": ExpenseTypeReference.from_dict(obj.get("type")) if obj.get("type") is not None else None
        })
        return _obj


