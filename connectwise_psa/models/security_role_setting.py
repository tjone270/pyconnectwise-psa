# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SecurityRoleSetting(BaseModel):
    """
    SecurityRoleSetting
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    add_level: Optional[StrictStr] = Field(default=None, alias="addLevel")
    custom_flag: Optional[StrictBool] = Field(default=None, alias="customFlag")
    delete_level: Optional[StrictStr] = Field(default=None, alias="deleteLevel")
    edit_level: Optional[StrictStr] = Field(default=None, alias="editLevel")
    id: Optional[StrictInt] = None
    inquire_level: Optional[StrictStr] = Field(default=None, alias="inquireLevel")
    module_description: Optional[StrictStr] = Field(default=None, alias="moduleDescription")
    module_function_description: Optional[StrictStr] = Field(default=None, alias="moduleFunctionDescription")
    module_function_identifier: Optional[StrictStr] = Field(default=None, alias="moduleFunctionIdentifier")
    module_function_name: Optional[StrictStr] = Field(default=None, alias="moduleFunctionName")
    module_identifier: Optional[StrictStr] = Field(default=None, alias="moduleIdentifier")
    module_name: Optional[StrictStr] = Field(default=None, alias="moduleName")
    my_all_flag: Optional[StrictBool] = Field(default=None, alias="myAllFlag")
    report_flag: Optional[StrictBool] = Field(default=None, alias="reportFlag")
    restrict_flag: Optional[StrictBool] = Field(default=None, alias="restrictFlag")
    sort_order: Optional[StrictInt] = Field(default=None, alias="sortOrder")
    __properties: ClassVar[List[str]] = ["_info", "addLevel", "customFlag", "deleteLevel", "editLevel", "id", "inquireLevel", "moduleDescription", "moduleFunctionDescription", "moduleFunctionIdentifier", "moduleFunctionName", "moduleIdentifier", "moduleName", "myAllFlag", "reportFlag", "restrictFlag", "sortOrder"]

    @field_validator('add_level')
    def add_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'My', 'All'):
            raise ValueError("must be one of enum values ('None', 'My', 'All')")
        return value

    @field_validator('delete_level')
    def delete_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'My', 'All'):
            raise ValueError("must be one of enum values ('None', 'My', 'All')")
        return value

    @field_validator('edit_level')
    def edit_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'My', 'All'):
            raise ValueError("must be one of enum values ('None', 'My', 'All')")
        return value

    @field_validator('inquire_level')
    def inquire_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('None', 'My', 'All'):
            raise ValueError("must be one of enum values ('None', 'My', 'All')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SecurityRoleSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if add_level (nullable) is None
        # and model_fields_set contains the field
        if self.add_level is None and "add_level" in self.model_fields_set:
            _dict['addLevel'] = None

        # set to None if custom_flag (nullable) is None
        # and model_fields_set contains the field
        if self.custom_flag is None and "custom_flag" in self.model_fields_set:
            _dict['customFlag'] = None

        # set to None if delete_level (nullable) is None
        # and model_fields_set contains the field
        if self.delete_level is None and "delete_level" in self.model_fields_set:
            _dict['deleteLevel'] = None

        # set to None if edit_level (nullable) is None
        # and model_fields_set contains the field
        if self.edit_level is None and "edit_level" in self.model_fields_set:
            _dict['editLevel'] = None

        # set to None if inquire_level (nullable) is None
        # and model_fields_set contains the field
        if self.inquire_level is None and "inquire_level" in self.model_fields_set:
            _dict['inquireLevel'] = None

        # set to None if my_all_flag (nullable) is None
        # and model_fields_set contains the field
        if self.my_all_flag is None and "my_all_flag" in self.model_fields_set:
            _dict['myAllFlag'] = None

        # set to None if report_flag (nullable) is None
        # and model_fields_set contains the field
        if self.report_flag is None and "report_flag" in self.model_fields_set:
            _dict['reportFlag'] = None

        # set to None if restrict_flag (nullable) is None
        # and model_fields_set contains the field
        if self.restrict_flag is None and "restrict_flag" in self.model_fields_set:
            _dict['restrictFlag'] = None

        # set to None if sort_order (nullable) is None
        # and model_fields_set contains the field
        if self.sort_order is None and "sort_order" in self.model_fields_set:
            _dict['sortOrder'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SecurityRoleSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SecurityRoleSetting) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "addLevel": obj.get("addLevel"),
            "customFlag": obj.get("customFlag"),
            "deleteLevel": obj.get("deleteLevel"),
            "editLevel": obj.get("editLevel"),
            "id": obj.get("id"),
            "inquireLevel": obj.get("inquireLevel"),
            "moduleDescription": obj.get("moduleDescription"),
            "moduleFunctionDescription": obj.get("moduleFunctionDescription"),
            "moduleFunctionIdentifier": obj.get("moduleFunctionIdentifier"),
            "moduleFunctionName": obj.get("moduleFunctionName"),
            "moduleIdentifier": obj.get("moduleIdentifier"),
            "moduleName": obj.get("moduleName"),
            "myAllFlag": obj.get("myAllFlag"),
            "reportFlag": obj.get("reportFlag"),
            "restrictFlag": obj.get("restrictFlag"),
            "sortOrder": obj.get("sortOrder")
        })
        return _obj


