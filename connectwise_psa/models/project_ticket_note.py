# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.ticket_reference import TicketReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectTicketNote(BaseModel):
    """
    ProjectTicketNote
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    bundled_flag: Optional[StrictBool] = Field(default=None, alias="bundledFlag")
    contact: Optional[ContactReference] = None
    detail_description_flag: Optional[StrictBool] = Field(default=None, alias="detailDescriptionFlag")
    id: Optional[StrictInt] = None
    internal_analysis_flag: Optional[StrictBool] = Field(default=None, alias="internalAnalysisFlag")
    issue_flag: Optional[StrictBool] = Field(default=None, alias="issueFlag")
    member: Optional[MemberReference] = None
    merged_flag: Optional[StrictBool] = Field(default=None, alias="mergedFlag")
    note_type: Optional[StrictStr] = Field(default=None, alias="noteType")
    original_author: Optional[StrictStr] = Field(default=None, alias="originalAuthor")
    resolution_flag: Optional[StrictBool] = Field(default=None, alias="resolutionFlag")
    text: Optional[StrictStr] = None
    ticket: Optional[TicketReference] = None
    time_end: Optional[datetime] = Field(default=None, alias="timeEnd")
    time_start: Optional[datetime] = Field(default=None, alias="timeStart")
    __properties: ClassVar[List[str]] = ["_info", "bundledFlag", "contact", "detailDescriptionFlag", "id", "internalAnalysisFlag", "issueFlag", "member", "mergedFlag", "noteType", "originalAuthor", "resolutionFlag", "text", "ticket", "timeEnd", "timeStart"]

    @field_validator('note_type')
    def note_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TicketNote', 'TimeEntryNote', 'MeetingNote'):
            raise ValueError("must be one of enum values ('TicketNote', 'TimeEntryNote', 'MeetingNote')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectTicketNote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket
        if self.ticket:
            _dict['ticket'] = self.ticket.to_dict()
        # set to None if bundled_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bundled_flag is None and "bundled_flag" in self.model_fields_set:
            _dict['bundledFlag'] = None

        # set to None if detail_description_flag (nullable) is None
        # and model_fields_set contains the field
        if self.detail_description_flag is None and "detail_description_flag" in self.model_fields_set:
            _dict['detailDescriptionFlag'] = None

        # set to None if internal_analysis_flag (nullable) is None
        # and model_fields_set contains the field
        if self.internal_analysis_flag is None and "internal_analysis_flag" in self.model_fields_set:
            _dict['internalAnalysisFlag'] = None

        # set to None if issue_flag (nullable) is None
        # and model_fields_set contains the field
        if self.issue_flag is None and "issue_flag" in self.model_fields_set:
            _dict['issueFlag'] = None

        # set to None if merged_flag (nullable) is None
        # and model_fields_set contains the field
        if self.merged_flag is None and "merged_flag" in self.model_fields_set:
            _dict['mergedFlag'] = None

        # set to None if note_type (nullable) is None
        # and model_fields_set contains the field
        if self.note_type is None and "note_type" in self.model_fields_set:
            _dict['noteType'] = None

        # set to None if resolution_flag (nullable) is None
        # and model_fields_set contains the field
        if self.resolution_flag is None and "resolution_flag" in self.model_fields_set:
            _dict['resolutionFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectTicketNote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ProjectTicketNote) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "bundledFlag": obj.get("bundledFlag"),
            "contact": ContactReference.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "detailDescriptionFlag": obj.get("detailDescriptionFlag"),
            "id": obj.get("id"),
            "internalAnalysisFlag": obj.get("internalAnalysisFlag"),
            "issueFlag": obj.get("issueFlag"),
            "member": MemberReference.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "mergedFlag": obj.get("mergedFlag"),
            "noteType": obj.get("noteType"),
            "originalAuthor": obj.get("originalAuthor"),
            "resolutionFlag": obj.get("resolutionFlag"),
            "text": obj.get("text"),
            "ticket": TicketReference.from_dict(obj.get("ticket")) if obj.get("ticket") is not None else None,
            "timeEnd": obj.get("timeEnd"),
            "timeStart": obj.get("timeStart")
        })
        return _obj


