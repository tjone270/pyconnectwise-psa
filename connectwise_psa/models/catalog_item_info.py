# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CatalogItemInfo(BaseModel):
    """
    CatalogItemInfo
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    billable_option: Optional[StrictStr] = Field(default=None, alias="billableOption")
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    customer_description: Optional[StrictStr] = Field(default=None, alias="customerDescription")
    description: Optional[StrictStr] = None
    drop_ship_flag: Optional[StrictBool] = Field(default=None, alias="dropShipFlag")
    id: Optional[StrictInt] = None
    identifier: Optional[StrictStr] = None
    inactive_flag: Optional[StrictBool] = Field(default=None, alias="inactiveFlag")
    manufacturer_part_number: Optional[StrictStr] = Field(default=None, alias="manufacturerPartNumber")
    price: Optional[Union[StrictFloat, StrictInt]] = None
    product_class: Optional[StrictStr] = Field(default=None, alias="productClass")
    serialized_cost_flag: Optional[StrictBool] = Field(default=None, alias="serializedCostFlag")
    special_order_flag: Optional[StrictBool] = Field(default=None, alias="specialOrderFlag")
    taxable_flag: Optional[StrictBool] = Field(default=None, alias="taxableFlag")
    vendor_sku: Optional[StrictStr] = Field(default=None, alias="vendorSku")
    __properties: ClassVar[List[str]] = ["_info", "billableOption", "cost", "customerDescription", "description", "dropShipFlag", "id", "identifier", "inactiveFlag", "manufacturerPartNumber", "price", "productClass", "serializedCostFlag", "specialOrderFlag", "taxableFlag", "vendorSku"]

    @field_validator('billable_option')
    def billable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault'):
            raise ValueError("must be one of enum values ('Billable', 'DoNotBill', 'NoCharge', 'NoDefault')")
        return value

    @field_validator('product_class')
    def product_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service'):
            raise ValueError("must be one of enum values ('Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CatalogItemInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if billable_option (nullable) is None
        # and model_fields_set contains the field
        if self.billable_option is None and "billable_option" in self.model_fields_set:
            _dict['billableOption'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if drop_ship_flag (nullable) is None
        # and model_fields_set contains the field
        if self.drop_ship_flag is None and "drop_ship_flag" in self.model_fields_set:
            _dict['dropShipFlag'] = None

        # set to None if inactive_flag (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag is None and "inactive_flag" in self.model_fields_set:
            _dict['inactiveFlag'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if product_class (nullable) is None
        # and model_fields_set contains the field
        if self.product_class is None and "product_class" in self.model_fields_set:
            _dict['productClass'] = None

        # set to None if serialized_cost_flag (nullable) is None
        # and model_fields_set contains the field
        if self.serialized_cost_flag is None and "serialized_cost_flag" in self.model_fields_set:
            _dict['serializedCostFlag'] = None

        # set to None if special_order_flag (nullable) is None
        # and model_fields_set contains the field
        if self.special_order_flag is None and "special_order_flag" in self.model_fields_set:
            _dict['specialOrderFlag'] = None

        # set to None if taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_flag is None and "taxable_flag" in self.model_fields_set:
            _dict['taxableFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CatalogItemInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CatalogItemInfo) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "billableOption": obj.get("billableOption"),
            "cost": obj.get("cost"),
            "customerDescription": obj.get("customerDescription"),
            "description": obj.get("description"),
            "dropShipFlag": obj.get("dropShipFlag"),
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "inactiveFlag": obj.get("inactiveFlag"),
            "manufacturerPartNumber": obj.get("manufacturerPartNumber"),
            "price": obj.get("price"),
            "productClass": obj.get("productClass"),
            "serializedCostFlag": obj.get("serializedCostFlag"),
            "specialOrderFlag": obj.get("specialOrderFlag"),
            "taxableFlag": obj.get("taxableFlag"),
            "vendorSku": obj.get("vendorSku")
        })
        return _obj


