# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.member_reference import MemberReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CorporateStructure(BaseModel):
    """
    CorporateStructure
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    base_currency: CurrencyReference = Field(alias="baseCurrency")
    chief_operating_officer: Optional[MemberReference] = Field(default=None, alias="chiefOperatingOfficer")
    controller: Optional[MemberReference] = None
    dispatcher: Optional[MemberReference] = None
    duty_manager: Optional[MemberReference] = Field(default=None, alias="dutyManager")
    fiscal_year_start: Optional[StrictStr] = Field(alias="fiscalYearStart")
    group_caption: StrictStr = Field(description=" Max length: 50;", alias="groupCaption")
    id: Optional[StrictInt] = None
    level1_name: Optional[StrictStr] = Field(default=None, description=" Max length: 20;", alias="level1Name")
    level2_name: Optional[StrictStr] = Field(default=None, description=" Max length: 20;", alias="level2Name")
    level3_name: Optional[StrictStr] = Field(default=None, description=" Max length: 20;", alias="level3Name")
    level4_name: Optional[StrictStr] = Field(default=None, description=" Max length: 20;", alias="level4Name")
    level5_name: Optional[StrictStr] = Field(default=None, description=" Max length: 20;", alias="level5Name")
    level_count: Optional[StrictStr] = Field(default=None, alias="levelCount")
    location_caption: StrictStr = Field(description=" Max length: 50;", alias="locationCaption")
    president: Optional[MemberReference] = None
    service_manager: Optional[MemberReference] = Field(default=None, alias="serviceManager")
    __properties: ClassVar[List[str]] = ["_info", "baseCurrency", "chiefOperatingOfficer", "controller", "dispatcher", "dutyManager", "fiscalYearStart", "groupCaption", "id", "level1Name", "level2Name", "level3Name", "level4Name", "level5Name", "levelCount", "locationCaption", "president", "serviceManager"]

    @field_validator('fiscal_year_start')
    def fiscal_year_start_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'):
            raise ValueError("must be one of enum values ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')")
        return value

    @field_validator('level_count')
    def level_count_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Level1', 'Level2', 'Level3', 'Level4', 'Level5'):
            raise ValueError("must be one of enum values ('Level1', 'Level2', 'Level3', 'Level4', 'Level5')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CorporateStructure from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_currency
        if self.base_currency:
            _dict['baseCurrency'] = self.base_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chief_operating_officer
        if self.chief_operating_officer:
            _dict['chiefOperatingOfficer'] = self.chief_operating_officer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of controller
        if self.controller:
            _dict['controller'] = self.controller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dispatcher
        if self.dispatcher:
            _dict['dispatcher'] = self.dispatcher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duty_manager
        if self.duty_manager:
            _dict['dutyManager'] = self.duty_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of president
        if self.president:
            _dict['president'] = self.president.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_manager
        if self.service_manager:
            _dict['serviceManager'] = self.service_manager.to_dict()
        # set to None if fiscal_year_start (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year_start is None and "fiscal_year_start" in self.model_fields_set:
            _dict['fiscalYearStart'] = None

        # set to None if level_count (nullable) is None
        # and model_fields_set contains the field
        if self.level_count is None and "level_count" in self.model_fields_set:
            _dict['levelCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CorporateStructure from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CorporateStructure) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "baseCurrency": CurrencyReference.from_dict(obj.get("baseCurrency")) if obj.get("baseCurrency") is not None else None,
            "chiefOperatingOfficer": MemberReference.from_dict(obj.get("chiefOperatingOfficer")) if obj.get("chiefOperatingOfficer") is not None else None,
            "controller": MemberReference.from_dict(obj.get("controller")) if obj.get("controller") is not None else None,
            "dispatcher": MemberReference.from_dict(obj.get("dispatcher")) if obj.get("dispatcher") is not None else None,
            "dutyManager": MemberReference.from_dict(obj.get("dutyManager")) if obj.get("dutyManager") is not None else None,
            "fiscalYearStart": obj.get("fiscalYearStart"),
            "groupCaption": obj.get("groupCaption"),
            "id": obj.get("id"),
            "level1Name": obj.get("level1Name"),
            "level2Name": obj.get("level2Name"),
            "level3Name": obj.get("level3Name"),
            "level4Name": obj.get("level4Name"),
            "level5Name": obj.get("level5Name"),
            "levelCount": obj.get("levelCount"),
            "locationCaption": obj.get("locationCaption"),
            "president": MemberReference.from_dict(obj.get("president")) if obj.get("president") is not None else None,
            "serviceManager": MemberReference.from_dict(obj.get("serviceManager")) if obj.get("serviceManager") is not None else None
        })
        return _obj


