# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.address_format_reference import AddressFormatReference
from connectwise_psa.models.calendar_reference import CalendarReference
from connectwise_psa.models.ldap_configuration_reference import LdapConfigurationReference
from connectwise_psa.models.locale_reference import LocaleReference
from connectwise_psa.models.time_zone_setup_reference import TimeZoneSetupReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Other(BaseModel):
    """
    Other
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    contact_sync: Optional[StrictStr] = Field(default=None, alias="contactSync")
    default_address_format: Optional[AddressFormatReference] = Field(default=None, alias="defaultAddressFormat")
    default_calendar: Optional[CalendarReference] = Field(default=None, alias="defaultCalendar")
    default_from_address: StrictStr = Field(description=" Max length: 50;", alias="defaultFromAddress")
    default_ldap: Optional[LdapConfigurationReference] = Field(default=None, alias="defaultLdap")
    disable_z_admin_login_flag: Optional[StrictBool] = Field(default=None, alias="disableZAdminLoginFlag")
    id: Optional[StrictInt] = None
    include_portal_link_flag: Optional[StrictBool] = Field(default=None, alias="includePortalLinkFlag")
    locale: Optional[LocaleReference] = None
    logo_path: Optional[StrictStr] = Field(default=None, description=" Max length: 200;", alias="logoPath")
    portal_url_override: StrictStr = Field(description=" Max length: 100;", alias="portalUrlOverride")
    server_time_zone: Optional[TimeZoneSetupReference] = Field(default=None, alias="serverTimeZone")
    site_url: StrictStr = Field(description=" Max length: 100;", alias="siteUrl")
    sync_leads_flag: Optional[StrictBool] = Field(default=None, alias="syncLeadsFlag")
    update_member_time_zones_flag: Optional[StrictBool] = Field(default=None, description="If true, all Members time zone will also be set to serverTimeZone. Otherwise, only My Company time zone will be updated.", alias="updateMemberTimeZonesFlag")
    use_expanded_format_activity_flag: Optional[StrictBool] = Field(default=None, alias="useExpandedFormatActivityFlag")
    use_expanded_format_time_flag: Optional[StrictBool] = Field(default=None, alias="useExpandedFormatTimeFlag")
    use_ssl_flag: Optional[StrictBool] = Field(default=None, alias="useSslFlag")
    __properties: ClassVar[List[str]] = ["_info", "contactSync", "defaultAddressFormat", "defaultCalendar", "defaultFromAddress", "defaultLdap", "disableZAdminLoginFlag", "id", "includePortalLinkFlag", "locale", "logoPath", "portalUrlOverride", "serverTimeZone", "siteUrl", "syncLeadsFlag", "updateMemberTimeZonesFlag", "useExpandedFormatActivityFlag", "useExpandedFormatTimeFlag", "useSslFlag"]

    @field_validator('contact_sync')
    def contact_sync_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FL', 'LF', 'CFL', 'CLF'):
            raise ValueError("must be one of enum values ('FL', 'LF', 'CFL', 'CLF')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Other from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_address_format
        if self.default_address_format:
            _dict['defaultAddressFormat'] = self.default_address_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_calendar
        if self.default_calendar:
            _dict['defaultCalendar'] = self.default_calendar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_ldap
        if self.default_ldap:
            _dict['defaultLdap'] = self.default_ldap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of locale
        if self.locale:
            _dict['locale'] = self.locale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server_time_zone
        if self.server_time_zone:
            _dict['serverTimeZone'] = self.server_time_zone.to_dict()
        # set to None if contact_sync (nullable) is None
        # and model_fields_set contains the field
        if self.contact_sync is None and "contact_sync" in self.model_fields_set:
            _dict['contactSync'] = None

        # set to None if disable_z_admin_login_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disable_z_admin_login_flag is None and "disable_z_admin_login_flag" in self.model_fields_set:
            _dict['disableZAdminLoginFlag'] = None

        # set to None if include_portal_link_flag (nullable) is None
        # and model_fields_set contains the field
        if self.include_portal_link_flag is None and "include_portal_link_flag" in self.model_fields_set:
            _dict['includePortalLinkFlag'] = None

        # set to None if sync_leads_flag (nullable) is None
        # and model_fields_set contains the field
        if self.sync_leads_flag is None and "sync_leads_flag" in self.model_fields_set:
            _dict['syncLeadsFlag'] = None

        # set to None if update_member_time_zones_flag (nullable) is None
        # and model_fields_set contains the field
        if self.update_member_time_zones_flag is None and "update_member_time_zones_flag" in self.model_fields_set:
            _dict['updateMemberTimeZonesFlag'] = None

        # set to None if use_expanded_format_activity_flag (nullable) is None
        # and model_fields_set contains the field
        if self.use_expanded_format_activity_flag is None and "use_expanded_format_activity_flag" in self.model_fields_set:
            _dict['useExpandedFormatActivityFlag'] = None

        # set to None if use_expanded_format_time_flag (nullable) is None
        # and model_fields_set contains the field
        if self.use_expanded_format_time_flag is None and "use_expanded_format_time_flag" in self.model_fields_set:
            _dict['useExpandedFormatTimeFlag'] = None

        # set to None if use_ssl_flag (nullable) is None
        # and model_fields_set contains the field
        if self.use_ssl_flag is None and "use_ssl_flag" in self.model_fields_set:
            _dict['useSslFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Other from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Other) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "contactSync": obj.get("contactSync"),
            "defaultAddressFormat": AddressFormatReference.from_dict(obj.get("defaultAddressFormat")) if obj.get("defaultAddressFormat") is not None else None,
            "defaultCalendar": CalendarReference.from_dict(obj.get("defaultCalendar")) if obj.get("defaultCalendar") is not None else None,
            "defaultFromAddress": obj.get("defaultFromAddress"),
            "defaultLdap": LdapConfigurationReference.from_dict(obj.get("defaultLdap")) if obj.get("defaultLdap") is not None else None,
            "disableZAdminLoginFlag": obj.get("disableZAdminLoginFlag"),
            "id": obj.get("id"),
            "includePortalLinkFlag": obj.get("includePortalLinkFlag"),
            "locale": LocaleReference.from_dict(obj.get("locale")) if obj.get("locale") is not None else None,
            "logoPath": obj.get("logoPath"),
            "portalUrlOverride": obj.get("portalUrlOverride"),
            "serverTimeZone": TimeZoneSetupReference.from_dict(obj.get("serverTimeZone")) if obj.get("serverTimeZone") is not None else None,
            "siteUrl": obj.get("siteUrl"),
            "syncLeadsFlag": obj.get("syncLeadsFlag"),
            "updateMemberTimeZonesFlag": obj.get("updateMemberTimeZonesFlag"),
            "useExpandedFormatActivityFlag": obj.get("useExpandedFormatActivityFlag"),
            "useExpandedFormatTimeFlag": obj.get("useExpandedFormatTimeFlag"),
            "useSslFlag": obj.get("useSslFlag")
        })
        return _obj


