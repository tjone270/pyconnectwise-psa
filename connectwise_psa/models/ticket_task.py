# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.schedule_entry_reference import ScheduleEntryReference
from connectwise_psa.models.service_code_reference import ServiceCodeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TicketTask(BaseModel):
    """
    TicketTask
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    child_schedule_action: Optional[StrictStr] = Field(default=None, alias="childScheduleAction")
    child_ticket_id: Optional[StrictInt] = Field(default=None, alias="childTicketId")
    closed_flag: Optional[StrictBool] = Field(default=None, alias="closedFlag")
    code: Optional[ServiceCodeReference] = None
    id: Optional[StrictInt] = None
    notes: Optional[StrictStr] = None
    priority: Optional[StrictInt] = None
    resolution: Optional[StrictStr] = None
    schedule: Optional[ScheduleEntryReference] = None
    summary: Optional[StrictStr] = None
    ticket_id: Optional[StrictInt] = Field(default=None, alias="ticketId")
    __properties: ClassVar[List[str]] = ["_info", "childScheduleAction", "childTicketId", "closedFlag", "code", "id", "notes", "priority", "resolution", "schedule", "summary", "ticketId"]

    @field_validator('child_schedule_action')
    def child_schedule_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Transfer', 'Delete', 'Done'):
            raise ValueError("must be one of enum values ('Transfer', 'Delete', 'Done')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TicketTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of code
        if self.code:
            _dict['code'] = self.code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # set to None if child_schedule_action (nullable) is None
        # and model_fields_set contains the field
        if self.child_schedule_action is None and "child_schedule_action" in self.model_fields_set:
            _dict['childScheduleAction'] = None

        # set to None if child_ticket_id (nullable) is None
        # and model_fields_set contains the field
        if self.child_ticket_id is None and "child_ticket_id" in self.model_fields_set:
            _dict['childTicketId'] = None

        # set to None if closed_flag (nullable) is None
        # and model_fields_set contains the field
        if self.closed_flag is None and "closed_flag" in self.model_fields_set:
            _dict['closedFlag'] = None

        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict['priority'] = None

        # set to None if ticket_id (nullable) is None
        # and model_fields_set contains the field
        if self.ticket_id is None and "ticket_id" in self.model_fields_set:
            _dict['ticketId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TicketTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TicketTask) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "childScheduleAction": obj.get("childScheduleAction"),
            "childTicketId": obj.get("childTicketId"),
            "closedFlag": obj.get("closedFlag"),
            "code": ServiceCodeReference.from_dict(obj.get("code")) if obj.get("code") is not None else None,
            "id": obj.get("id"),
            "notes": obj.get("notes"),
            "priority": obj.get("priority"),
            "resolution": obj.get("resolution"),
            "schedule": ScheduleEntryReference.from_dict(obj.get("schedule")) if obj.get("schedule") is not None else None,
            "summary": obj.get("summary"),
            "ticketId": obj.get("ticketId")
        })
        return _obj


