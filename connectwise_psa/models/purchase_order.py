# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.country_reference import CountryReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.purchase_order_status_reference import PurchaseOrderStatusReference
from connectwise_psa.models.shipment_method_reference import ShipmentMethodReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
from connectwise_psa.models.warehouse_reference import WarehouseReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PurchaseOrder(BaseModel):
    """
    PurchaseOrder
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    business_unit_id: Optional[StrictInt] = Field(default=None, alias="businessUnitId")
    cancel_reason: Optional[StrictStr] = Field(default=None, alias="cancelReason")
    closed_by: Optional[StrictStr] = Field(default=None, alias="closedBy")
    closed_flag: Optional[StrictBool] = Field(default=None, description="The closed flag can only be updated via updating the purchase order status to a closed/open status.", alias="closedFlag")
    currency: Optional[CurrencyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    customer_city: Optional[StrictStr] = Field(default=None, alias="customerCity")
    customer_company: Optional[CompanyReference] = Field(default=None, alias="customerCompany")
    customer_contact: Optional[ContactReference] = Field(default=None, alias="customerContact")
    customer_country: Optional[CountryReference] = Field(default=None, alias="customerCountry")
    customer_extension: Optional[StrictStr] = Field(default=None, alias="customerExtension")
    customer_name: Optional[StrictStr] = Field(default=None, alias="customerName")
    customer_phone: Optional[StrictStr] = Field(default=None, alias="customerPhone")
    customer_site: Optional[SiteReference] = Field(default=None, alias="customerSite")
    customer_site_name: Optional[StrictStr] = Field(default=None, alias="customerSiteName")
    customer_state: Optional[StrictStr] = Field(default=None, alias="customerState")
    customer_street_line1: Optional[StrictStr] = Field(default=None, alias="customerStreetLine1")
    customer_street_line2: Optional[StrictStr] = Field(default=None, alias="customerStreetLine2")
    customer_zip: Optional[StrictStr] = Field(default=None, alias="customerZip")
    date_closed: Optional[datetime] = Field(default=None, alias="dateClosed")
    drop_ship_customer_flag: Optional[StrictBool] = Field(default=None, alias="dropShipCustomerFlag")
    entered_by: Optional[StrictStr] = Field(default=None, alias="enteredBy")
    freight_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freightCost")
    freight_packing_slip: Optional[StrictStr] = Field(default=None, alias="freightPackingSlip")
    freight_tax_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freightTaxTotal")
    id: Optional[StrictInt] = None
    internal_notes: Optional[StrictStr] = Field(default=None, alias="internalNotes")
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    po_date: Optional[datetime] = Field(default=None, description=" Required On Updates;", alias="poDate")
    po_number: Optional[StrictStr] = Field(default=None, description=" Required On Updates; Max length: 50;", alias="poNumber")
    sales_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="salesTax")
    shipment_date: Optional[datetime] = Field(default=None, alias="shipmentDate")
    shipment_method: Optional[ShipmentMethodReference] = Field(default=None, alias="shipmentMethod")
    shipping_instructions: Optional[StrictStr] = Field(default=None, alias="shippingInstructions")
    status: Optional[PurchaseOrderStatusReference] = None
    sub_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="subTotal")
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    tax_freight_flag: Optional[StrictBool] = Field(default=None, alias="taxFreightFlag")
    tax_po_flag: Optional[StrictBool] = Field(default=None, alias="taxPoFlag")
    terms: Optional[BillingTermsReference] = None
    total: Optional[Union[StrictFloat, StrictInt]] = None
    tracking_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="trackingNumber")
    update_shipment_info: Optional[StrictBool] = Field(default=None, description="Determines whether or not to update all of the shipment info for each associated line item when new shipment info is passed in.", alias="updateShipmentInfo")
    update_vendor_order_number: Optional[StrictBool] = Field(default=None, description="Determines whether or not to update vendor order number for each associated line item when new vendor order number is passed in.", alias="updateVendorOrderNumber")
    vendor_company: Optional[CompanyReference] = Field(default=None, alias="vendorCompany")
    vendor_contact: Optional[ContactReference] = Field(default=None, alias="vendorContact")
    vendor_invoice_date: Optional[datetime] = Field(default=None, alias="vendorInvoiceDate")
    vendor_invoice_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="vendorInvoiceNumber")
    vendor_order_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="vendorOrderNumber")
    vendor_site: Optional[SiteReference] = Field(default=None, alias="vendorSite")
    warehouse: Optional[WarehouseReference] = None
    warehouse_contact: Optional[ContactReference] = Field(default=None, alias="warehouseContact")
    __properties: ClassVar[List[str]] = ["_info", "businessUnitId", "cancelReason", "closedBy", "closedFlag", "currency", "customFields", "customerCity", "customerCompany", "customerContact", "customerCountry", "customerExtension", "customerName", "customerPhone", "customerSite", "customerSiteName", "customerState", "customerStreetLine1", "customerStreetLine2", "customerZip", "dateClosed", "dropShipCustomerFlag", "enteredBy", "freightCost", "freightPackingSlip", "freightTaxTotal", "id", "internalNotes", "locationId", "poDate", "poNumber", "salesTax", "shipmentDate", "shipmentMethod", "shippingInstructions", "status", "subTotal", "taxCode", "taxFreightFlag", "taxPoFlag", "terms", "total", "trackingNumber", "updateShipmentInfo", "updateVendorOrderNumber", "vendorCompany", "vendorContact", "vendorInvoiceDate", "vendorInvoiceNumber", "vendorOrderNumber", "vendorSite", "warehouse", "warehouseContact"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PurchaseOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of customer_company
        if self.customer_company:
            _dict['customerCompany'] = self.customer_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_contact
        if self.customer_contact:
            _dict['customerContact'] = self.customer_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_country
        if self.customer_country:
            _dict['customerCountry'] = self.customer_country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_site
        if self.customer_site:
            _dict['customerSite'] = self.customer_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipment_method
        if self.shipment_method:
            _dict['shipmentMethod'] = self.shipment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terms
        if self.terms:
            _dict['terms'] = self.terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor_company
        if self.vendor_company:
            _dict['vendorCompany'] = self.vendor_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor_contact
        if self.vendor_contact:
            _dict['vendorContact'] = self.vendor_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor_site
        if self.vendor_site:
            _dict['vendorSite'] = self.vendor_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse
        if self.warehouse:
            _dict['warehouse'] = self.warehouse.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse_contact
        if self.warehouse_contact:
            _dict['warehouseContact'] = self.warehouse_contact.to_dict()
        # set to None if business_unit_id (nullable) is None
        # and model_fields_set contains the field
        if self.business_unit_id is None and "business_unit_id" in self.model_fields_set:
            _dict['businessUnitId'] = None

        # set to None if closed_flag (nullable) is None
        # and model_fields_set contains the field
        if self.closed_flag is None and "closed_flag" in self.model_fields_set:
            _dict['closedFlag'] = None

        # set to None if drop_ship_customer_flag (nullable) is None
        # and model_fields_set contains the field
        if self.drop_ship_customer_flag is None and "drop_ship_customer_flag" in self.model_fields_set:
            _dict['dropShipCustomerFlag'] = None

        # set to None if freight_cost (nullable) is None
        # and model_fields_set contains the field
        if self.freight_cost is None and "freight_cost" in self.model_fields_set:
            _dict['freightCost'] = None

        # set to None if freight_tax_total (nullable) is None
        # and model_fields_set contains the field
        if self.freight_tax_total is None and "freight_tax_total" in self.model_fields_set:
            _dict['freightTaxTotal'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if sales_tax (nullable) is None
        # and model_fields_set contains the field
        if self.sales_tax is None and "sales_tax" in self.model_fields_set:
            _dict['salesTax'] = None

        # set to None if sub_total (nullable) is None
        # and model_fields_set contains the field
        if self.sub_total is None and "sub_total" in self.model_fields_set:
            _dict['subTotal'] = None

        # set to None if tax_freight_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_freight_flag is None and "tax_freight_flag" in self.model_fields_set:
            _dict['taxFreightFlag'] = None

        # set to None if tax_po_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_po_flag is None and "tax_po_flag" in self.model_fields_set:
            _dict['taxPoFlag'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if update_shipment_info (nullable) is None
        # and model_fields_set contains the field
        if self.update_shipment_info is None and "update_shipment_info" in self.model_fields_set:
            _dict['updateShipmentInfo'] = None

        # set to None if update_vendor_order_number (nullable) is None
        # and model_fields_set contains the field
        if self.update_vendor_order_number is None and "update_vendor_order_number" in self.model_fields_set:
            _dict['updateVendorOrderNumber'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PurchaseOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PurchaseOrder) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "businessUnitId": obj.get("businessUnitId"),
            "cancelReason": obj.get("cancelReason"),
            "closedBy": obj.get("closedBy"),
            "closedFlag": obj.get("closedFlag"),
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "customerCity": obj.get("customerCity"),
            "customerCompany": CompanyReference.from_dict(obj.get("customerCompany")) if obj.get("customerCompany") is not None else None,
            "customerContact": ContactReference.from_dict(obj.get("customerContact")) if obj.get("customerContact") is not None else None,
            "customerCountry": CountryReference.from_dict(obj.get("customerCountry")) if obj.get("customerCountry") is not None else None,
            "customerExtension": obj.get("customerExtension"),
            "customerName": obj.get("customerName"),
            "customerPhone": obj.get("customerPhone"),
            "customerSite": SiteReference.from_dict(obj.get("customerSite")) if obj.get("customerSite") is not None else None,
            "customerSiteName": obj.get("customerSiteName"),
            "customerState": obj.get("customerState"),
            "customerStreetLine1": obj.get("customerStreetLine1"),
            "customerStreetLine2": obj.get("customerStreetLine2"),
            "customerZip": obj.get("customerZip"),
            "dateClosed": obj.get("dateClosed"),
            "dropShipCustomerFlag": obj.get("dropShipCustomerFlag"),
            "enteredBy": obj.get("enteredBy"),
            "freightCost": obj.get("freightCost"),
            "freightPackingSlip": obj.get("freightPackingSlip"),
            "freightTaxTotal": obj.get("freightTaxTotal"),
            "id": obj.get("id"),
            "internalNotes": obj.get("internalNotes"),
            "locationId": obj.get("locationId"),
            "poDate": obj.get("poDate"),
            "poNumber": obj.get("poNumber"),
            "salesTax": obj.get("salesTax"),
            "shipmentDate": obj.get("shipmentDate"),
            "shipmentMethod": ShipmentMethodReference.from_dict(obj.get("shipmentMethod")) if obj.get("shipmentMethod") is not None else None,
            "shippingInstructions": obj.get("shippingInstructions"),
            "status": PurchaseOrderStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "subTotal": obj.get("subTotal"),
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "taxFreightFlag": obj.get("taxFreightFlag"),
            "taxPoFlag": obj.get("taxPoFlag"),
            "terms": BillingTermsReference.from_dict(obj.get("terms")) if obj.get("terms") is not None else None,
            "total": obj.get("total"),
            "trackingNumber": obj.get("trackingNumber"),
            "updateShipmentInfo": obj.get("updateShipmentInfo"),
            "updateVendorOrderNumber": obj.get("updateVendorOrderNumber"),
            "vendorCompany": CompanyReference.from_dict(obj.get("vendorCompany")) if obj.get("vendorCompany") is not None else None,
            "vendorContact": ContactReference.from_dict(obj.get("vendorContact")) if obj.get("vendorContact") is not None else None,
            "vendorInvoiceDate": obj.get("vendorInvoiceDate"),
            "vendorInvoiceNumber": obj.get("vendorInvoiceNumber"),
            "vendorOrderNumber": obj.get("vendorOrderNumber"),
            "vendorSite": SiteReference.from_dict(obj.get("vendorSite")) if obj.get("vendorSite") is not None else None,
            "warehouse": WarehouseReference.from_dict(obj.get("warehouse")) if obj.get("warehouse") is not None else None,
            "warehouseContact": ContactReference.from_dict(obj.get("warehouseContact")) if obj.get("warehouseContact") is not None else None
        })
        return _obj


