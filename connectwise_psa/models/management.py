# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.configuration_status_reference import ConfigurationStatusReference
from connectwise_psa.models.integrator_login_reference import IntegratorLoginReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Management(BaseModel):
    """
    Management
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    added_configuration_status: Optional[ConfigurationStatusReference] = Field(default=None, alias="addedConfigurationStatus")
    deleted_configuration_status: Optional[ConfigurationStatusReference] = Field(default=None, alias="deletedConfigurationStatus")
    executive_summary_report_schedule_day: Optional[StrictInt] = Field(default=None, description="Gets or sets             this is only required when scheduleExecutiveSummaryReportFlag = true.", alias="executiveSummaryReportScheduleDay")
    executive_summary_report_schedule_hour: Optional[StrictInt] = Field(default=None, description="Gets or sets             this is only required when scheduleExecutiveSummaryReportFlag = true. Input should be in 24 hour format, ie 2pm is 14.", alias="executiveSummaryReportScheduleHour")
    executive_summary_report_schedule_minute: Optional[StrictInt] = Field(default=None, description="Gets or sets             this is only required when scheduleExecutiveSummaryReportFlag = true.", alias="executiveSummaryReportScheduleMinute")
    id: Optional[StrictInt] = None
    integrator_login: Optional[IntegratorLoginReference] = Field(default=None, alias="integratorLogin")
    run_time: Optional[datetime] = Field(default=None, alias="runTime")
    schedule_executive_summary_report_flag: Optional[StrictBool] = Field(alias="scheduleExecutiveSummaryReportFlag")
    __properties: ClassVar[List[str]] = ["_info", "addedConfigurationStatus", "deletedConfigurationStatus", "executiveSummaryReportScheduleDay", "executiveSummaryReportScheduleHour", "executiveSummaryReportScheduleMinute", "id", "integratorLogin", "runTime", "scheduleExecutiveSummaryReportFlag"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Management from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of added_configuration_status
        if self.added_configuration_status:
            _dict['addedConfigurationStatus'] = self.added_configuration_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deleted_configuration_status
        if self.deleted_configuration_status:
            _dict['deletedConfigurationStatus'] = self.deleted_configuration_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integrator_login
        if self.integrator_login:
            _dict['integratorLogin'] = self.integrator_login.to_dict()
        # set to None if executive_summary_report_schedule_day (nullable) is None
        # and model_fields_set contains the field
        if self.executive_summary_report_schedule_day is None and "executive_summary_report_schedule_day" in self.model_fields_set:
            _dict['executiveSummaryReportScheduleDay'] = None

        # set to None if executive_summary_report_schedule_hour (nullable) is None
        # and model_fields_set contains the field
        if self.executive_summary_report_schedule_hour is None and "executive_summary_report_schedule_hour" in self.model_fields_set:
            _dict['executiveSummaryReportScheduleHour'] = None

        # set to None if executive_summary_report_schedule_minute (nullable) is None
        # and model_fields_set contains the field
        if self.executive_summary_report_schedule_minute is None and "executive_summary_report_schedule_minute" in self.model_fields_set:
            _dict['executiveSummaryReportScheduleMinute'] = None

        # set to None if schedule_executive_summary_report_flag (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_executive_summary_report_flag is None and "schedule_executive_summary_report_flag" in self.model_fields_set:
            _dict['scheduleExecutiveSummaryReportFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Management from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Management) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "addedConfigurationStatus": ConfigurationStatusReference.from_dict(obj.get("addedConfigurationStatus")) if obj.get("addedConfigurationStatus") is not None else None,
            "deletedConfigurationStatus": ConfigurationStatusReference.from_dict(obj.get("deletedConfigurationStatus")) if obj.get("deletedConfigurationStatus") is not None else None,
            "executiveSummaryReportScheduleDay": obj.get("executiveSummaryReportScheduleDay"),
            "executiveSummaryReportScheduleHour": obj.get("executiveSummaryReportScheduleHour"),
            "executiveSummaryReportScheduleMinute": obj.get("executiveSummaryReportScheduleMinute"),
            "id": obj.get("id"),
            "integratorLogin": IntegratorLoginReference.from_dict(obj.get("integratorLogin")) if obj.get("integratorLogin") is not None else None,
            "runTime": obj.get("runTime"),
            "scheduleExecutiveSummaryReportFlag": obj.get("scheduleExecutiveSummaryReportFlag")
        })
        return _obj


