# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProcurementSetting(BaseModel):
    """
    ProcurementSetting
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    auto_approve_purchase_order_flag: Optional[StrictBool] = Field(default=None, alias="autoApprovePurchaseOrderFlag")
    auto_close_purchase_order_flag: Optional[StrictBool] = Field(default=None, alias="autoClosePurchaseOrderFlag")
    auto_close_purchase_order_item_flag: Optional[StrictBool] = Field(default=None, alias="autoClosePurchaseOrderItemFlag")
    costing_method: Optional[StrictStr] = Field(alias="costingMethod")
    default_product_taxable_flag: Optional[StrictBool] = Field(default=None, alias="defaultProductTaxableFlag")
    disable_auto_pick_flag: Optional[StrictBool] = Field(default=None, alias="disableAutoPickFlag")
    disable_cost_updates_flag: Optional[StrictBool] = Field(default=None, alias="disableCostUpdatesFlag")
    disable_negative_inventory_flag: Optional[StrictBool] = Field(default=None, alias="disableNegativeInventoryFlag")
    eori_number: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="eoriNumber")
    id: Optional[StrictInt] = None
    num_decimal_places: Optional[StrictInt] = Field(default=None, alias="numDecimalPlaces")
    prefix_suffix_type: Optional[StrictStr] = Field(default=None, alias="prefixSuffixType")
    purchase_order_prefix: Optional[StrictStr] = Field(default=None, description=" Max length: 5;", alias="purchaseOrderPrefix")
    purchase_order_suffix: Optional[StrictStr] = Field(default=None, description=" Max length: 5;", alias="purchaseOrderSuffix")
    starting_purchase_order_num: StrictInt = Field(alias="startingPurchaseOrderNum")
    tax_freight_flag: Optional[StrictBool] = Field(default=None, alias="taxFreightFlag")
    tax_purchase_order_flag: Optional[StrictBool] = Field(default=None, alias="taxPurchaseOrderFlag")
    use_vendor_tax_code_flag: Optional[StrictBool] = Field(default=None, alias="useVendorTaxCodeFlag")
    __properties: ClassVar[List[str]] = ["_info", "autoApprovePurchaseOrderFlag", "autoClosePurchaseOrderFlag", "autoClosePurchaseOrderItemFlag", "costingMethod", "defaultProductTaxableFlag", "disableAutoPickFlag", "disableCostUpdatesFlag", "disableNegativeInventoryFlag", "eoriNumber", "id", "numDecimalPlaces", "prefixSuffixType", "purchaseOrderPrefix", "purchaseOrderSuffix", "startingPurchaseOrderNum", "taxFreightFlag", "taxPurchaseOrderFlag", "useVendorTaxCodeFlag"]

    @field_validator('costing_method')
    def costing_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FIFO', 'LIFO', 'AverageCosting'):
            raise ValueError("must be one of enum values ('FIFO', 'LIFO', 'AverageCosting')")
        return value

    @field_validator('prefix_suffix_type')
    def prefix_suffix_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Prefix', 'Suffix'):
            raise ValueError("must be one of enum values ('Prefix', 'Suffix')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProcurementSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if auto_approve_purchase_order_flag (nullable) is None
        # and model_fields_set contains the field
        if self.auto_approve_purchase_order_flag is None and "auto_approve_purchase_order_flag" in self.model_fields_set:
            _dict['autoApprovePurchaseOrderFlag'] = None

        # set to None if auto_close_purchase_order_flag (nullable) is None
        # and model_fields_set contains the field
        if self.auto_close_purchase_order_flag is None and "auto_close_purchase_order_flag" in self.model_fields_set:
            _dict['autoClosePurchaseOrderFlag'] = None

        # set to None if auto_close_purchase_order_item_flag (nullable) is None
        # and model_fields_set contains the field
        if self.auto_close_purchase_order_item_flag is None and "auto_close_purchase_order_item_flag" in self.model_fields_set:
            _dict['autoClosePurchaseOrderItemFlag'] = None

        # set to None if costing_method (nullable) is None
        # and model_fields_set contains the field
        if self.costing_method is None and "costing_method" in self.model_fields_set:
            _dict['costingMethod'] = None

        # set to None if default_product_taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.default_product_taxable_flag is None and "default_product_taxable_flag" in self.model_fields_set:
            _dict['defaultProductTaxableFlag'] = None

        # set to None if disable_auto_pick_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disable_auto_pick_flag is None and "disable_auto_pick_flag" in self.model_fields_set:
            _dict['disableAutoPickFlag'] = None

        # set to None if disable_cost_updates_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disable_cost_updates_flag is None and "disable_cost_updates_flag" in self.model_fields_set:
            _dict['disableCostUpdatesFlag'] = None

        # set to None if disable_negative_inventory_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disable_negative_inventory_flag is None and "disable_negative_inventory_flag" in self.model_fields_set:
            _dict['disableNegativeInventoryFlag'] = None

        # set to None if num_decimal_places (nullable) is None
        # and model_fields_set contains the field
        if self.num_decimal_places is None and "num_decimal_places" in self.model_fields_set:
            _dict['numDecimalPlaces'] = None

        # set to None if prefix_suffix_type (nullable) is None
        # and model_fields_set contains the field
        if self.prefix_suffix_type is None and "prefix_suffix_type" in self.model_fields_set:
            _dict['prefixSuffixType'] = None

        # set to None if tax_freight_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_freight_flag is None and "tax_freight_flag" in self.model_fields_set:
            _dict['taxFreightFlag'] = None

        # set to None if tax_purchase_order_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_purchase_order_flag is None and "tax_purchase_order_flag" in self.model_fields_set:
            _dict['taxPurchaseOrderFlag'] = None

        # set to None if use_vendor_tax_code_flag (nullable) is None
        # and model_fields_set contains the field
        if self.use_vendor_tax_code_flag is None and "use_vendor_tax_code_flag" in self.model_fields_set:
            _dict['useVendorTaxCodeFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProcurementSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ProcurementSetting) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "autoApprovePurchaseOrderFlag": obj.get("autoApprovePurchaseOrderFlag"),
            "autoClosePurchaseOrderFlag": obj.get("autoClosePurchaseOrderFlag"),
            "autoClosePurchaseOrderItemFlag": obj.get("autoClosePurchaseOrderItemFlag"),
            "costingMethod": obj.get("costingMethod"),
            "defaultProductTaxableFlag": obj.get("defaultProductTaxableFlag"),
            "disableAutoPickFlag": obj.get("disableAutoPickFlag"),
            "disableCostUpdatesFlag": obj.get("disableCostUpdatesFlag"),
            "disableNegativeInventoryFlag": obj.get("disableNegativeInventoryFlag"),
            "eoriNumber": obj.get("eoriNumber"),
            "id": obj.get("id"),
            "numDecimalPlaces": obj.get("numDecimalPlaces"),
            "prefixSuffixType": obj.get("prefixSuffixType"),
            "purchaseOrderPrefix": obj.get("purchaseOrderPrefix"),
            "purchaseOrderSuffix": obj.get("purchaseOrderSuffix"),
            "startingPurchaseOrderNum": obj.get("startingPurchaseOrderNum"),
            "taxFreightFlag": obj.get("taxFreightFlag"),
            "taxPurchaseOrderFlag": obj.get("taxPurchaseOrderFlag"),
            "useVendorTaxCodeFlag": obj.get("useVendorTaxCodeFlag")
        })
        return _obj


