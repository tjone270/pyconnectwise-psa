# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.email_template_reference import EmailTemplateReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompanyFinance(BaseModel):
    """
    CompanyFinance
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    bill_complete_pm_flag: Optional[StrictBool] = Field(default=None, alias="billCompletePmFlag")
    bill_complete_sr_flag: Optional[StrictBool] = Field(default=None, alias="billCompleteSrFlag")
    bill_override_flag: Optional[StrictBool] = Field(default=None, alias="billOverrideFlag")
    bill_restrict_pm_flag: Optional[StrictBool] = Field(default=None, alias="billRestrictPmFlag")
    bill_sr_flag: Optional[StrictBool] = Field(default=None, alias="billSrFlag")
    bill_unapproved_pm_flag: Optional[StrictBool] = Field(default=None, alias="billUnapprovedPmFlag")
    bill_unapproved_sr_flag: Optional[StrictBool] = Field(default=None, alias="billUnapprovedSrFlag")
    company: Optional[CompanyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    email_template: Optional[EmailTemplateReference] = Field(default=None, alias="emailTemplate")
    id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["_info", "billCompletePmFlag", "billCompleteSrFlag", "billOverrideFlag", "billRestrictPmFlag", "billSrFlag", "billUnapprovedPmFlag", "billUnapprovedSrFlag", "company", "customFields", "emailTemplate", "id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompanyFinance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of email_template
        if self.email_template:
            _dict['emailTemplate'] = self.email_template.to_dict()
        # set to None if bill_complete_pm_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_complete_pm_flag is None and "bill_complete_pm_flag" in self.model_fields_set:
            _dict['billCompletePmFlag'] = None

        # set to None if bill_complete_sr_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_complete_sr_flag is None and "bill_complete_sr_flag" in self.model_fields_set:
            _dict['billCompleteSrFlag'] = None

        # set to None if bill_override_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_override_flag is None and "bill_override_flag" in self.model_fields_set:
            _dict['billOverrideFlag'] = None

        # set to None if bill_restrict_pm_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_restrict_pm_flag is None and "bill_restrict_pm_flag" in self.model_fields_set:
            _dict['billRestrictPmFlag'] = None

        # set to None if bill_sr_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_sr_flag is None and "bill_sr_flag" in self.model_fields_set:
            _dict['billSrFlag'] = None

        # set to None if bill_unapproved_pm_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_unapproved_pm_flag is None and "bill_unapproved_pm_flag" in self.model_fields_set:
            _dict['billUnapprovedPmFlag'] = None

        # set to None if bill_unapproved_sr_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_unapproved_sr_flag is None and "bill_unapproved_sr_flag" in self.model_fields_set:
            _dict['billUnapprovedSrFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompanyFinance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CompanyFinance) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "billCompletePmFlag": obj.get("billCompletePmFlag"),
            "billCompleteSrFlag": obj.get("billCompleteSrFlag"),
            "billOverrideFlag": obj.get("billOverrideFlag"),
            "billRestrictPmFlag": obj.get("billRestrictPmFlag"),
            "billSrFlag": obj.get("billSrFlag"),
            "billUnapprovedPmFlag": obj.get("billUnapprovedPmFlag"),
            "billUnapprovedSrFlag": obj.get("billUnapprovedSrFlag"),
            "company": CompanyReference.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "emailTemplate": EmailTemplateReference.from_dict(obj.get("emailTemplate")) if obj.get("emailTemplate") is not None else None,
            "id": obj.get("id")
        })
        return _obj


