# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.graph_user_csv import GraphUserCsv
from connectwise_psa.models.m365_tenant import M365Tenant
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class M365ContactSyncCompany(BaseModel):
    """
    M365ContactSyncCompany
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    are_all_microsoft365_contact_sync_inactive: Optional[StrictBool] = Field(default=None, alias="areAllMicrosoft365ContactSyncInactive")
    company_id: Optional[StrictStr] = Field(default=None, alias="companyId")
    company_rec_id: Optional[StrictInt] = Field(default=None, alias="companyRecId")
    contacts: Optional[List[GraphUserCsv]] = None
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    id: Optional[StrictInt] = None
    inactive_flag_tenant: Optional[StrictBool] = Field(default=None, alias="inactiveFlagTenant")
    m365_tenant: Optional[M365Tenant] = Field(default=None, alias="m365Tenant")
    parent_tenant_id: Optional[StrictStr] = Field(default=None, alias="parentTenantId")
    sync_flag: Optional[StrictBool] = Field(default=None, alias="syncFlag")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    __properties: ClassVar[List[str]] = ["_info", "areAllMicrosoft365ContactSyncInactive", "companyId", "companyRecId", "contacts", "displayName", "id", "inactiveFlagTenant", "m365Tenant", "parentTenantId", "syncFlag", "tenantId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of M365ContactSyncCompany from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item in self.contacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of m365_tenant
        if self.m365_tenant:
            _dict['m365Tenant'] = self.m365_tenant.to_dict()
        # set to None if are_all_microsoft365_contact_sync_inactive (nullable) is None
        # and model_fields_set contains the field
        if self.are_all_microsoft365_contact_sync_inactive is None and "are_all_microsoft365_contact_sync_inactive" in self.model_fields_set:
            _dict['areAllMicrosoft365ContactSyncInactive'] = None

        # set to None if inactive_flag_tenant (nullable) is None
        # and model_fields_set contains the field
        if self.inactive_flag_tenant is None and "inactive_flag_tenant" in self.model_fields_set:
            _dict['inactiveFlagTenant'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of M365ContactSyncCompany from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in M365ContactSyncCompany) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "areAllMicrosoft365ContactSyncInactive": obj.get("areAllMicrosoft365ContactSyncInactive"),
            "companyId": obj.get("companyId"),
            "companyRecId": obj.get("companyRecId"),
            "contacts": [GraphUserCsv.from_dict(_item) for _item in obj.get("contacts")] if obj.get("contacts") is not None else None,
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "inactiveFlagTenant": obj.get("inactiveFlagTenant"),
            "m365Tenant": M365Tenant.from_dict(obj.get("m365Tenant")) if obj.get("m365Tenant") is not None else None,
            "parentTenantId": obj.get("parentTenantId"),
            "syncFlag": obj.get("syncFlag"),
            "tenantId": obj.get("tenantId")
        })
        return _obj


