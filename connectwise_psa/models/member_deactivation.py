# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool
from pydantic import Field
from connectwise_psa.models.member_deactivation_company_team import MemberDeactivationCompanyTeam
from connectwise_psa.models.member_deactivation_department_mananager import MemberDeactivationDepartmentMananager
from connectwise_psa.models.member_deactivation_dispatch_member import MemberDeactivationDispatchMember
from connectwise_psa.models.member_deactivation_duty_manager import MemberDeactivationDutyManager
from connectwise_psa.models.member_deactivation_knowledgebase_article import MemberDeactivationKnowledgebaseArticle
from connectwise_psa.models.member_deactivation_my_company_controller_role import MemberDeactivationMyCompanyControllerRole
from connectwise_psa.models.member_deactivation_my_company_coo_role import MemberDeactivationMyCompanyCOORole
from connectwise_psa.models.member_deactivation_my_company_dispatch_role import MemberDeactivationMyCompanyDispatchRole
from connectwise_psa.models.member_deactivation_my_company_duty_manager_role import MemberDeactivationMyCompanyDutyManagerRole
from connectwise_psa.models.member_deactivation_my_company_president_role import MemberDeactivationMyCompanyPresidentRole
from connectwise_psa.models.member_deactivation_my_company_service_manager_role import MemberDeactivationMyCompanyServiceManagerRole
from connectwise_psa.models.member_deactivation_opportunity import MemberDeactivationOpportunity
from connectwise_psa.models.member_deactivation_project_manager import MemberDeactivationProjectManager
from connectwise_psa.models.member_deactivation_sales_activity import MemberDeactivationSalesActivity
from connectwise_psa.models.member_deactivation_sales_team import MemberDeactivationSalesTeam
from connectwise_psa.models.member_deactivation_send_from_email_notify import MemberDeactivationSendFromEmailNotify
from connectwise_psa.models.member_deactivation_service_manger import MemberDeactivationServiceManger
from connectwise_psa.models.member_deactivation_service_team import MemberDeactivationServiceTeam
from connectwise_psa.models.member_deactivation_service_template import MemberDeactivationServiceTemplate
from connectwise_psa.models.member_deactivation_status_workflow import MemberDeactivationStatusWorkflow
from connectwise_psa.models.member_deactivation_workflow import MemberDeactivationWorkflow
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MemberDeactivation(BaseModel):
    """
    MemberDeactivation
    """ # noqa: E501
    activity: Optional[MemberDeactivationSalesActivity] = None
    company_team: Optional[List[MemberDeactivationCompanyTeam]] = Field(default=None, description="A list of customers for which the member holds a team role", alias="companyTeam")
    delete_open_time_sheets_flag: Optional[StrictBool] = Field(default=None, description="By default, this is set to false             If there is any open timesheets, system will return error message             that there is open timesheets still attached to this member             If user would like to delete member with open timesheets, they can set this boolean to TRUE             System will delete member and any associated open timesheets", alias="deleteOpenTimeSheetsFlag")
    department_manager: Optional[MemberDeactivationDepartmentMananager] = Field(default=None, alias="departmentManager")
    dispatch_member: Optional[MemberDeactivationDispatchMember] = Field(default=None, alias="dispatchMember")
    duty_manager: Optional[MemberDeactivationDutyManager] = Field(default=None, alias="dutyManager")
    knowledge_base_article: Optional[MemberDeactivationKnowledgebaseArticle] = Field(default=None, alias="knowledgeBaseArticle")
    my_company_coo: Optional[MemberDeactivationMyCompanyCOORole] = Field(default=None, alias="myCompanyCOO")
    my_company_controller: Optional[MemberDeactivationMyCompanyControllerRole] = Field(default=None, alias="myCompanyController")
    my_company_dispatch: Optional[MemberDeactivationMyCompanyDispatchRole] = Field(default=None, alias="myCompanyDispatch")
    my_company_duty_manager_role: Optional[MemberDeactivationMyCompanyDutyManagerRole] = Field(default=None, alias="myCompanyDutyManagerRole")
    my_company_president: Optional[MemberDeactivationMyCompanyPresidentRole] = Field(default=None, alias="myCompanyPresident")
    my_company_service_manager: Optional[MemberDeactivationMyCompanyServiceManagerRole] = Field(default=None, alias="myCompanyServiceManager")
    opportunity: Optional[MemberDeactivationOpportunity] = None
    project_expense_approver: Optional[MemberDeactivationProjectManager] = Field(default=None, alias="projectExpenseApprover")
    project_manager: Optional[MemberDeactivationProjectManager] = Field(default=None, alias="projectManager")
    project_time_approver: Optional[MemberDeactivationProjectManager] = Field(default=None, alias="projectTimeApprover")
    sales_team: Optional[MemberDeactivationSalesTeam] = Field(default=None, alias="salesTeam")
    send_from_email_notify: Optional[MemberDeactivationSendFromEmailNotify] = Field(default=None, alias="sendFromEmailNotify")
    service_manager: Optional[MemberDeactivationServiceManger] = Field(default=None, alias="serviceManager")
    service_status_workflow: Optional[List[MemberDeactivationStatusWorkflow]] = Field(default=None, alias="serviceStatusWorkflow")
    service_team: Optional[MemberDeactivationServiceTeam] = Field(default=None, alias="serviceTeam")
    ticket_template: Optional[MemberDeactivationServiceTemplate] = Field(default=None, alias="ticketTemplate")
    workflow_email: Optional[MemberDeactivationWorkflow] = Field(default=None, alias="workflowEmail")
    __properties: ClassVar[List[str]] = ["activity", "companyTeam", "deleteOpenTimeSheetsFlag", "departmentManager", "dispatchMember", "dutyManager", "knowledgeBaseArticle", "myCompanyCOO", "myCompanyController", "myCompanyDispatch", "myCompanyDutyManagerRole", "myCompanyPresident", "myCompanyServiceManager", "opportunity", "projectExpenseApprover", "projectManager", "projectTimeApprover", "salesTeam", "sendFromEmailNotify", "serviceManager", "serviceStatusWorkflow", "serviceTeam", "ticketTemplate", "workflowEmail"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MemberDeactivation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of activity
        if self.activity:
            _dict['activity'] = self.activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in company_team (list)
        _items = []
        if self.company_team:
            for _item in self.company_team:
                if _item:
                    _items.append(_item.to_dict())
            _dict['companyTeam'] = _items
        # override the default output from pydantic by calling `to_dict()` of department_manager
        if self.department_manager:
            _dict['departmentManager'] = self.department_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dispatch_member
        if self.dispatch_member:
            _dict['dispatchMember'] = self.dispatch_member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duty_manager
        if self.duty_manager:
            _dict['dutyManager'] = self.duty_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of knowledge_base_article
        if self.knowledge_base_article:
            _dict['knowledgeBaseArticle'] = self.knowledge_base_article.to_dict()
        # override the default output from pydantic by calling `to_dict()` of my_company_coo
        if self.my_company_coo:
            _dict['myCompanyCOO'] = self.my_company_coo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of my_company_controller
        if self.my_company_controller:
            _dict['myCompanyController'] = self.my_company_controller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of my_company_dispatch
        if self.my_company_dispatch:
            _dict['myCompanyDispatch'] = self.my_company_dispatch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of my_company_duty_manager_role
        if self.my_company_duty_manager_role:
            _dict['myCompanyDutyManagerRole'] = self.my_company_duty_manager_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of my_company_president
        if self.my_company_president:
            _dict['myCompanyPresident'] = self.my_company_president.to_dict()
        # override the default output from pydantic by calling `to_dict()` of my_company_service_manager
        if self.my_company_service_manager:
            _dict['myCompanyServiceManager'] = self.my_company_service_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opportunity
        if self.opportunity:
            _dict['opportunity'] = self.opportunity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_expense_approver
        if self.project_expense_approver:
            _dict['projectExpenseApprover'] = self.project_expense_approver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_manager
        if self.project_manager:
            _dict['projectManager'] = self.project_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_time_approver
        if self.project_time_approver:
            _dict['projectTimeApprover'] = self.project_time_approver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sales_team
        if self.sales_team:
            _dict['salesTeam'] = self.sales_team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of send_from_email_notify
        if self.send_from_email_notify:
            _dict['sendFromEmailNotify'] = self.send_from_email_notify.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_manager
        if self.service_manager:
            _dict['serviceManager'] = self.service_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_status_workflow (list)
        _items = []
        if self.service_status_workflow:
            for _item in self.service_status_workflow:
                if _item:
                    _items.append(_item.to_dict())
            _dict['serviceStatusWorkflow'] = _items
        # override the default output from pydantic by calling `to_dict()` of service_team
        if self.service_team:
            _dict['serviceTeam'] = self.service_team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket_template
        if self.ticket_template:
            _dict['ticketTemplate'] = self.ticket_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow_email
        if self.workflow_email:
            _dict['workflowEmail'] = self.workflow_email.to_dict()
        # set to None if delete_open_time_sheets_flag (nullable) is None
        # and model_fields_set contains the field
        if self.delete_open_time_sheets_flag is None and "delete_open_time_sheets_flag" in self.model_fields_set:
            _dict['deleteOpenTimeSheetsFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MemberDeactivation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in MemberDeactivation) in the input: " + _key)

        _obj = cls.model_validate({
            "activity": MemberDeactivationSalesActivity.from_dict(obj.get("activity")) if obj.get("activity") is not None else None,
            "companyTeam": [MemberDeactivationCompanyTeam.from_dict(_item) for _item in obj.get("companyTeam")] if obj.get("companyTeam") is not None else None,
            "deleteOpenTimeSheetsFlag": obj.get("deleteOpenTimeSheetsFlag"),
            "departmentManager": MemberDeactivationDepartmentMananager.from_dict(obj.get("departmentManager")) if obj.get("departmentManager") is not None else None,
            "dispatchMember": MemberDeactivationDispatchMember.from_dict(obj.get("dispatchMember")) if obj.get("dispatchMember") is not None else None,
            "dutyManager": MemberDeactivationDutyManager.from_dict(obj.get("dutyManager")) if obj.get("dutyManager") is not None else None,
            "knowledgeBaseArticle": MemberDeactivationKnowledgebaseArticle.from_dict(obj.get("knowledgeBaseArticle")) if obj.get("knowledgeBaseArticle") is not None else None,
            "myCompanyCOO": MemberDeactivationMyCompanyCOORole.from_dict(obj.get("myCompanyCOO")) if obj.get("myCompanyCOO") is not None else None,
            "myCompanyController": MemberDeactivationMyCompanyControllerRole.from_dict(obj.get("myCompanyController")) if obj.get("myCompanyController") is not None else None,
            "myCompanyDispatch": MemberDeactivationMyCompanyDispatchRole.from_dict(obj.get("myCompanyDispatch")) if obj.get("myCompanyDispatch") is not None else None,
            "myCompanyDutyManagerRole": MemberDeactivationMyCompanyDutyManagerRole.from_dict(obj.get("myCompanyDutyManagerRole")) if obj.get("myCompanyDutyManagerRole") is not None else None,
            "myCompanyPresident": MemberDeactivationMyCompanyPresidentRole.from_dict(obj.get("myCompanyPresident")) if obj.get("myCompanyPresident") is not None else None,
            "myCompanyServiceManager": MemberDeactivationMyCompanyServiceManagerRole.from_dict(obj.get("myCompanyServiceManager")) if obj.get("myCompanyServiceManager") is not None else None,
            "opportunity": MemberDeactivationOpportunity.from_dict(obj.get("opportunity")) if obj.get("opportunity") is not None else None,
            "projectExpenseApprover": MemberDeactivationProjectManager.from_dict(obj.get("projectExpenseApprover")) if obj.get("projectExpenseApprover") is not None else None,
            "projectManager": MemberDeactivationProjectManager.from_dict(obj.get("projectManager")) if obj.get("projectManager") is not None else None,
            "projectTimeApprover": MemberDeactivationProjectManager.from_dict(obj.get("projectTimeApprover")) if obj.get("projectTimeApprover") is not None else None,
            "salesTeam": MemberDeactivationSalesTeam.from_dict(obj.get("salesTeam")) if obj.get("salesTeam") is not None else None,
            "sendFromEmailNotify": MemberDeactivationSendFromEmailNotify.from_dict(obj.get("sendFromEmailNotify")) if obj.get("sendFromEmailNotify") is not None else None,
            "serviceManager": MemberDeactivationServiceManger.from_dict(obj.get("serviceManager")) if obj.get("serviceManager") is not None else None,
            "serviceStatusWorkflow": [MemberDeactivationStatusWorkflow.from_dict(_item) for _item in obj.get("serviceStatusWorkflow")] if obj.get("serviceStatusWorkflow") is not None else None,
            "serviceTeam": MemberDeactivationServiceTeam.from_dict(obj.get("serviceTeam")) if obj.get("serviceTeam") is not None else None,
            "ticketTemplate": MemberDeactivationServiceTemplate.from_dict(obj.get("ticketTemplate")) if obj.get("ticketTemplate") is not None else None,
            "workflowEmail": MemberDeactivationWorkflow.from_dict(obj.get("workflowEmail")) if obj.get("workflowEmail") is not None else None
        })
        return _obj


