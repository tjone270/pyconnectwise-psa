# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.member_reference import MemberReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SsoUser(BaseModel):
    """
    SsoUser
    """ # noqa: E501
    date_entered: Optional[StrictStr] = Field(default=None, alias="dateEntered")
    disabled_flag: Optional[StrictBool] = Field(default=None, alias="disabledFlag")
    email: Optional[StrictStr] = None
    email_confirmed: Optional[StrictBool] = Field(default=None, alias="emailConfirmed")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    id: Optional[StrictInt] = None
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    last_updated: Optional[StrictStr] = Field(default=None, alias="lastUpdated")
    linked_flag: Optional[StrictBool] = Field(default=None, alias="linkedFlag")
    linked_member: Optional[MemberReference] = Field(default=None, alias="linkedMember")
    sso_user_id: Optional[StrictStr] = Field(default=None, alias="ssoUserId")
    user_name: Optional[StrictStr] = Field(default=None, alias="userName")
    __properties: ClassVar[List[str]] = ["dateEntered", "disabledFlag", "email", "emailConfirmed", "firstName", "id", "lastName", "lastUpdated", "linkedFlag", "linkedMember", "ssoUserId", "userName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SsoUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of linked_member
        if self.linked_member:
            _dict['linkedMember'] = self.linked_member.to_dict()
        # set to None if disabled_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disabled_flag is None and "disabled_flag" in self.model_fields_set:
            _dict['disabledFlag'] = None

        # set to None if email_confirmed (nullable) is None
        # and model_fields_set contains the field
        if self.email_confirmed is None and "email_confirmed" in self.model_fields_set:
            _dict['emailConfirmed'] = None

        # set to None if linked_flag (nullable) is None
        # and model_fields_set contains the field
        if self.linked_flag is None and "linked_flag" in self.model_fields_set:
            _dict['linkedFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SsoUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SsoUser) in the input: " + _key)

        _obj = cls.model_validate({
            "dateEntered": obj.get("dateEntered"),
            "disabledFlag": obj.get("disabledFlag"),
            "email": obj.get("email"),
            "emailConfirmed": obj.get("emailConfirmed"),
            "firstName": obj.get("firstName"),
            "id": obj.get("id"),
            "lastName": obj.get("lastName"),
            "lastUpdated": obj.get("lastUpdated"),
            "linkedFlag": obj.get("linkedFlag"),
            "linkedMember": MemberReference.from_dict(obj.get("linkedMember")) if obj.get("linkedMember") is not None else None,
            "ssoUserId": obj.get("ssoUserId"),
            "userName": obj.get("userName")
        })
        return _obj


