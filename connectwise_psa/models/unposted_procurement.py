# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.purchase_order_reference import PurchaseOrderReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UnpostedProcurement(BaseModel):
    """
    UnpostedProcurement
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    avalara_tax_flag: Optional[StrictBool] = Field(default=None, description="Used to determine if Avalara tax is enabled.", alias="avalaraTaxFlag")
    billing_terms: Optional[BillingTermsReference] = Field(default=None, alias="billingTerms")
    city_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cityTaxAmount")
    city_tax_flag: Optional[StrictBool] = Field(default=None, description="Set to true if transaction is taxable at the city level.", alias="cityTaxFlag")
    city_tax_xref: Optional[StrictStr] = Field(default=None, alias="cityTaxXref")
    composite_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="compositeTaxAmount")
    composite_tax_flag: Optional[StrictBool] = Field(default=None, description="Set to true if transaction is taxable at the composite level.", alias="compositeTaxFlag")
    composite_tax_xref: Optional[StrictStr] = Field(default=None, alias="compositeTaxXref")
    country_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="countryTaxAmount")
    country_tax_flag: Optional[StrictBool] = Field(default=None, description="Set to true if transaction is taxable at the country level.", alias="countryTaxFlag")
    country_tax_xref: Optional[StrictStr] = Field(default=None, alias="countryTaxXref")
    county_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="countyTaxAmount")
    county_tax_flag: Optional[StrictBool] = Field(default=None, description="Set to true if transaction is taxable at the county level.", alias="countyTaxFlag")
    county_tax_xref: Optional[StrictStr] = Field(default=None, alias="countyTaxXref")
    currency: Optional[CurrencyReference] = None
    customer: Optional[CompanyReference] = None
    date_closed: Optional[StrictStr] = Field(default=None, alias="dateClosed")
    department_id: Optional[StrictInt] = Field(default=None, alias="departmentId")
    description: Optional[StrictStr] = None
    freight_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freightCost")
    freight_tax_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freightTaxTotal")
    id: Optional[StrictInt] = None
    item_taxable_flag: Optional[StrictBool] = Field(default=None, alias="itemTaxableFlag")
    level_six_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="levelSixTaxAmount")
    level_six_tax_flag: Optional[StrictBool] = Field(default=None, description="Set to true if transaction is taxable at level six.", alias="levelSixTaxFlag")
    level_six_tax_xref: Optional[StrictStr] = Field(default=None, alias="levelSixTaxXref")
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    procurement_type: Optional[StrictStr] = Field(default=None, alias="procurementType")
    purchase_date: Optional[StrictStr] = Field(default=None, alias="purchaseDate")
    purchase_order: Optional[PurchaseOrderReference] = Field(default=None, alias="purchaseOrder")
    purchase_order_taxable_flag: Optional[StrictBool] = Field(default=None, alias="purchaseOrderTaxableFlag")
    state_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="stateTaxAmount")
    state_tax_flag: Optional[StrictBool] = Field(default=None, description="Set to true if transaction is taxable at the state level.", alias="stateTaxFlag")
    state_tax_xref: Optional[StrictStr] = Field(default=None, alias="stateTaxXref")
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    tax_freight_flag: Optional[StrictBool] = Field(default=None, alias="taxFreightFlag")
    tax_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxTotal")
    total: Optional[Union[StrictFloat, StrictInt]] = None
    tracking_number: Optional[StrictStr] = Field(default=None, alias="trackingNumber")
    unposted_product_id: Optional[StrictStr] = Field(default=None, alias="unpostedProductId")
    vendor: Optional[CompanyReference] = None
    vendor_account_number: Optional[StrictStr] = Field(default=None, alias="vendorAccountNumber")
    vendor_invoice_date: Optional[StrictStr] = Field(default=None, alias="vendorInvoiceDate")
    vendor_invoice_number: Optional[StrictStr] = Field(default=None, alias="vendorInvoiceNumber")
    __properties: ClassVar[List[str]] = ["_info", "avalaraTaxFlag", "billingTerms", "cityTaxAmount", "cityTaxFlag", "cityTaxXref", "compositeTaxAmount", "compositeTaxFlag", "compositeTaxXref", "countryTaxAmount", "countryTaxFlag", "countryTaxXref", "countyTaxAmount", "countyTaxFlag", "countyTaxXref", "currency", "customer", "dateClosed", "departmentId", "description", "freightCost", "freightTaxTotal", "id", "itemTaxableFlag", "levelSixTaxAmount", "levelSixTaxFlag", "levelSixTaxXref", "locationId", "procurementType", "purchaseDate", "purchaseOrder", "purchaseOrderTaxableFlag", "stateTaxAmount", "stateTaxFlag", "stateTaxXref", "taxCode", "taxFreightFlag", "taxTotal", "total", "trackingNumber", "unpostedProductId", "vendor", "vendorAccountNumber", "vendorInvoiceDate", "vendorInvoiceNumber"]

    @field_validator('procurement_type')
    def procurement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Purchase', 'Adjustment', 'Transfer'):
            raise ValueError("must be one of enum values ('Purchase', 'Adjustment', 'Transfer')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UnpostedProcurement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_terms
        if self.billing_terms:
            _dict['billingTerms'] = self.billing_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchase_order
        if self.purchase_order:
            _dict['purchaseOrder'] = self.purchase_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # set to None if avalara_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.avalara_tax_flag is None and "avalara_tax_flag" in self.model_fields_set:
            _dict['avalaraTaxFlag'] = None

        # set to None if city_tax_amount (nullable) is None
        # and model_fields_set contains the field
        if self.city_tax_amount is None and "city_tax_amount" in self.model_fields_set:
            _dict['cityTaxAmount'] = None

        # set to None if city_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.city_tax_flag is None and "city_tax_flag" in self.model_fields_set:
            _dict['cityTaxFlag'] = None

        # set to None if composite_tax_amount (nullable) is None
        # and model_fields_set contains the field
        if self.composite_tax_amount is None and "composite_tax_amount" in self.model_fields_set:
            _dict['compositeTaxAmount'] = None

        # set to None if composite_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.composite_tax_flag is None and "composite_tax_flag" in self.model_fields_set:
            _dict['compositeTaxFlag'] = None

        # set to None if country_tax_amount (nullable) is None
        # and model_fields_set contains the field
        if self.country_tax_amount is None and "country_tax_amount" in self.model_fields_set:
            _dict['countryTaxAmount'] = None

        # set to None if country_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.country_tax_flag is None and "country_tax_flag" in self.model_fields_set:
            _dict['countryTaxFlag'] = None

        # set to None if county_tax_amount (nullable) is None
        # and model_fields_set contains the field
        if self.county_tax_amount is None and "county_tax_amount" in self.model_fields_set:
            _dict['countyTaxAmount'] = None

        # set to None if county_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.county_tax_flag is None and "county_tax_flag" in self.model_fields_set:
            _dict['countyTaxFlag'] = None

        # set to None if department_id (nullable) is None
        # and model_fields_set contains the field
        if self.department_id is None and "department_id" in self.model_fields_set:
            _dict['departmentId'] = None

        # set to None if freight_cost (nullable) is None
        # and model_fields_set contains the field
        if self.freight_cost is None and "freight_cost" in self.model_fields_set:
            _dict['freightCost'] = None

        # set to None if freight_tax_total (nullable) is None
        # and model_fields_set contains the field
        if self.freight_tax_total is None and "freight_tax_total" in self.model_fields_set:
            _dict['freightTaxTotal'] = None

        # set to None if item_taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.item_taxable_flag is None and "item_taxable_flag" in self.model_fields_set:
            _dict['itemTaxableFlag'] = None

        # set to None if level_six_tax_amount (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_tax_amount is None and "level_six_tax_amount" in self.model_fields_set:
            _dict['levelSixTaxAmount'] = None

        # set to None if level_six_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.level_six_tax_flag is None and "level_six_tax_flag" in self.model_fields_set:
            _dict['levelSixTaxFlag'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if procurement_type (nullable) is None
        # and model_fields_set contains the field
        if self.procurement_type is None and "procurement_type" in self.model_fields_set:
            _dict['procurementType'] = None

        # set to None if purchase_order_taxable_flag (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_order_taxable_flag is None and "purchase_order_taxable_flag" in self.model_fields_set:
            _dict['purchaseOrderTaxableFlag'] = None

        # set to None if state_tax_amount (nullable) is None
        # and model_fields_set contains the field
        if self.state_tax_amount is None and "state_tax_amount" in self.model_fields_set:
            _dict['stateTaxAmount'] = None

        # set to None if state_tax_flag (nullable) is None
        # and model_fields_set contains the field
        if self.state_tax_flag is None and "state_tax_flag" in self.model_fields_set:
            _dict['stateTaxFlag'] = None

        # set to None if tax_freight_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_freight_flag is None and "tax_freight_flag" in self.model_fields_set:
            _dict['taxFreightFlag'] = None

        # set to None if tax_total (nullable) is None
        # and model_fields_set contains the field
        if self.tax_total is None and "tax_total" in self.model_fields_set:
            _dict['taxTotal'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UnpostedProcurement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in UnpostedProcurement) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "avalaraTaxFlag": obj.get("avalaraTaxFlag"),
            "billingTerms": BillingTermsReference.from_dict(obj.get("billingTerms")) if obj.get("billingTerms") is not None else None,
            "cityTaxAmount": obj.get("cityTaxAmount"),
            "cityTaxFlag": obj.get("cityTaxFlag"),
            "cityTaxXref": obj.get("cityTaxXref"),
            "compositeTaxAmount": obj.get("compositeTaxAmount"),
            "compositeTaxFlag": obj.get("compositeTaxFlag"),
            "compositeTaxXref": obj.get("compositeTaxXref"),
            "countryTaxAmount": obj.get("countryTaxAmount"),
            "countryTaxFlag": obj.get("countryTaxFlag"),
            "countryTaxXref": obj.get("countryTaxXref"),
            "countyTaxAmount": obj.get("countyTaxAmount"),
            "countyTaxFlag": obj.get("countyTaxFlag"),
            "countyTaxXref": obj.get("countyTaxXref"),
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customer": CompanyReference.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "dateClosed": obj.get("dateClosed"),
            "departmentId": obj.get("departmentId"),
            "description": obj.get("description"),
            "freightCost": obj.get("freightCost"),
            "freightTaxTotal": obj.get("freightTaxTotal"),
            "id": obj.get("id"),
            "itemTaxableFlag": obj.get("itemTaxableFlag"),
            "levelSixTaxAmount": obj.get("levelSixTaxAmount"),
            "levelSixTaxFlag": obj.get("levelSixTaxFlag"),
            "levelSixTaxXref": obj.get("levelSixTaxXref"),
            "locationId": obj.get("locationId"),
            "procurementType": obj.get("procurementType"),
            "purchaseDate": obj.get("purchaseDate"),
            "purchaseOrder": PurchaseOrderReference.from_dict(obj.get("purchaseOrder")) if obj.get("purchaseOrder") is not None else None,
            "purchaseOrderTaxableFlag": obj.get("purchaseOrderTaxableFlag"),
            "stateTaxAmount": obj.get("stateTaxAmount"),
            "stateTaxFlag": obj.get("stateTaxFlag"),
            "stateTaxXref": obj.get("stateTaxXref"),
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "taxFreightFlag": obj.get("taxFreightFlag"),
            "taxTotal": obj.get("taxTotal"),
            "total": obj.get("total"),
            "trackingNumber": obj.get("trackingNumber"),
            "unpostedProductId": obj.get("unpostedProductId"),
            "vendor": CompanyReference.from_dict(obj.get("vendor")) if obj.get("vendor") is not None else None,
            "vendorAccountNumber": obj.get("vendorAccountNumber"),
            "vendorInvoiceDate": obj.get("vendorInvoiceDate"),
            "vendorInvoiceNumber": obj.get("vendorInvoiceNumber")
        })
        return _obj


