# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.priority_reference import PriorityReference
from connectwise_psa.models.service_source_reference import ServiceSourceReference
from connectwise_psa.models.work_role_reference import WorkRoleReference
from connectwise_psa.models.work_type_reference import WorkTypeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectTemplateTicket(BaseModel):
    """
    ProjectTemplateTicket
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    bill_separately_flag: Optional[StrictBool] = Field(default=None, alias="billSeparatelyFlag")
    budget_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="budgetHours")
    description: StrictStr = Field(description=" Max length: 100;")
    duration: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    internal_analysis: Optional[StrictStr] = Field(default=None, alias="internalAnalysis")
    line_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lineNumber")
    mark_as_milestone_flag: Optional[StrictBool] = Field(default=None, alias="markAsMilestoneFlag")
    notes: Optional[StrictStr] = None
    pm_tmp_project_rec_id: Optional[StrictInt] = Field(default=None, alias="pmTmpProjectRecID")
    priority: Optional[PriorityReference] = None
    project_template_id: Optional[StrictInt] = Field(default=None, alias="projectTemplateId")
    project_template_phase_id: Optional[StrictInt] = Field(default=None, alias="projectTemplatePhaseId")
    record_type: Optional[StrictStr] = Field(default=None, description=" Max length: 1;", alias="recordType")
    resolution: Optional[StrictStr] = None
    source: Optional[ServiceSourceReference] = None
    wbs_code: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="wbsCode")
    work_role: Optional[WorkRoleReference] = Field(default=None, alias="workRole")
    work_type: Optional[WorkTypeReference] = Field(default=None, alias="workType")
    __properties: ClassVar[List[str]] = ["_info", "billSeparatelyFlag", "budgetHours", "description", "duration", "id", "internalAnalysis", "lineNumber", "markAsMilestoneFlag", "notes", "pmTmpProjectRecID", "priority", "projectTemplateId", "projectTemplatePhaseId", "recordType", "resolution", "source", "wbsCode", "workRole", "workType"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectTemplateTicket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_role
        if self.work_role:
            _dict['workRole'] = self.work_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_type
        if self.work_type:
            _dict['workType'] = self.work_type.to_dict()
        # set to None if bill_separately_flag (nullable) is None
        # and model_fields_set contains the field
        if self.bill_separately_flag is None and "bill_separately_flag" in self.model_fields_set:
            _dict['billSeparatelyFlag'] = None

        # set to None if budget_hours (nullable) is None
        # and model_fields_set contains the field
        if self.budget_hours is None and "budget_hours" in self.model_fields_set:
            _dict['budgetHours'] = None

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict['duration'] = None

        # set to None if line_number (nullable) is None
        # and model_fields_set contains the field
        if self.line_number is None and "line_number" in self.model_fields_set:
            _dict['lineNumber'] = None

        # set to None if mark_as_milestone_flag (nullable) is None
        # and model_fields_set contains the field
        if self.mark_as_milestone_flag is None and "mark_as_milestone_flag" in self.model_fields_set:
            _dict['markAsMilestoneFlag'] = None

        # set to None if pm_tmp_project_rec_id (nullable) is None
        # and model_fields_set contains the field
        if self.pm_tmp_project_rec_id is None and "pm_tmp_project_rec_id" in self.model_fields_set:
            _dict['pmTmpProjectRecID'] = None

        # set to None if project_template_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_template_id is None and "project_template_id" in self.model_fields_set:
            _dict['projectTemplateId'] = None

        # set to None if project_template_phase_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_template_phase_id is None and "project_template_phase_id" in self.model_fields_set:
            _dict['projectTemplatePhaseId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectTemplateTicket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ProjectTemplateTicket) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "billSeparatelyFlag": obj.get("billSeparatelyFlag"),
            "budgetHours": obj.get("budgetHours"),
            "description": obj.get("description"),
            "duration": obj.get("duration"),
            "id": obj.get("id"),
            "internalAnalysis": obj.get("internalAnalysis"),
            "lineNumber": obj.get("lineNumber"),
            "markAsMilestoneFlag": obj.get("markAsMilestoneFlag"),
            "notes": obj.get("notes"),
            "pmTmpProjectRecID": obj.get("pmTmpProjectRecID"),
            "priority": PriorityReference.from_dict(obj.get("priority")) if obj.get("priority") is not None else None,
            "projectTemplateId": obj.get("projectTemplateId"),
            "projectTemplatePhaseId": obj.get("projectTemplatePhaseId"),
            "recordType": obj.get("recordType"),
            "resolution": obj.get("resolution"),
            "source": ServiceSourceReference.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "wbsCode": obj.get("wbsCode"),
            "workRole": WorkRoleReference.from_dict(obj.get("workRole")) if obj.get("workRole") is not None else None,
            "workType": WorkTypeReference.from_dict(obj.get("workType")) if obj.get("workType") is not None else None
        })
        return _obj


