# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.generic_name_id_dto import GenericNameIdDTO
from connectwise_psa.models.user_defined_field_value_model import UserDefinedFieldValueModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AgreementRecurringParameters(BaseModel):
    """
    AgreementRecurringParameters
    """ # noqa: E501
    a_gr_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="aGRAmount")
    a_gr_prorate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="aGRProrate")
    additions_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="additionsAmount")
    auto_invoice_flag: Optional[StrictBool] = Field(default=None, alias="autoInvoiceFlag")
    bill_start_date: Optional[StrictStr] = Field(default=None, alias="billStartDate")
    billing_cycle: Optional[GenericNameIdDTO] = Field(default=None, alias="billingCycle")
    children_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="childrenAmount")
    currency: Optional[GenericNameIdDTO] = None
    cycle_base: Optional[GenericNameIdDTO] = Field(default=None, alias="cycleBase")
    invoice_prorated_additions_flag: Optional[StrictBool] = Field(default=None, alias="invoiceProratedAdditionsFlag")
    prorate_flag: Optional[StrictBool] = Field(default=None, alias="prorateFlag")
    restrict_downpayment: Optional[StrictBool] = Field(default=None, alias="restrictDownpayment")
    tax_code: Optional[GenericNameIdDTO] = Field(default=None, alias="taxCode")
    taxable: Optional[StrictBool] = None
    terms: Optional[GenericNameIdDTO] = None
    total_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalAmount")
    user_defined_field_values: Optional[List[UserDefinedFieldValueModel]] = Field(default=None, alias="userDefinedFieldValues")
    __properties: ClassVar[List[str]] = ["aGRAmount", "aGRProrate", "additionsAmount", "autoInvoiceFlag", "billStartDate", "billingCycle", "childrenAmount", "currency", "cycleBase", "invoiceProratedAdditionsFlag", "prorateFlag", "restrictDownpayment", "taxCode", "taxable", "terms", "totalAmount", "userDefinedFieldValues"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AgreementRecurringParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_cycle
        if self.billing_cycle:
            _dict['billingCycle'] = self.billing_cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cycle_base
        if self.cycle_base:
            _dict['cycleBase'] = self.cycle_base.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terms
        if self.terms:
            _dict['terms'] = self.terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_defined_field_values (list)
        _items = []
        if self.user_defined_field_values:
            for _item in self.user_defined_field_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['userDefinedFieldValues'] = _items
        # set to None if a_gr_amount (nullable) is None
        # and model_fields_set contains the field
        if self.a_gr_amount is None and "a_gr_amount" in self.model_fields_set:
            _dict['aGRAmount'] = None

        # set to None if a_gr_prorate (nullable) is None
        # and model_fields_set contains the field
        if self.a_gr_prorate is None and "a_gr_prorate" in self.model_fields_set:
            _dict['aGRProrate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AgreementRecurringParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in AgreementRecurringParameters) in the input: " + _key)

        _obj = cls.model_validate({
            "aGRAmount": obj.get("aGRAmount"),
            "aGRProrate": obj.get("aGRProrate"),
            "additionsAmount": obj.get("additionsAmount"),
            "autoInvoiceFlag": obj.get("autoInvoiceFlag"),
            "billStartDate": obj.get("billStartDate"),
            "billingCycle": GenericNameIdDTO.from_dict(obj.get("billingCycle")) if obj.get("billingCycle") is not None else None,
            "childrenAmount": obj.get("childrenAmount"),
            "currency": GenericNameIdDTO.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "cycleBase": GenericNameIdDTO.from_dict(obj.get("cycleBase")) if obj.get("cycleBase") is not None else None,
            "invoiceProratedAdditionsFlag": obj.get("invoiceProratedAdditionsFlag"),
            "prorateFlag": obj.get("prorateFlag"),
            "restrictDownpayment": obj.get("restrictDownpayment"),
            "taxCode": GenericNameIdDTO.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "taxable": obj.get("taxable"),
            "terms": GenericNameIdDTO.from_dict(obj.get("terms")) if obj.get("terms") is not None else None,
            "totalAmount": obj.get("totalAmount"),
            "userDefinedFieldValues": [UserDefinedFieldValueModel.from_dict(_item) for _item in obj.get("userDefinedFieldValues")] if obj.get("userDefinedFieldValues") is not None else None
        })
        return _obj


