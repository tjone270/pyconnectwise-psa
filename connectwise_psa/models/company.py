# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.billing_delivery_reference import BillingDeliveryReference
from connectwise_psa.models.billing_terms_reference import BillingTermsReference
from connectwise_psa.models.calendar_reference import CalendarReference
from connectwise_psa.models.company_reference import CompanyReference
from connectwise_psa.models.company_status_reference import CompanyStatusReference
from connectwise_psa.models.company_type_reference import CompanyTypeReference
from connectwise_psa.models.contact_reference import ContactReference
from connectwise_psa.models.country_reference import CountryReference
from connectwise_psa.models.currency_reference import CurrencyReference
from connectwise_psa.models.custom_field_value import CustomFieldValue
from connectwise_psa.models.entity_type_reference import EntityTypeReference
from connectwise_psa.models.invoice_template_reference import InvoiceTemplateReference
from connectwise_psa.models.market_description_reference import MarketDescriptionReference
from connectwise_psa.models.member_reference import MemberReference
from connectwise_psa.models.ownership_type_reference import OwnershipTypeReference
from connectwise_psa.models.pricing_schedule_reference import PricingScheduleReference
from connectwise_psa.models.sic_code_reference import SicCodeReference
from connectwise_psa.models.site_reference import SiteReference
from connectwise_psa.models.system_location_reference import SystemLocationReference
from connectwise_psa.models.tax_code_reference import TaxCodeReference
from connectwise_psa.models.time_zone_setup_reference import TimeZoneSetupReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Company(BaseModel):
    """
    Company
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    address_line1: Optional[StrictStr] = Field(default=None, description="Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;", alias="addressLine2")
    annual_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="annualRevenue")
    bill_to_company: Optional[CompanyReference] = Field(default=None, alias="billToCompany")
    billing_contact: Optional[ContactReference] = Field(default=None, alias="billingContact")
    billing_site: Optional[SiteReference] = Field(default=None, alias="billingSite")
    billing_terms: Optional[BillingTermsReference] = Field(default=None, alias="billingTerms")
    calendar: Optional[CalendarReference] = None
    city: Optional[StrictStr] = Field(default=None, description="Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;")
    company_entity_type: Optional[EntityTypeReference] = Field(default=None, alias="companyEntityType")
    country: Optional[CountryReference] = None
    currency: Optional[CurrencyReference] = None
    custom_fields: Optional[List[CustomFieldValue]] = Field(default=None, alias="customFields")
    date_acquired: Optional[datetime] = Field(default=None, alias="dateAcquired")
    date_deleted: Optional[datetime] = Field(default=None, alias="dateDeleted")
    default_contact: Optional[ContactReference] = Field(default=None, alias="defaultContact")
    deleted_by: Optional[StrictStr] = Field(default=None, alias="deletedBy")
    deleted_flag: Optional[StrictBool] = Field(default=None, alias="deletedFlag")
    facebook_url: Optional[StrictStr] = Field(default=None, alias="facebookUrl")
    fax_number: Optional[StrictStr] = Field(default=None, description=" Max length: 30;", alias="faxNumber")
    id: Optional[StrictInt] = None
    identifier: StrictStr = Field(description=" Max length: 30;")
    integrator_tags: Optional[List[StrictStr]] = Field(default=None, alias="integratorTags")
    invoice_cc_email_address: Optional[StrictStr] = Field(default=None, alias="invoiceCCEmailAddress")
    invoice_delivery_method: Optional[BillingDeliveryReference] = Field(default=None, alias="invoiceDeliveryMethod")
    invoice_template: Optional[InvoiceTemplateReference] = Field(default=None, alias="invoiceTemplate")
    invoice_to_email_address: Optional[StrictStr] = Field(default=None, alias="invoiceToEmailAddress")
    is_vendor_flag: Optional[StrictBool] = Field(default=None, alias="isVendorFlag")
    lead_flag: Optional[StrictBool] = Field(default=None, alias="leadFlag")
    lead_source: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="leadSource")
    linked_in_url: Optional[StrictStr] = Field(default=None, alias="linkedInUrl")
    market: Optional[MarketDescriptionReference] = None
    mobile_guid: Optional[StrictStr] = Field(default=None, alias="mobileGuid")
    name: StrictStr = Field(description=" Max length: 50;")
    number_of_employees: Optional[StrictInt] = Field(default=None, alias="numberOfEmployees")
    ownership_type: Optional[OwnershipTypeReference] = Field(default=None, alias="ownershipType")
    parent_company: Optional[CompanyReference] = Field(default=None, alias="parentCompany")
    phone_number: Optional[StrictStr] = Field(default=None, description=" Max length: 30;", alias="phoneNumber")
    pricing_schedule: Optional[PricingScheduleReference] = Field(default=None, alias="pricingSchedule")
    reseller_identifier: Optional[StrictStr] = Field(default=None, alias="resellerIdentifier")
    revenue_year: Optional[StrictInt] = Field(default=None, alias="revenueYear")
    sic_code: Optional[SicCodeReference] = Field(default=None, alias="sicCode")
    site: Optional[SiteReference] = None
    state: Optional[StrictStr] = Field(default=None, description="Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;")
    status: Optional[CompanyStatusReference] = None
    tax_code: Optional[TaxCodeReference] = Field(default=None, alias="taxCode")
    tax_identifier: Optional[StrictStr] = Field(default=None, alias="taxIdentifier")
    territory: Optional[SystemLocationReference] = None
    territory_manager: Optional[MemberReference] = Field(default=None, alias="territoryManager")
    time_zone_setup: Optional[TimeZoneSetupReference] = Field(default=None, alias="timeZoneSetup")
    twitter_url: Optional[StrictStr] = Field(default=None, alias="twitterUrl")
    types: Optional[List[CompanyTypeReference]] = Field(default=None, description="Gets or sets integrer array of Company_Type_Recids to be assigned to company that can be passed in only during new company creation (post)             To update existing companies type, use the /company/companyTypeAssociations or /company/companies/{ID}/typeAssociations endpoints.")
    unsubscribe_flag: Optional[StrictBool] = Field(default=None, alias="unsubscribeFlag")
    user_defined_field1: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField1")
    user_defined_field10: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField10")
    user_defined_field2: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField2")
    user_defined_field3: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField3")
    user_defined_field4: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField4")
    user_defined_field5: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField5")
    user_defined_field6: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField6")
    user_defined_field7: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField7")
    user_defined_field8: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField8")
    user_defined_field9: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="userDefinedField9")
    vendor_identifier: Optional[StrictStr] = Field(default=None, alias="vendorIdentifier")
    website: Optional[StrictStr] = Field(default=None, description=" Max length: 255;")
    year_established: Optional[StrictInt] = Field(default=None, alias="yearEstablished")
    zip: Optional[StrictStr] = Field(default=None, description="Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 12;")
    __properties: ClassVar[List[str]] = ["_info", "accountNumber", "addressLine1", "addressLine2", "annualRevenue", "billToCompany", "billingContact", "billingSite", "billingTerms", "calendar", "city", "companyEntityType", "country", "currency", "customFields", "dateAcquired", "dateDeleted", "defaultContact", "deletedBy", "deletedFlag", "facebookUrl", "faxNumber", "id", "identifier", "integratorTags", "invoiceCCEmailAddress", "invoiceDeliveryMethod", "invoiceTemplate", "invoiceToEmailAddress", "isVendorFlag", "leadFlag", "leadSource", "linkedInUrl", "market", "mobileGuid", "name", "numberOfEmployees", "ownershipType", "parentCompany", "phoneNumber", "pricingSchedule", "resellerIdentifier", "revenueYear", "sicCode", "site", "state", "status", "taxCode", "taxIdentifier", "territory", "territoryManager", "timeZoneSetup", "twitterUrl", "types", "unsubscribeFlag", "userDefinedField1", "userDefinedField10", "userDefinedField2", "userDefinedField3", "userDefinedField4", "userDefinedField5", "userDefinedField6", "userDefinedField7", "userDefinedField8", "userDefinedField9", "vendorIdentifier", "website", "yearEstablished", "zip"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Company from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bill_to_company
        if self.bill_to_company:
            _dict['billToCompany'] = self.bill_to_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_contact
        if self.billing_contact:
            _dict['billingContact'] = self.billing_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_site
        if self.billing_site:
            _dict['billingSite'] = self.billing_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_terms
        if self.billing_terms:
            _dict['billingTerms'] = self.billing_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar
        if self.calendar:
            _dict['calendar'] = self.calendar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_entity_type
        if self.company_entity_type:
            _dict['companyEntityType'] = self.company_entity_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_contact
        if self.default_contact:
            _dict['defaultContact'] = self.default_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_delivery_method
        if self.invoice_delivery_method:
            _dict['invoiceDeliveryMethod'] = self.invoice_delivery_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_template
        if self.invoice_template:
            _dict['invoiceTemplate'] = self.invoice_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market
        if self.market:
            _dict['market'] = self.market.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ownership_type
        if self.ownership_type:
            _dict['ownershipType'] = self.ownership_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_company
        if self.parent_company:
            _dict['parentCompany'] = self.parent_company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing_schedule
        if self.pricing_schedule:
            _dict['pricingSchedule'] = self.pricing_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sic_code
        if self.sic_code:
            _dict['sicCode'] = self.sic_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_code
        if self.tax_code:
            _dict['taxCode'] = self.tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of territory
        if self.territory:
            _dict['territory'] = self.territory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of territory_manager
        if self.territory_manager:
            _dict['territoryManager'] = self.territory_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_zone_setup
        if self.time_zone_setup:
            _dict['timeZoneSetup'] = self.time_zone_setup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in types (list)
        _items = []
        if self.types:
            for _item in self.types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['types'] = _items
        # set to None if annual_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.annual_revenue is None and "annual_revenue" in self.model_fields_set:
            _dict['annualRevenue'] = None

        # set to None if deleted_flag (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_flag is None and "deleted_flag" in self.model_fields_set:
            _dict['deletedFlag'] = None

        # set to None if is_vendor_flag (nullable) is None
        # and model_fields_set contains the field
        if self.is_vendor_flag is None and "is_vendor_flag" in self.model_fields_set:
            _dict['isVendorFlag'] = None

        # set to None if lead_flag (nullable) is None
        # and model_fields_set contains the field
        if self.lead_flag is None and "lead_flag" in self.model_fields_set:
            _dict['leadFlag'] = None

        # set to None if mobile_guid (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_guid is None and "mobile_guid" in self.model_fields_set:
            _dict['mobileGuid'] = None

        # set to None if number_of_employees (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_employees is None and "number_of_employees" in self.model_fields_set:
            _dict['numberOfEmployees'] = None

        # set to None if revenue_year (nullable) is None
        # and model_fields_set contains the field
        if self.revenue_year is None and "revenue_year" in self.model_fields_set:
            _dict['revenueYear'] = None

        # set to None if unsubscribe_flag (nullable) is None
        # and model_fields_set contains the field
        if self.unsubscribe_flag is None and "unsubscribe_flag" in self.model_fields_set:
            _dict['unsubscribeFlag'] = None

        # set to None if year_established (nullable) is None
        # and model_fields_set contains the field
        if self.year_established is None and "year_established" in self.model_fields_set:
            _dict['yearEstablished'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Company from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Company) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "accountNumber": obj.get("accountNumber"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "annualRevenue": obj.get("annualRevenue"),
            "billToCompany": CompanyReference.from_dict(obj.get("billToCompany")) if obj.get("billToCompany") is not None else None,
            "billingContact": ContactReference.from_dict(obj.get("billingContact")) if obj.get("billingContact") is not None else None,
            "billingSite": SiteReference.from_dict(obj.get("billingSite")) if obj.get("billingSite") is not None else None,
            "billingTerms": BillingTermsReference.from_dict(obj.get("billingTerms")) if obj.get("billingTerms") is not None else None,
            "calendar": CalendarReference.from_dict(obj.get("calendar")) if obj.get("calendar") is not None else None,
            "city": obj.get("city"),
            "companyEntityType": EntityTypeReference.from_dict(obj.get("companyEntityType")) if obj.get("companyEntityType") is not None else None,
            "country": CountryReference.from_dict(obj.get("country")) if obj.get("country") is not None else None,
            "currency": CurrencyReference.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "customFields": [CustomFieldValue.from_dict(_item) for _item in obj.get("customFields")] if obj.get("customFields") is not None else None,
            "dateAcquired": obj.get("dateAcquired"),
            "dateDeleted": obj.get("dateDeleted"),
            "defaultContact": ContactReference.from_dict(obj.get("defaultContact")) if obj.get("defaultContact") is not None else None,
            "deletedBy": obj.get("deletedBy"),
            "deletedFlag": obj.get("deletedFlag"),
            "facebookUrl": obj.get("facebookUrl"),
            "faxNumber": obj.get("faxNumber"),
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "integratorTags": obj.get("integratorTags"),
            "invoiceCCEmailAddress": obj.get("invoiceCCEmailAddress"),
            "invoiceDeliveryMethod": BillingDeliveryReference.from_dict(obj.get("invoiceDeliveryMethod")) if obj.get("invoiceDeliveryMethod") is not None else None,
            "invoiceTemplate": InvoiceTemplateReference.from_dict(obj.get("invoiceTemplate")) if obj.get("invoiceTemplate") is not None else None,
            "invoiceToEmailAddress": obj.get("invoiceToEmailAddress"),
            "isVendorFlag": obj.get("isVendorFlag"),
            "leadFlag": obj.get("leadFlag"),
            "leadSource": obj.get("leadSource"),
            "linkedInUrl": obj.get("linkedInUrl"),
            "market": MarketDescriptionReference.from_dict(obj.get("market")) if obj.get("market") is not None else None,
            "mobileGuid": obj.get("mobileGuid"),
            "name": obj.get("name"),
            "numberOfEmployees": obj.get("numberOfEmployees"),
            "ownershipType": OwnershipTypeReference.from_dict(obj.get("ownershipType")) if obj.get("ownershipType") is not None else None,
            "parentCompany": CompanyReference.from_dict(obj.get("parentCompany")) if obj.get("parentCompany") is not None else None,
            "phoneNumber": obj.get("phoneNumber"),
            "pricingSchedule": PricingScheduleReference.from_dict(obj.get("pricingSchedule")) if obj.get("pricingSchedule") is not None else None,
            "resellerIdentifier": obj.get("resellerIdentifier"),
            "revenueYear": obj.get("revenueYear"),
            "sicCode": SicCodeReference.from_dict(obj.get("sicCode")) if obj.get("sicCode") is not None else None,
            "site": SiteReference.from_dict(obj.get("site")) if obj.get("site") is not None else None,
            "state": obj.get("state"),
            "status": CompanyStatusReference.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "taxCode": TaxCodeReference.from_dict(obj.get("taxCode")) if obj.get("taxCode") is not None else None,
            "taxIdentifier": obj.get("taxIdentifier"),
            "territory": SystemLocationReference.from_dict(obj.get("territory")) if obj.get("territory") is not None else None,
            "territoryManager": MemberReference.from_dict(obj.get("territoryManager")) if obj.get("territoryManager") is not None else None,
            "timeZoneSetup": TimeZoneSetupReference.from_dict(obj.get("timeZoneSetup")) if obj.get("timeZoneSetup") is not None else None,
            "twitterUrl": obj.get("twitterUrl"),
            "types": [CompanyTypeReference.from_dict(_item) for _item in obj.get("types")] if obj.get("types") is not None else None,
            "unsubscribeFlag": obj.get("unsubscribeFlag"),
            "userDefinedField1": obj.get("userDefinedField1"),
            "userDefinedField10": obj.get("userDefinedField10"),
            "userDefinedField2": obj.get("userDefinedField2"),
            "userDefinedField3": obj.get("userDefinedField3"),
            "userDefinedField4": obj.get("userDefinedField4"),
            "userDefinedField5": obj.get("userDefinedField5"),
            "userDefinedField6": obj.get("userDefinedField6"),
            "userDefinedField7": obj.get("userDefinedField7"),
            "userDefinedField8": obj.get("userDefinedField8"),
            "userDefinedField9": obj.get("userDefinedField9"),
            "vendorIdentifier": obj.get("vendorIdentifier"),
            "website": obj.get("website"),
            "yearEstablished": obj.get("yearEstablished"),
            "zip": obj.get("zip")
        })
        return _obj


