# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.board_reference import BoardReference
from connectwise_psa.models.email_connector_parsing_style_reference import EmailConnectorParsingStyleReference
from connectwise_psa.models.email_connector_parsing_variable_reference import EmailConnectorParsingVariableReference
from connectwise_psa.models.priority_reference import PriorityReference
from connectwise_psa.models.service_item_reference import ServiceItemReference
from connectwise_psa.models.service_status_reference import ServiceStatusReference
from connectwise_psa.models.service_sub_type_reference import ServiceSubTypeReference
from connectwise_psa.models.service_type_reference import ServiceTypeReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EmailConnectorParsingRule(BaseModel):
    """
    EmailConnectorParsingRule
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    id: Optional[StrictInt] = None
    parsing_style: Optional[EmailConnectorParsingStyleReference] = Field(default=None, alias="parsingStyle")
    parsing_variable: Optional[EmailConnectorParsingVariableReference] = Field(default=None, alias="parsingVariable")
    priority: Optional[StrictInt]
    search_term: StrictStr = Field(description=" Max length: 250;", alias="searchTerm")
    service_board: Optional[BoardReference] = Field(default=None, alias="serviceBoard")
    service_item: Optional[ServiceItemReference] = Field(default=None, alias="serviceItem")
    service_priority: Optional[PriorityReference] = Field(default=None, alias="servicePriority")
    service_status: Optional[ServiceStatusReference] = Field(default=None, alias="serviceStatus")
    service_sub_type: Optional[ServiceSubTypeReference] = Field(default=None, alias="serviceSubType")
    service_type: Optional[ServiceTypeReference] = Field(default=None, alias="serviceType")
    __properties: ClassVar[List[str]] = ["_info", "id", "parsingStyle", "parsingVariable", "priority", "searchTerm", "serviceBoard", "serviceItem", "servicePriority", "serviceStatus", "serviceSubType", "serviceType"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EmailConnectorParsingRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parsing_style
        if self.parsing_style:
            _dict['parsingStyle'] = self.parsing_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parsing_variable
        if self.parsing_variable:
            _dict['parsingVariable'] = self.parsing_variable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_board
        if self.service_board:
            _dict['serviceBoard'] = self.service_board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_item
        if self.service_item:
            _dict['serviceItem'] = self.service_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_priority
        if self.service_priority:
            _dict['servicePriority'] = self.service_priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_status
        if self.service_status:
            _dict['serviceStatus'] = self.service_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_sub_type
        if self.service_sub_type:
            _dict['serviceSubType'] = self.service_sub_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_type
        if self.service_type:
            _dict['serviceType'] = self.service_type.to_dict()
        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict['priority'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EmailConnectorParsingRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in EmailConnectorParsingRule) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "id": obj.get("id"),
            "parsingStyle": EmailConnectorParsingStyleReference.from_dict(obj.get("parsingStyle")) if obj.get("parsingStyle") is not None else None,
            "parsingVariable": EmailConnectorParsingVariableReference.from_dict(obj.get("parsingVariable")) if obj.get("parsingVariable") is not None else None,
            "priority": obj.get("priority"),
            "searchTerm": obj.get("searchTerm"),
            "serviceBoard": BoardReference.from_dict(obj.get("serviceBoard")) if obj.get("serviceBoard") is not None else None,
            "serviceItem": ServiceItemReference.from_dict(obj.get("serviceItem")) if obj.get("serviceItem") is not None else None,
            "servicePriority": PriorityReference.from_dict(obj.get("servicePriority")) if obj.get("servicePriority") is not None else None,
            "serviceStatus": ServiceStatusReference.from_dict(obj.get("serviceStatus")) if obj.get("serviceStatus") is not None else None,
            "serviceSubType": ServiceSubTypeReference.from_dict(obj.get("serviceSubType")) if obj.get("serviceSubType") is not None else None,
            "serviceType": ServiceTypeReference.from_dict(obj.get("serviceType")) if obj.get("serviceType") is not None else None
        })
        return _obj


