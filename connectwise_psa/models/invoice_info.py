# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from connectwise_psa.models.agreement_billing_info import AgreementBillingInfo
from connectwise_psa.models.billing_setup import BillingSetup
from connectwise_psa.models.document_info import DocumentInfo
from connectwise_psa.models.expense_entry import ExpenseEntry
from connectwise_psa.models.invoice import Invoice
from connectwise_psa.models.invoice_template import InvoiceTemplate
from connectwise_psa.models.product_component import ProductComponent
from connectwise_psa.models.product_item import ProductItem
from connectwise_psa.models.time_entry import TimeEntry
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InvoiceInfo(BaseModel):
    """
    InvoiceInfo
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agreement_billing_info: Optional[List[AgreementBillingInfo]] = Field(default=None, alias="agreementBillingInfo")
    billing_setup: Optional[BillingSetup] = Field(default=None, alias="billingSetup")
    bundled_components_info: Optional[List[ProductComponent]] = Field(default=None, alias="bundledComponentsInfo")
    expenses: Optional[List[ExpenseEntry]] = None
    id: Optional[StrictInt] = None
    invoice: Optional[Invoice] = None
    invoice_template: Optional[InvoiceTemplate] = Field(default=None, alias="invoiceTemplate")
    logo: Optional[DocumentInfo] = None
    products: Optional[List[ProductItem]] = None
    time_entries: Optional[List[TimeEntry]] = Field(default=None, alias="timeEntries")
    __properties: ClassVar[List[str]] = ["_info", "agreementBillingInfo", "billingSetup", "bundledComponentsInfo", "expenses", "id", "invoice", "invoiceTemplate", "logo", "products", "timeEntries"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InvoiceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in agreement_billing_info (list)
        _items = []
        if self.agreement_billing_info:
            for _item in self.agreement_billing_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['agreementBillingInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_setup
        if self.billing_setup:
            _dict['billingSetup'] = self.billing_setup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bundled_components_info (list)
        _items = []
        if self.bundled_components_info:
            for _item in self.bundled_components_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bundledComponentsInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in expenses (list)
        _items = []
        if self.expenses:
            for _item in self.expenses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['expenses'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_template
        if self.invoice_template:
            _dict['invoiceTemplate'] = self.invoice_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item in self.products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in time_entries (list)
        _items = []
        if self.time_entries:
            for _item in self.time_entries:
                if _item:
                    _items.append(_item.to_dict())
            _dict['timeEntries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InvoiceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in InvoiceInfo) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agreementBillingInfo": [AgreementBillingInfo.from_dict(_item) for _item in obj.get("agreementBillingInfo")] if obj.get("agreementBillingInfo") is not None else None,
            "billingSetup": BillingSetup.from_dict(obj.get("billingSetup")) if obj.get("billingSetup") is not None else None,
            "bundledComponentsInfo": [ProductComponent.from_dict(_item) for _item in obj.get("bundledComponentsInfo")] if obj.get("bundledComponentsInfo") is not None else None,
            "expenses": [ExpenseEntry.from_dict(_item) for _item in obj.get("expenses")] if obj.get("expenses") is not None else None,
            "id": obj.get("id"),
            "invoice": Invoice.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "invoiceTemplate": InvoiceTemplate.from_dict(obj.get("invoiceTemplate")) if obj.get("invoiceTemplate") is not None else None,
            "logo": DocumentInfo.from_dict(obj.get("logo")) if obj.get("logo") is not None else None,
            "products": [ProductItem.from_dict(_item) for _item in obj.get("products")] if obj.get("products") is not None else None,
            "timeEntries": [TimeEntry.from_dict(_item) for _item in obj.get("timeEntries")] if obj.get("timeEntries") is not None else None
        })
        return _obj


