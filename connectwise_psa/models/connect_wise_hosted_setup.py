# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConnectWiseHostedSetup(BaseModel):
    """
    ConnectWiseHostedSetup
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    client_id: Optional[StrictStr] = Field(default=None, description="Only required if not already set. Max length: 36;", alias="clientId")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated")
    description: StrictStr = Field(description=" Max length: 50;")
    disabled_flag: Optional[StrictBool] = Field(default=None, alias="disabledFlag")
    id: Optional[StrictInt] = None
    location_ids: Optional[List[StrictInt]] = Field(default=None, alias="locationIds")
    locations_enabled_flag: Optional[StrictBool] = Field(default=None, alias="locationsEnabledFlag")
    origin: Optional[StrictStr] = Field(default=None, description=" Max length: 100;")
    pod_height: Optional[StrictInt] = Field(default=None, alias="podHeight")
    screen_id: Optional[StrictInt] = Field(description="Can be obtained via ConnectWiseHostedApiScreen report.", alias="screenId")
    toolbar_button_dialog_height: Optional[StrictInt] = Field(default=None, alias="toolbarButtonDialogHeight")
    toolbar_button_dialog_width: Optional[StrictInt] = Field(default=None, alias="toolbarButtonDialogWidth")
    toolbar_button_icon_document_id: Optional[StrictInt] = Field(default=None, alias="toolbarButtonIconDocumentId")
    toolbar_button_text: Optional[StrictStr] = Field(default=None, description="Only required for ToolbarButtons. Max length: 50;", alias="toolbarButtonText")
    toolbar_button_tool_tip: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="toolbarButtonToolTip")
    type: Optional[StrictStr]
    url: StrictStr = Field(description=" Max length: 1024;")
    __properties: ClassVar[List[str]] = ["_info", "clientId", "createdBy", "dateCreated", "description", "disabledFlag", "id", "locationIds", "locationsEnabledFlag", "origin", "podHeight", "screenId", "toolbarButtonDialogHeight", "toolbarButtonDialogWidth", "toolbarButtonIconDocumentId", "toolbarButtonText", "toolbarButtonToolTip", "type", "url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Tab', 'Pod', 'ToolbarButton'):
            raise ValueError("must be one of enum values ('Tab', 'Pod', 'ToolbarButton')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConnectWiseHostedSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if disabled_flag (nullable) is None
        # and model_fields_set contains the field
        if self.disabled_flag is None and "disabled_flag" in self.model_fields_set:
            _dict['disabledFlag'] = None

        # set to None if locations_enabled_flag (nullable) is None
        # and model_fields_set contains the field
        if self.locations_enabled_flag is None and "locations_enabled_flag" in self.model_fields_set:
            _dict['locationsEnabledFlag'] = None

        # set to None if pod_height (nullable) is None
        # and model_fields_set contains the field
        if self.pod_height is None and "pod_height" in self.model_fields_set:
            _dict['podHeight'] = None

        # set to None if screen_id (nullable) is None
        # and model_fields_set contains the field
        if self.screen_id is None and "screen_id" in self.model_fields_set:
            _dict['screenId'] = None

        # set to None if toolbar_button_dialog_height (nullable) is None
        # and model_fields_set contains the field
        if self.toolbar_button_dialog_height is None and "toolbar_button_dialog_height" in self.model_fields_set:
            _dict['toolbarButtonDialogHeight'] = None

        # set to None if toolbar_button_dialog_width (nullable) is None
        # and model_fields_set contains the field
        if self.toolbar_button_dialog_width is None and "toolbar_button_dialog_width" in self.model_fields_set:
            _dict['toolbarButtonDialogWidth'] = None

        # set to None if toolbar_button_icon_document_id (nullable) is None
        # and model_fields_set contains the field
        if self.toolbar_button_icon_document_id is None and "toolbar_button_icon_document_id" in self.model_fields_set:
            _dict['toolbarButtonIconDocumentId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConnectWiseHostedSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ConnectWiseHostedSetup) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "clientId": obj.get("clientId"),
            "createdBy": obj.get("createdBy"),
            "dateCreated": obj.get("dateCreated"),
            "description": obj.get("description"),
            "disabledFlag": obj.get("disabledFlag"),
            "id": obj.get("id"),
            "locationIds": obj.get("locationIds"),
            "locationsEnabledFlag": obj.get("locationsEnabledFlag"),
            "origin": obj.get("origin"),
            "podHeight": obj.get("podHeight"),
            "screenId": obj.get("screenId"),
            "toolbarButtonDialogHeight": obj.get("toolbarButtonDialogHeight"),
            "toolbarButtonDialogWidth": obj.get("toolbarButtonDialogWidth"),
            "toolbarButtonIconDocumentId": obj.get("toolbarButtonIconDocumentId"),
            "toolbarButtonText": obj.get("toolbarButtonText"),
            "toolbarButtonToolTip": obj.get("toolbarButtonToolTip"),
            "type": obj.get("type"),
            "url": obj.get("url")
        })
        return _obj


