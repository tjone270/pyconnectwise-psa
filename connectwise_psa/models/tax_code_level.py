# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TaxCodeLevel(BaseModel):
    """
    TaxCodeLevel
    """ # noqa: E501
    info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="_info")
    agency_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 100;", alias="agencyXref")
    caption: Optional[StrictStr] = Field(default=None, description=" Max length: 25;")
    id: Optional[StrictInt] = None
    rate_type: Optional[StrictStr] = Field(alias="rateType")
    single_unit_flag: Optional[StrictBool] = Field(default=None, alias="singleUnitFlag")
    single_unit_maximum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="singleUnitMaximum")
    single_unit_minimum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="singleUnitMinimum")
    tax_code_xref: Optional[StrictStr] = Field(default=None, description=" Max length: 50;", alias="taxCodeXref")
    tax_expenses_flag: Optional[StrictBool] = Field(default=None, alias="taxExpensesFlag")
    tax_level: Optional[StrictInt] = Field(default=None, alias="taxLevel")
    tax_products_flag: Optional[StrictBool] = Field(default=None, alias="taxProductsFlag")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(alias="taxRate")
    tax_services_flag: Optional[StrictBool] = Field(default=None, alias="taxServicesFlag")
    taxable_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxableMax")
    __properties: ClassVar[List[str]] = ["_info", "agencyXref", "caption", "id", "rateType", "singleUnitFlag", "singleUnitMaximum", "singleUnitMinimum", "taxCodeXref", "taxExpensesFlag", "taxLevel", "taxProductsFlag", "taxRate", "taxServicesFlag", "taxableMax"]

    @field_validator('rate_type')
    def rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Amount', 'Percent'):
            raise ValueError("must be one of enum values ('Amount', 'Percent')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaxCodeLevel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.rate_type is None and "rate_type" in self.model_fields_set:
            _dict['rateType'] = None

        # set to None if single_unit_flag (nullable) is None
        # and model_fields_set contains the field
        if self.single_unit_flag is None and "single_unit_flag" in self.model_fields_set:
            _dict['singleUnitFlag'] = None

        # set to None if single_unit_maximum (nullable) is None
        # and model_fields_set contains the field
        if self.single_unit_maximum is None and "single_unit_maximum" in self.model_fields_set:
            _dict['singleUnitMaximum'] = None

        # set to None if single_unit_minimum (nullable) is None
        # and model_fields_set contains the field
        if self.single_unit_minimum is None and "single_unit_minimum" in self.model_fields_set:
            _dict['singleUnitMinimum'] = None

        # set to None if tax_expenses_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_expenses_flag is None and "tax_expenses_flag" in self.model_fields_set:
            _dict['taxExpensesFlag'] = None

        # set to None if tax_products_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_products_flag is None and "tax_products_flag" in self.model_fields_set:
            _dict['taxProductsFlag'] = None

        # set to None if tax_rate (nullable) is None
        # and model_fields_set contains the field
        if self.tax_rate is None and "tax_rate" in self.model_fields_set:
            _dict['taxRate'] = None

        # set to None if tax_services_flag (nullable) is None
        # and model_fields_set contains the field
        if self.tax_services_flag is None and "tax_services_flag" in self.model_fields_set:
            _dict['taxServicesFlag'] = None

        # set to None if taxable_max (nullable) is None
        # and model_fields_set contains the field
        if self.taxable_max is None and "taxable_max" in self.model_fields_set:
            _dict['taxableMax'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TaxCodeLevel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in TaxCodeLevel) in the input: " + _key)

        _obj = cls.model_validate({
            "_info": obj.get("_info"),
            "agencyXref": obj.get("agencyXref"),
            "caption": obj.get("caption"),
            "id": obj.get("id"),
            "rateType": obj.get("rateType"),
            "singleUnitFlag": obj.get("singleUnitFlag"),
            "singleUnitMaximum": obj.get("singleUnitMaximum"),
            "singleUnitMinimum": obj.get("singleUnitMinimum"),
            "taxCodeXref": obj.get("taxCodeXref"),
            "taxExpensesFlag": obj.get("taxExpensesFlag"),
            "taxLevel": obj.get("taxLevel"),
            "taxProductsFlag": obj.get("taxProductsFlag"),
            "taxRate": obj.get("taxRate"),
            "taxServicesFlag": obj.get("taxServicesFlag"),
            "taxableMax": obj.get("taxableMax")
        })
        return _obj


