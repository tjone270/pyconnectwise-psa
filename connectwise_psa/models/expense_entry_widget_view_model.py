# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
from connectwise_psa.models.generic_name_id_dto import GenericNameIdDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ExpenseEntryWidgetViewModel(BaseModel):
    """
    ExpenseEntryWidgetViewModel
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    billable: Optional[GenericNameIdDTO] = None
    class_type: Optional[GenericNameIdDTO] = Field(default=None, alias="classType")
    default_billable: Optional[GenericNameIdDTO] = Field(default=None, alias="defaultBillable")
    default_billable_rec_id: Optional[StrictInt] = Field(default=None, alias="defaultBillableRecId")
    default_classification: Optional[GenericNameIdDTO] = Field(default=None, alias="defaultClassification")
    default_payment_method: Optional[GenericNameIdDTO] = Field(default=None, alias="defaultPaymentMethod")
    expense_type: Optional[GenericNameIdDTO] = Field(default=None, alias="expenseType")
    payment_method: Optional[GenericNameIdDTO] = Field(default=None, alias="paymentMethod")
    __properties: ClassVar[List[str]] = ["amount", "billable", "classType", "defaultBillable", "defaultBillableRecId", "defaultClassification", "defaultPaymentMethod", "expenseType", "paymentMethod"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExpenseEntryWidgetViewModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billable
        if self.billable:
            _dict['billable'] = self.billable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of class_type
        if self.class_type:
            _dict['classType'] = self.class_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_billable
        if self.default_billable:
            _dict['defaultBillable'] = self.default_billable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_classification
        if self.default_classification:
            _dict['defaultClassification'] = self.default_classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_payment_method
        if self.default_payment_method:
            _dict['defaultPaymentMethod'] = self.default_payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expense_type
        if self.expense_type:
            _dict['expenseType'] = self.expense_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['paymentMethod'] = self.payment_method.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExpenseEntryWidgetViewModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ExpenseEntryWidgetViewModel) in the input: " + _key)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "billable": GenericNameIdDTO.from_dict(obj.get("billable")) if obj.get("billable") is not None else None,
            "classType": GenericNameIdDTO.from_dict(obj.get("classType")) if obj.get("classType") is not None else None,
            "defaultBillable": GenericNameIdDTO.from_dict(obj.get("defaultBillable")) if obj.get("defaultBillable") is not None else None,
            "defaultBillableRecId": obj.get("defaultBillableRecId"),
            "defaultClassification": GenericNameIdDTO.from_dict(obj.get("defaultClassification")) if obj.get("defaultClassification") is not None else None,
            "defaultPaymentMethod": GenericNameIdDTO.from_dict(obj.get("defaultPaymentMethod")) if obj.get("defaultPaymentMethod") is not None else None,
            "expenseType": GenericNameIdDTO.from_dict(obj.get("expenseType")) if obj.get("expenseType") is not None else None,
            "paymentMethod": GenericNameIdDTO.from_dict(obj.get("paymentMethod")) if obj.get("paymentMethod") is not None else None
        })
        return _obj


