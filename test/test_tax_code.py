# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from connectwise_psa.models.tax_code import TaxCode

class TestTaxCode(unittest.TestCase):
    """TaxCode unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TaxCode:
        """Test TaxCode
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaxCode`
        """
        model = TaxCode()
        if include_optional:
            return TaxCode(
                info = {
                    'key' : ''
                    },
                add_all_expense_types = True,
                add_all_product_types = True,
                add_all_work_roles = True,
                canada_calculate_gst_flag = True,
                cancel_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                country = connectwise_psa.models.country_reference.CountryReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    identifier = '', 
                    name = '', ),
                default_flag = True,
                description = '',
                display_on_invoice_flag = True,
                effective_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                expense_type_ids = [
                    56
                    ],
                id = 56,
                identifier = '',
                invoice_caption = '',
                level_five_agency_xref = '',
                level_five_apply_single_unit_flag = True,
                level_five_apply_single_unit_max = 1.337,
                level_five_apply_single_unit_min = 1.337,
                level_five_caption = '',
                level_five_expenses_flag = True,
                level_five_products_flag = True,
                level_five_rate = 1.337,
                level_five_rate_type = 'Amount',
                level_five_services_flag = True,
                level_five_tax_code_xref = '',
                level_five_taxable_max = 1.337,
                level_four_agency_xref = '',
                level_four_apply_single_unit_flag = True,
                level_four_apply_single_unit_max = 1.337,
                level_four_apply_single_unit_min = 1.337,
                level_four_caption = '',
                level_four_expenses_flag = True,
                level_four_products_flag = True,
                level_four_rate = 1.337,
                level_four_rate_type = 'Amount',
                level_four_services_flag = True,
                level_four_tax_code_xref = '',
                level_four_taxable_max = 1.337,
                level_one_agency_xref = '',
                level_one_apply_single_unit_flag = True,
                level_one_apply_single_unit_max = 1.337,
                level_one_apply_single_unit_min = 1.337,
                level_one_caption = '',
                level_one_expenses_flag = True,
                level_one_products_flag = True,
                level_one_rate = 1.337,
                level_one_rate_type = 'Amount',
                level_one_services_flag = True,
                level_one_tax_code_xref = '',
                level_one_taxable_max = 1.337,
                level_six_agency_xref = '',
                level_six_apply_single_unit_flag = True,
                level_six_apply_single_unit_max = 1.337,
                level_six_apply_single_unit_min = 1.337,
                level_six_caption = '',
                level_six_expenses_flag = True,
                level_six_products_flag = True,
                level_six_rate = 1.337,
                level_six_rate_type = 'Amount',
                level_six_services_flag = True,
                level_six_tax_code_xref = '',
                level_six_taxable_max = 1.337,
                level_three_agency_xref = '',
                level_three_apply_single_unit_flag = True,
                level_three_apply_single_unit_max = 1.337,
                level_three_apply_single_unit_min = 1.337,
                level_three_caption = '',
                level_three_expenses_flag = True,
                level_three_products_flag = True,
                level_three_rate = 1.337,
                level_three_rate_type = 'Amount',
                level_three_services_flag = True,
                level_three_tax_code_xref = '',
                level_three_taxable_max = 1.337,
                level_two_agency_xref = '',
                level_two_apply_single_unit_flag = True,
                level_two_apply_single_unit_max = 1.337,
                level_two_apply_single_unit_min = 1.337,
                level_two_caption = '',
                level_two_expenses_flag = True,
                level_two_products_flag = True,
                level_two_rate = 1.337,
                level_two_rate_type = 'Amount',
                level_two_services_flag = True,
                level_two_tax_code_xref = '',
                level_two_taxable_max = 1.337,
                product_type_ids = [
                    56
                    ],
                remove_all_expense_types = True,
                remove_all_product_types = True,
                remove_all_work_roles = True,
                work_role_ids = [
                    56
                    ]
            )
        else:
            return TaxCode(
                description = '',
                effective_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                identifier = '',
                invoice_caption = '',
        )
        """

    def testTaxCode(self):
        """Test TaxCode"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
