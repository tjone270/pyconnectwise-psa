# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from connectwise_psa.models.email_connector import EmailConnector

class TestEmailConnector(unittest.TestCase):
    """EmailConnector unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EmailConnector:
        """Test EmailConnector
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EmailConnector`
        """
        model = EmailConnector()
        if include_optional:
            return EmailConnector(
                info = {
                    'key' : ''
                    },
                add_cc_flag = True,
                asio365_email_setup = connectwise_psa.models.office365_email_setup_reference.Office365EmailSetupReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                bcc_email_to = '',
                create_contact_flag = True,
                default_company = connectwise_psa.models.company_reference.CompanyReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    identifier = '', 
                    name = '', ),
                default_member = connectwise_psa.models.member_reference.MemberReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    identifier = '', 
                    name = '', ),
                department = connectwise_psa.models.system_department_reference.SystemDepartmentReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    identifier = '', 
                    name = '', ),
                discard_duplicates_flag = True,
                email_errors_to = '',
                email_notify_from = '',
                email_server_type = 'IMAP',
                google_email_setup = connectwise_psa.models.google_email_setup_reference.GoogleEmailSetupReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                id = 56,
                imap_setup = connectwise_psa.models.imap_setup_reference.ImapSetupReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                inbound_ticket_mailbox_id = '',
                item_override = connectwise_psa.models.service_item_reference.ServiceItemReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                location = connectwise_psa.models.system_location_reference.SystemLocationReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                never_respond_flag = True,
                no_response_flag = True,
                office365_email_setup = connectwise_psa.models.office365_email_setup_reference.Office365EmailSetupReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                post_replies_to_ticket_flag = True,
                priority_override = connectwise_psa.models.priority_reference.PriorityReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    level = '', 
                    name = '', 
                    sort = 56, ),
                response_email_for_existing = '',
                response_email_for_new = '',
                service_board = connectwise_psa.models.board_reference.BoardReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                set_email_to_default_contact_flag = True,
                source_override = connectwise_psa.models.service_source_reference.ServiceSourceReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                status_override = connectwise_psa.models.service_status_reference.ServiceStatusReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', 
                    sort = 56, ),
                sub_type_override = connectwise_psa.models.service_sub_type_reference.ServiceSubTypeReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                type_override = connectwise_psa.models.service_type_reference.ServiceTypeReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                use_email_message_id_flag = True
            )
        else:
            return EmailConnector(
                email_errors_to = '',
        )
        """

    def testEmailConnector(self):
        """Test EmailConnector"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
