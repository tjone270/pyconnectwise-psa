# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from connectwise_psa.models.unposted_expense import UnpostedExpense

class TestUnpostedExpense(unittest.TestCase):
    """UnpostedExpense unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UnpostedExpense:
        """Test UnpostedExpense
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UnpostedExpense`
        """
        model = UnpostedExpense()
        if include_optional:
            return UnpostedExpense(
                info = {
                    'key' : ''
                    },
                account_number = '',
                agreement = connectwise_psa.models.agreement_reference.AgreementReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', 
                    type = '', ),
                agreement_amount_covered = 1.337,
                avalara_tax_flag = True,
                billable_amount = 1.337,
                charge_code = connectwise_psa.models.charge_code_reference.ChargeCodeReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                charge_description = '',
                city_tax_amount = 1.337,
                city_tax_flag = True,
                city_tax_xref = '',
                classification = 'NonReimbursable',
                company = connectwise_psa.models.company_reference.CompanyReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    identifier = '', 
                    name = '', ),
                composite_tax_amount = 1.337,
                composite_tax_flag = True,
                composite_tax_xref = '',
                country_tax_amount = 1.337,
                country_tax_flag = True,
                country_tax_xref = '',
                county_tax_amount = 1.337,
                county_tax_flag = True,
                county_tax_xref = '',
                credit_account = '',
                currency = connectwise_psa.models.currency_reference.CurrencyReference(
                    _info = {
                        'key' : ''
                        }, 
                    currency_code = '', 
                    currency_identifier = '', 
                    decimal_separator = '', 
                    display_id_flag = True, 
                    display_symbol_flag = True, 
                    id = 56, 
                    name = '', 
                    negative_parentheses_flag = True, 
                    number_of_decimals = 56, 
                    right_align = True, 
                    symbol = '', 
                    thousands_separator = '', ),
                date_closed = '',
                date_expense = '',
                department_id = 56,
                expense_detail_id = 56,
                expense_type = connectwise_psa.models.expense_type_reference.ExpenseTypeReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                gl_type = 'AP',
                id = 56,
                in_policy = True,
                item_taxable_flag = True,
                level_six_tax_amount = 1.337,
                level_six_tax_flag = True,
                level_six_tax_xref = '',
                location_id = 56,
                member = connectwise_psa.models.member_reference.MemberReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    identifier = '', 
                    name = '', ),
                non_billable_amount = 1.337,
                payment_method = connectwise_psa.models.payment_method_reference.PaymentMethodReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                project = connectwise_psa.models.project_reference.ProjectReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                project_phase = connectwise_psa.models.project_phase_reference.ProjectPhaseReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                sales_tax_amount = 1.337,
                state_tax_amount = 1.337,
                state_tax_flag = True,
                state_tax_xref = '',
                tax_code = connectwise_psa.models.tax_code_reference.TaxCodeReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                ticket = connectwise_psa.models.ticket_reference.TicketReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    summary = '', ),
                total = 1.337
            )
        else:
            return UnpostedExpense(
        )
        """

    def testUnpostedExpense(self):
        """Test UnpostedExpense"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
