# coding: utf-8

"""
    ConnectWise PSA

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2022.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from connectwise_psa.models.gl_export_transaction_detail import GLExportTransactionDetail

class TestGLExportTransactionDetail(unittest.TestCase):
    """GLExportTransactionDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GLExportTransactionDetail:
        """Test GLExportTransactionDetail
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GLExportTransactionDetail`
        """
        model = GLExportTransactionDetail()
        if include_optional:
            return GLExportTransactionDetail(
                account_number = '',
                cogs_xref = '',
                cost = 1.337,
                cost_account_number = '',
                currency = connectwise_psa.models.currency_reference.CurrencyReference(
                    _info = {
                        'key' : ''
                        }, 
                    currency_code = '', 
                    currency_identifier = '', 
                    decimal_separator = '', 
                    display_id_flag = True, 
                    display_symbol_flag = True, 
                    id = 56, 
                    name = '', 
                    negative_parentheses_flag = True, 
                    number_of_decimals = 56, 
                    right_align = True, 
                    symbol = '', 
                    thousands_separator = '', ),
                description = '',
                document_date = '',
                document_type = '',
                drop_shipped_flag = True,
                gl_class = '',
                gl_item_id = '',
                gl_type_id = '',
                id = 56,
                inventory_account_number = '',
                inventory_xref = '',
                invoice_summary_option = '',
                item = connectwise_psa.models.iv_item_reference.IvItemReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    identifier = '', 
                    serialized_flag = True, ),
                item_cost = 1.337,
                item_description = '',
                item_price = 1.337,
                item_taxable_flag = True,
                item_type_xref = '',
                location_xref = '',
                memo = '',
                price_level_xref = '',
                product = connectwise_psa.models.product_reference.ProductReference(
                    _info = {
                        'key' : ''
                        }, 
                    description = '', 
                    id = 56, ),
                product_account_number = '',
                quantity = 1.337,
                sales_code = '',
                sales_description = '',
                serial_numbers = '',
                serialized_flag = True,
                shipment_method = connectwise_psa.models.shipment_method_reference.ShipmentMethodReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                sub_category = connectwise_psa.models.product_sub_category_reference.ProductSubCategoryReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                tax_agency_xref = '',
                tax_code = connectwise_psa.models.tax_code_reference.TaxCodeReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                tax_code_xref = '',
                tax_levels = [
                    connectwise_psa.models.gl_export_transaction_detail_tax_level.GLExportTransactionDetailTaxLevel(
                        tax_level = 56, 
                        taxable_flag = True, )
                    ],
                tax_note = '',
                tax_rate = 1.337,
                tax_rate_percent = 1.337,
                taxable2_flag = True,
                taxable3_flag = True,
                taxable4_flag = True,
                taxable5_flag = True,
                taxable_flag = True,
                time_entry = connectwise_psa.models.time_entry_reference.TimeEntryReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, ),
                total = 1.337,
                unit_of_measure = connectwise_psa.models.unit_of_measure_reference.UnitOfMeasureReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                uom_schedule_xref = '',
                warehouse_bin = connectwise_psa.models.warehouse_bin_reference.WarehouseBinReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', ),
                warehouse_site = connectwise_psa.models.site_reference.SiteReference(
                    _info = {
                        'key' : ''
                        }, 
                    id = 56, 
                    name = '', )
            )
        else:
            return GLExportTransactionDetail(
        )
        """

    def testGLExportTransactionDetail(self):
        """Test GLExportTransactionDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
